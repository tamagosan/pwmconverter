
pwmconverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ec  08008e30  08008e30  00018e30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800961c  0800961c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800961c  0800961c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800961c  0800961c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800961c  0800961c  0001961c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009620  08009620  00019620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000000dc  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002bc  200002bc  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f24b  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002065  00000000  00000000  0002f45b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c90  00000000  00000000  000314c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b98  00000000  00000000  00032150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ca2a  00000000  00000000  00032ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eca8  00000000  00000000  0004f712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a97f2  00000000  00000000  0005e3ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00107bac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004660  00000000  00000000  00107c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e14 	.word	0x08008e14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08008e14 	.word	0x08008e14

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	ed2d 8b02 	vpush	{d8}
 8000bee:	b0a3      	sub	sp, #140	; 0x8c
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int start_flag1 = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	int start_flag2 = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	int start_flag3 = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	67fb      	str	r3, [r7, #124]	; 0x7c
	int start_cnt = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	67bb      	str	r3, [r7, #120]	; 0x78

	float duty = 0;
 8000c06:	f04f 0300 	mov.w	r3, #0
 8000c0a:	677b      	str	r3, [r7, #116]	; 0x74
	float vdc_lpf_delay = 0;
 8000c0c:	f04f 0300 	mov.w	r3, #0
 8000c10:	673b      	str	r3, [r7, #112]	; 0x70
	float il;
	float vdcs;
	float vdc;

	float il_est = 0;
 8000c12:	f04f 0300 	mov.w	r3, #0
 8000c16:	66fb      	str	r3, [r7, #108]	; 0x6c
	float vac_est = 0;
 8000c18:	f04f 0300 	mov.w	r3, #0
 8000c1c:	66bb      	str	r3, [r7, #104]	; 0x68
	float vacd_est = 0;
 8000c1e:	f04f 0300 	mov.w	r3, #0
 8000c22:	667b      	str	r3, [r7, #100]	; 0x64
	float vac_est_delay = 0;
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	663b      	str	r3, [r7, #96]	; 0x60
	float ob_err;
	float il_est_set;
	float vac_est_set;
	float vacd_est_set;

	float theta = 0;
 8000c2a:	f04f 0300 	mov.w	r3, #0
 8000c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
	float theta_err = 0;
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	65bb      	str	r3, [r7, #88]	; 0x58
	float theta_ref;
	float theta_m;

	float vdc_lfs = 0;
 8000c36:	f04f 0300 	mov.w	r3, #0
 8000c3a:	653b      	str	r3, [r7, #80]	; 0x50
	float idc_ref = 0;
 8000c3c:	f04f 0300 	mov.w	r3, #0
 8000c40:	64fb      	str	r3, [r7, #76]	; 0x4c
	float dcvc_delay = 0;
 8000c42:	f04f 0300 	mov.w	r3, #0
 8000c46:	64bb      	str	r3, [r7, #72]	; 0x48
	float vdc_err;
	float io_ob;
	float io_est;
	float idc_limit;

	float ilc_i = 0;
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	647b      	str	r3, [r7, #68]	; 0x44
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4e:	f000 ff1f 	bl	8001a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c52:	f000 fb29 	bl	80012a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c56:	f000 fcb1 	bl	80015bc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000c5a:	f000 fb81 	bl	8001360 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000c5e:	f000 fc05 	bl	800146c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000c62:	2100      	movs	r1, #0
 8000c64:	48c4      	ldr	r0, [pc, #784]	; (8000f78 <main+0x390>)
 8000c66:	f001 fb49 	bl	80022fc <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8000c6a:	48c3      	ldr	r0, [pc, #780]	; (8000f78 <main+0x390>)
 8000c6c:	f001 fbb8 	bl	80023e0 <HAL_ADCEx_InjectedStart_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8000c70:	48c2      	ldr	r0, [pc, #776]	; (8000f7c <main+0x394>)
 8000c72:	f003 fe0b 	bl	800488c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c76:	2100      	movs	r1, #0
 8000c78:	48c0      	ldr	r0, [pc, #768]	; (8000f7c <main+0x394>)
 8000c7a:	f003 febb 	bl	80049f4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000c7e:	2100      	movs	r1, #0
 8000c80:	48be      	ldr	r0, [pc, #760]	; (8000f7c <main+0x394>)
 8000c82:	f004 fbfb 	bl	800547c <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000c86:	2104      	movs	r1, #4
 8000c88:	48bc      	ldr	r0, [pc, #752]	; (8000f7c <main+0x394>)
 8000c8a:	f003 feb3 	bl	80049f4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000c8e:	2104      	movs	r1, #4
 8000c90:	48ba      	ldr	r0, [pc, #744]	; (8000f7c <main+0x394>)
 8000c92:	f004 fbf3 	bl	800547c <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000c96:	210c      	movs	r1, #12
 8000c98:	48b8      	ldr	r0, [pc, #736]	; (8000f7c <main+0x394>)
 8000c9a:	f003 feab 	bl	80049f4 <HAL_TIM_PWM_Start>
  TIM1 -> CCR1 = TIM1 -> ARR * 0.5;
 8000c9e:	4bb8      	ldr	r3, [pc, #736]	; (8000f80 <main+0x398>)
 8000ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fc2e 	bl	8000504 <__aeabi_ui2d>
 8000ca8:	f04f 0200 	mov.w	r2, #0
 8000cac:	4bb5      	ldr	r3, [pc, #724]	; (8000f84 <main+0x39c>)
 8000cae:	f7ff fca3 	bl	80005f8 <__aeabi_dmul>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	4cb2      	ldr	r4, [pc, #712]	; (8000f80 <main+0x398>)
 8000cb8:	4610      	mov	r0, r2
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f7ff ff74 	bl	8000ba8 <__aeabi_d2uiz>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	6363      	str	r3, [r4, #52]	; 0x34
  TIM1 -> CCR2 = TIM1 -> ARR * 0.5;
 8000cc4:	4bae      	ldr	r3, [pc, #696]	; (8000f80 <main+0x398>)
 8000cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fc1b 	bl	8000504 <__aeabi_ui2d>
 8000cce:	f04f 0200 	mov.w	r2, #0
 8000cd2:	4bac      	ldr	r3, [pc, #688]	; (8000f84 <main+0x39c>)
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4ca8      	ldr	r4, [pc, #672]	; (8000f80 <main+0x398>)
 8000cde:	4610      	mov	r0, r2
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f7ff ff61 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	63a3      	str	r3, [r4, #56]	; 0x38
  TIM1 -> CCR4 = TIM1 -> ARR * 0.01;
 8000cea:	4ba5      	ldr	r3, [pc, #660]	; (8000f80 <main+0x398>)
 8000cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fc08 	bl	8000504 <__aeabi_ui2d>
 8000cf4:	a39e      	add	r3, pc, #632	; (adr r3, 8000f70 <main+0x388>)
 8000cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cfa:	f7ff fc7d 	bl	80005f8 <__aeabi_dmul>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	460b      	mov	r3, r1
 8000d02:	4c9f      	ldr	r4, [pc, #636]	; (8000f80 <main+0x398>)
 8000d04:	4610      	mov	r0, r2
 8000d06:	4619      	mov	r1, r3
 8000d08:	f7ff ff4e 	bl	8000ba8 <__aeabi_d2uiz>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	6423      	str	r3, [r4, #64]	; 0x40
  while (1)
  {
    /* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
    if(adc_flag){
 8000d10:	4b9d      	ldr	r3, [pc, #628]	; (8000f88 <main+0x3a0>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d0fb      	beq.n	8000d10 <main+0x128>
    	/* get sensor value */
		il = 1.0f - (2048.0f - (float)(ADC1 -> JDR1)) * 3.3f / 2048.0f / 8.2f / R_SHUNT;
 8000d18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d20:	ee07 3a90 	vmov	s15, r3
 8000d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d28:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8000f8c <main+0x3a4>
 8000d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d30:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8000f90 <main+0x3a8>
 8000d34:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d38:	eddf 6a94 	vldr	s13, [pc, #592]	; 8000f8c <main+0x3a4>
 8000d3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d40:	eddf 6a94 	vldr	s13, [pc, #592]	; 8000f94 <main+0x3ac>
 8000d44:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000d48:	eddf 6a93 	vldr	s13, [pc, #588]	; 8000f98 <main+0x3b0>
 8000d4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000d54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d58:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		vdcs = (float)(ADC1 -> JDR2) * 3.3f / 4096.0f / 8.2f / 2.0f / VDC_DIV;
 8000d5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000d64:	ee07 3a90 	vmov	s15, r3
 8000d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d6c:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8000f90 <main+0x3a8>
 8000d70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d74:	eddf 6a89 	vldr	s13, [pc, #548]	; 8000f9c <main+0x3b4>
 8000d78:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000d7c:	eddf 6a85 	vldr	s13, [pc, #532]	; 8000f94 <main+0x3ac>
 8000d80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d84:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000d88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000d8c:	eddf 6a84 	vldr	s13, [pc, #528]	; 8000fa0 <main+0x3b8>
 8000d90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d94:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		/* start up */
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 8000d98:	2108      	movs	r1, #8
 8000d9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9e:	f002 fb31 	bl	8003404 <HAL_GPIO_ReadPin>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d00d      	beq.n	8000dc4 <main+0x1dc>
		{
			start_cnt = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	67bb      	str	r3, [r7, #120]	; 0x78
			start_flag1 = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			start_flag2 = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2102      	movs	r1, #2
 8000dbc:	4879      	ldr	r0, [pc, #484]	; (8000fa4 <main+0x3bc>)
 8000dbe:	f002 fb39 	bl	8003434 <HAL_GPIO_WritePin>
 8000dc2:	e021      	b.n	8000e08 <main+0x220>
		}
		else
		{
			if (start_cnt == START_STEP)
 8000dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d107      	bne.n	8000dde <main+0x1f6>
			{
				start_flag1 = 1;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2102      	movs	r1, #2
 8000dd8:	4872      	ldr	r0, [pc, #456]	; (8000fa4 <main+0x3bc>)
 8000dda:	f002 fb2b 	bl	8003434 <HAL_GPIO_WritePin>
			}
			if (start_cnt == SS_BGN_STEP) start_flag2 = 1;
 8000dde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000de0:	f242 7210 	movw	r2, #10000	; 0x2710
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d102      	bne.n	8000dee <main+0x206>
 8000de8:	2301      	movs	r3, #1
 8000dea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			if (start_cnt == SS_END_STEP) start_flag3 = 1;
 8000dee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000df0:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d101      	bne.n	8000dfc <main+0x214>
 8000df8:	2301      	movs	r3, #1
 8000dfa:	67fb      	str	r3, [r7, #124]	; 0x7c
			if (!start_flag3) start_cnt++;
 8000dfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d102      	bne.n	8000e08 <main+0x220>
 8000e02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000e04:	3301      	adds	r3, #1
 8000e06:	67bb      	str	r3, [r7, #120]	; 0x78
		}

		/* DC voltage LPF */
		vdc = vdc_lpf_delay + vdcs * TIM_SPL / (TIM_SPL + 1.0f / (2.0f * PI * VDC_LPF_COF));
 8000e08:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000e0c:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8000fa8 <main+0x3c0>
 8000e10:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e14:	eddf 6a65 	vldr	s13, [pc, #404]	; 8000fac <main+0x3c4>
 8000e18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e1c:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8000e20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e24:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		vdc_lpf_delay = vdc * 1.0f / (2.0f * PI * VDC_LPF_COF) / (TIM_SPL + 1.0f / (2.0f * PI * VDC_LPF_COF));
 8000e28:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000e2c:	eddf 6a60 	vldr	s13, [pc, #384]	; 8000fb0 <main+0x3c8>
 8000e30:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000e34:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8000fac <main+0x3c4>
 8000e38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e3c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

		/* AC voltage observer */
		ob_err = il - il_est;
 8000e40:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000e44:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8000e48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e4c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

		il_est_set = ob_err * OB_GAIN1 - vdc * duty / PRM_L - il_est * PRM_R / PRM_L + vac_est / PRM_L;
 8000e50:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000e54:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8000fb4 <main+0x3cc>
 8000e58:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e5c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8000e60:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8000e64:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e68:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8000fb8 <main+0x3d0>
 8000e6c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000e70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e74:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8000e78:	eddf 6a50 	vldr	s13, [pc, #320]	; 8000fbc <main+0x3d4>
 8000e7c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000e80:	ed9f 6a4d 	vldr	s12, [pc, #308]	; 8000fb8 <main+0x3d0>
 8000e84:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000e88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e8c:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8000e90:	ed9f 6a49 	vldr	s12, [pc, #292]	; 8000fb8 <main+0x3d0>
 8000e94:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e9c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		vac_est_set = ob_err * OB_GAIN2 + vacd_est;
 8000ea0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000ea4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8000fc0 <main+0x3d8>
 8000ea8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eac:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000eb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eb4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		vacd_est_set = ob_err * OB_GAIN3 - vac_est * 2.0f * PI * AC_FREQ * 2.0f * PI * AC_FREQ;
 8000eb8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000ebc:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8000fc4 <main+0x3dc>
 8000ec0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ec4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8000ec8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000ecc:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8000fc8 <main+0x3e0>
 8000ed0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000ed4:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8000fcc <main+0x3e4>
 8000ed8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000edc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000ee0:	eddf 6a39 	vldr	s13, [pc, #228]	; 8000fc8 <main+0x3e0>
 8000ee4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000ee8:	eddf 6a38 	vldr	s13, [pc, #224]	; 8000fcc <main+0x3e4>
 8000eec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000ef0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ef4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		il_est += il_est_set * TIM_SPL;
 8000ef8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000efc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8000fa8 <main+0x3c0>
 8000f00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f04:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8000f08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f0c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		vac_est += vac_est_set * TIM_SPL;
 8000f10:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000f14:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000fa8 <main+0x3c0>
 8000f18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f1c:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8000f20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f24:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		vacd_est += vacd_est_set * TIM_SPL;
 8000f28:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000f2c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000fa8 <main+0x3c0>
 8000f30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f34:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000f38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f3c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

		/* zero cross */
		if (vac_est * vac_est_delay < 0.0f)
 8000f40:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8000f44:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f54:	f140 80b7 	bpl.w	80010c6 <main+0x4de>
		{
			/* PLL */
			if (vac_est > 0) theta_ref = PI * 5.0f/2.0f;
 8000f58:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8000f5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f64:	dd36      	ble.n	8000fd4 <main+0x3ec>
 8000f66:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <main+0x3e8>)
 8000f68:	657b      	str	r3, [r7, #84]	; 0x54
 8000f6a:	e035      	b.n	8000fd8 <main+0x3f0>
 8000f6c:	f3af 8000 	nop.w
 8000f70:	47ae147b 	.word	0x47ae147b
 8000f74:	3f847ae1 	.word	0x3f847ae1
 8000f78:	20000208 	.word	0x20000208
 8000f7c:	20000258 	.word	0x20000258
 8000f80:	40012c00 	.word	0x40012c00
 8000f84:	3fe00000 	.word	0x3fe00000
 8000f88:	200002a4 	.word	0x200002a4
 8000f8c:	45000000 	.word	0x45000000
 8000f90:	40533333 	.word	0x40533333
 8000f94:	41033333 	.word	0x41033333
 8000f98:	3c23d70a 	.word	0x3c23d70a
 8000f9c:	45800000 	.word	0x45800000
 8000fa0:	3a0eebc1 	.word	0x3a0eebc1
 8000fa4:	48000400 	.word	0x48000400
 8000fa8:	3851b717 	.word	0x3851b717
 8000fac:	3a5db6f9 	.word	0x3a5db6f9
 8000fb0:	449d1464 	.word	0x449d1464
 8000fb4:	463c0428 	.word	0x463c0428
 8000fb8:	3a449ba6 	.word	0x3a449ba6
 8000fbc:	3ecccccd 	.word	0x3ecccccd
 8000fc0:	4767079e 	.word	0x4767079e
 8000fc4:	4d308845 	.word	0x4d308845
 8000fc8:	40490fdc 	.word	0x40490fdc
 8000fcc:	42480000 	.word	0x42480000
 8000fd0:	40fb53d3 	.word	0x40fb53d3
				else theta_ref = PI * 3.0f/2.0f;
 8000fd4:	4ba4      	ldr	r3, [pc, #656]	; (8001268 <main+0x680>)
 8000fd6:	657b      	str	r3, [r7, #84]	; 0x54
			theta_err = theta_ref - theta;
 8000fd8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000fdc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000fe0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fe4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

			/* DC voltage controller */
			vdc_lfs = vdc;
 8000fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fea:	653b      	str	r3, [r7, #80]	; 0x50
			vdc_err = VDC_REF - vdc_lfs;
 8000fec:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800126c <main+0x684>
 8000ff0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000ff4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ff8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

			io_ob = vdc_lfs * 2.0f * AC_FREQ * PRM_C;
 8000ffc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001000:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001004:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8001270 <main+0x688>
 8001008:	ee67 7a87 	vmul.f32	s15, s15, s14
 800100c:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8001274 <main+0x68c>
 8001010:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001014:	edc7 7a08 	vstr	s15, [r7, #32]
			io_est = dcvc_delay - io_ob;
 8001018:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800101c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001020:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001024:	edc7 7a07 	vstr	s15, [r7, #28]
			idc_ref = vdc_err * 2.0f * AC_FREQ * PRM_C + io_est;
 8001028:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800102c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001030:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8001270 <main+0x688>
 8001034:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001038:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8001274 <main+0x68c>
 800103c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001040:	ed97 7a07 	vldr	s14, [r7, #28]
 8001044:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001048:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

			idc_limit = IDC_LIM * (float)(start_cnt - SS_BGN_STEP) / (float)(SS_END_STEP - SS_BGN_STEP);
 800104c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800104e:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8001052:	3b10      	subs	r3, #16
 8001054:	ee07 3a90 	vmov	s15, r3
 8001058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800105c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001060:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001064:	eddf 6a84 	vldr	s13, [pc, #528]	; 8001278 <main+0x690>
 8001068:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800106c:	edc7 7a06 	vstr	s15, [r7, #24]
			if (idc_ref > idc_limit) idc_ref = idc_limit;
 8001070:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001074:	edd7 7a06 	vldr	s15, [r7, #24]
 8001078:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800107c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001080:	dd01      	ble.n	8001086 <main+0x49e>
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	64fb      	str	r3, [r7, #76]	; 0x4c
			if (idc_ref < -idc_limit) idc_ref = -idc_limit;
 8001086:	edd7 7a06 	vldr	s15, [r7, #24]
 800108a:	eef1 7a67 	vneg.f32	s15, s15
 800108e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001092:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109a:	d505      	bpl.n	80010a8 <main+0x4c0>
 800109c:	edd7 7a06 	vldr	s15, [r7, #24]
 80010a0:	eef1 7a67 	vneg.f32	s15, s15
 80010a4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
			if (!start_flag2) idc_ref = 0.0f;
 80010a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d102      	bne.n	80010b6 <main+0x4ce>
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	64fb      	str	r3, [r7, #76]	; 0x4c

			dcvc_delay = idc_ref + io_ob;
 80010b6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80010ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80010be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		}
		vac_est_delay = vac_est;
 80010c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80010c8:	663b      	str	r3, [r7, #96]	; 0x60

		/* PLL */
		theta_m = fmodf(theta, 2.0f * PI);
 80010ca:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800127c <main+0x694>
 80010ce:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 80010d2:	f007 f8c7 	bl	8008264 <fmodf>
 80010d6:	ed87 0a05 	vstr	s0, [r7, #20]
		theta = theta_m + theta_err * AC_FREQ * 2.0f * TIM_SPL;
 80010da:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80010de:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001270 <main+0x688>
 80010e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010ea:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8001280 <main+0x698>
 80010ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010f2:	ed97 7a05 	vldr	s14, [r7, #20]
 80010f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010fa:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

		/* current controller */
		il_ref = idc_ref * vdc_lfs * cosf(theta) * 1.414f / VAC_RMS;
 80010fe:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001102:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001106:	ee27 8a27 	vmul.f32	s16, s14, s15
 800110a:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 800110e:	f007 f869 	bl	80081e4 <cosf>
 8001112:	eef0 7a40 	vmov.f32	s15, s0
 8001116:	ee68 7a27 	vmul.f32	s15, s16, s15
 800111a:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001284 <main+0x69c>
 800111e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001122:	eddf 6a59 	vldr	s13, [pc, #356]	; 8001288 <main+0x6a0>
 8001126:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800112a:	edc7 7a04 	vstr	s15, [r7, #16]
		il_err = il_ref - il;
 800112e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001132:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113a:	edc7 7a03 	vstr	s15, [r7, #12]
		ilc_p = - il_err * 2.0f * PI * CO_FREQ * PRM_L;
 800113e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001142:	eef1 7a67 	vneg.f32	s15, s15
 8001146:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800114a:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800128c <main+0x6a4>
 800114e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001152:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001290 <main+0x6a8>
 8001156:	ee67 7a87 	vmul.f32	s15, s15, s14
 800115a:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001294 <main+0x6ac>
 800115e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001162:	edc7 7a02 	vstr	s15, [r7, #8]
		ilc_i += ilc_p * TIM_SPL * PRM_R / PRM_L;
 8001166:	edd7 7a02 	vldr	s15, [r7, #8]
 800116a:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001280 <main+0x698>
 800116e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001172:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001298 <main+0x6b0>
 8001176:	ee27 7a87 	vmul.f32	s14, s15, s14
 800117a:	eddf 6a46 	vldr	s13, [pc, #280]	; 8001294 <main+0x6ac>
 800117e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001182:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001186:	ee77 7a27 	vadd.f32	s15, s14, s15
 800118a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		duty = (ilc_p + ilc_i + vac_est) / vdc;
 800118e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001192:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001196:	ee37 7a27 	vadd.f32	s14, s14, s15
 800119a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800119e:	ee77 6a27 	vadd.f32	s13, s14, s15
 80011a2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80011a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011aa:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74

		if (duty > 1.0f) duty = 1.0f;
 80011ae:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80011b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011be:	dd02      	ble.n	80011c6 <main+0x5de>
 80011c0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011c4:	677b      	str	r3, [r7, #116]	; 0x74
		if (duty < -1.0f) duty = -1.0f;
 80011c6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80011ca:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80011ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d6:	d501      	bpl.n	80011dc <main+0x5f4>
 80011d8:	4b30      	ldr	r3, [pc, #192]	; (800129c <main+0x6b4>)
 80011da:	677b      	str	r3, [r7, #116]	; 0x74
		if (!start_flag1) duty = 0.0f;
 80011dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d102      	bne.n	80011ea <main+0x602>
 80011e4:	f04f 0300 	mov.w	r3, #0
 80011e8:	677b      	str	r3, [r7, #116]	; 0x74

		/* PWM */
		pwm1 = duty * 0.5f + 0.5f;
 80011ea:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80011ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80011f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80011fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011fe:	edc7 7a01 	vstr	s15, [r7, #4]
		pwm2 = - duty * 0.5f + 0.5f;
 8001202:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001206:	eef1 7a67 	vneg.f32	s15, s15
 800120a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800120e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001212:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001216:	ee77 7a87 	vadd.f32	s15, s15, s14
 800121a:	edc7 7a00 	vstr	s15, [r7]
		TIM1 -> CCR1 = TIM1 -> ARR * pwm1;
 800121e:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <main+0x6b8>)
 8001220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001222:	ee07 3a90 	vmov	s15, r3
 8001226:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800122a:	edd7 7a01 	vldr	s15, [r7, #4]
 800122e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001232:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <main+0x6b8>)
 8001234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001238:	ee17 2a90 	vmov	r2, s15
 800123c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1 -> CCR2 = TIM1 -> ARR * pwm2;
 800123e:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <main+0x6b8>)
 8001240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001242:	ee07 3a90 	vmov	s15, r3
 8001246:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800124a:	edd7 7a00 	vldr	s15, [r7]
 800124e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <main+0x6b8>)
 8001254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001258:	ee17 2a90 	vmov	r2, s15
 800125c:	639a      	str	r2, [r3, #56]	; 0x38

		/* ADC flag reset */
		adc_flag = 0;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <main+0x6bc>)
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
    if(adc_flag){
 8001264:	e554      	b.n	8000d10 <main+0x128>
 8001266:	bf00      	nop
 8001268:	4096cbe5 	.word	0x4096cbe5
 800126c:	43960000 	.word	0x43960000
 8001270:	42480000 	.word	0x42480000
 8001274:	39e6afcd 	.word	0x39e6afcd
 8001278:	461c4000 	.word	0x461c4000
 800127c:	40c90fdc 	.word	0x40c90fdc
 8001280:	3851b717 	.word	0x3851b717
 8001284:	3fb4fdf4 	.word	0x3fb4fdf4
 8001288:	42c80000 	.word	0x42c80000
 800128c:	40490fdc 	.word	0x40490fdc
 8001290:	44fa0000 	.word	0x44fa0000
 8001294:	3a449ba6 	.word	0x3a449ba6
 8001298:	3ecccccd 	.word	0x3ecccccd
 800129c:	bf800000 	.word	0xbf800000
 80012a0:	40012c00 	.word	0x40012c00
 80012a4:	200002a4 	.word	0x200002a4

080012a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b096      	sub	sp, #88	; 0x58
 80012ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012b2:	2228      	movs	r2, #40	; 0x28
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f004 fabc 	bl	8005834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
 80012d8:	611a      	str	r2, [r3, #16]
 80012da:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012dc:	2302      	movs	r3, #2
 80012de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e0:	2301      	movs	r3, #1
 80012e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e4:	2310      	movs	r3, #16
 80012e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e8:	2302      	movs	r3, #2
 80012ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012ec:	2300      	movs	r3, #0
 80012ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80012f0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80012f4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012fa:	4618      	mov	r0, r3
 80012fc:	f002 f8b2 	bl	8003464 <HAL_RCC_OscConfig>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001306:	f000 f9a5 	bl	8001654 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130a:	230f      	movs	r3, #15
 800130c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130e:	2302      	movs	r3, #2
 8001310:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001312:	2300      	movs	r3, #0
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800131c:	2300      	movs	r3, #0
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	2102      	movs	r1, #2
 8001326:	4618      	mov	r0, r3
 8001328:	f002 ffa4 	bl	8004274 <HAL_RCC_ClockConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001332:	f000 f98f 	bl	8001654 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
 8001336:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 800133a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800133c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001340:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001342:	2300      	movs	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	4618      	mov	r0, r3
 800134a:	f003 f979 	bl	8004640 <HAL_RCCEx_PeriphCLKConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001354:	f000 f97e 	bl	8001654 <Error_Handler>
  }
}
 8001358:	bf00      	nop
 800135a:	3758      	adds	r7, #88	; 0x58
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08e      	sub	sp, #56	; 0x38
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001366:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	2228      	movs	r2, #40	; 0x28
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f004 fa5b 	bl	8005834 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800137e:	4b3a      	ldr	r3, [pc, #232]	; (8001468 <MX_ADC1_Init+0x108>)
 8001380:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001384:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001386:	4b38      	ldr	r3, [pc, #224]	; (8001468 <MX_ADC1_Init+0x108>)
 8001388:	2200      	movs	r2, #0
 800138a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800138c:	4b36      	ldr	r3, [pc, #216]	; (8001468 <MX_ADC1_Init+0x108>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001392:	4b35      	ldr	r3, [pc, #212]	; (8001468 <MX_ADC1_Init+0x108>)
 8001394:	2201      	movs	r2, #1
 8001396:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001398:	4b33      	ldr	r3, [pc, #204]	; (8001468 <MX_ADC1_Init+0x108>)
 800139a:	2200      	movs	r2, #0
 800139c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800139e:	4b32      	ldr	r3, [pc, #200]	; (8001468 <MX_ADC1_Init+0x108>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013a6:	4b30      	ldr	r3, [pc, #192]	; (8001468 <MX_ADC1_Init+0x108>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013ac:	4b2e      	ldr	r3, [pc, #184]	; (8001468 <MX_ADC1_Init+0x108>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013b2:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <MX_ADC1_Init+0x108>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ba:	4b2b      	ldr	r3, [pc, #172]	; (8001468 <MX_ADC1_Init+0x108>)
 80013bc:	2204      	movs	r2, #4
 80013be:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013c0:	4b29      	ldr	r3, [pc, #164]	; (8001468 <MX_ADC1_Init+0x108>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013c6:	4b28      	ldr	r3, [pc, #160]	; (8001468 <MX_ADC1_Init+0x108>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013cc:	4826      	ldr	r0, [pc, #152]	; (8001468 <MX_ADC1_Init+0x108>)
 80013ce:	f000 fbe3 	bl	8001b98 <HAL_ADC_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80013d8:	f000 f93c 	bl	8001654 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80013dc:	2300      	movs	r3, #0
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80013e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013e4:	4619      	mov	r1, r3
 80013e6:	4820      	ldr	r0, [pc, #128]	; (8001468 <MX_ADC1_Init+0x108>)
 80013e8:	f001 fbf8 	bl	8002bdc <HAL_ADCEx_MultiModeConfigChannel>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80013f2:	f000 f92f 	bl	8001654 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80013f6:	2301      	movs	r3, #1
 80013f8:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80013fa:	2301      	movs	r3, #1
 80013fc:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_DIFFERENTIAL_ENDED;
 80013fe:	2301      	movs	r3, #1
 8001400:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8001402:	2302      	movs	r3, #2
 8001404:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 800140a:	2340      	movs	r3, #64	; 0x40
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 800140e:	2304      	movs	r3, #4
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.QueueInjectedContext = DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sConfigInjected.InjectedOffset = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	4619      	mov	r1, r3
 8001430:	480d      	ldr	r0, [pc, #52]	; (8001468 <MX_ADC1_Init+0x108>)
 8001432:	f001 f8b5 	bl	80025a0 <HAL_ADCEx_InjectedConfigChannel>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800143c:	f000 f90a 	bl	8001654 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8001440:	2303      	movs	r3, #3
 8001442:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001444:	2302      	movs	r3, #2
 8001446:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	4619      	mov	r1, r3
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_ADC1_Init+0x108>)
 8001452:	f001 f8a5 	bl	80025a0 <HAL_ADCEx_InjectedConfigChannel>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800145c:	f000 f8fa 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	3738      	adds	r7, #56	; 0x38
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000208 	.word	0x20000208

0800146c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b096      	sub	sp, #88	; 0x58
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001472:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800147e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]
 800148e:	615a      	str	r2, [r3, #20]
 8001490:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	222c      	movs	r2, #44	; 0x2c
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f004 f9cb 	bl	8005834 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800149e:	4b45      	ldr	r3, [pc, #276]	; (80015b4 <MX_TIM1_Init+0x148>)
 80014a0:	4a45      	ldr	r2, [pc, #276]	; (80015b8 <MX_TIM1_Init+0x14c>)
 80014a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014a4:	4b43      	ldr	r3, [pc, #268]	; (80015b4 <MX_TIM1_Init+0x148>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80014aa:	4b42      	ldr	r3, [pc, #264]	; (80015b4 <MX_TIM1_Init+0x148>)
 80014ac:	2220      	movs	r2, #32
 80014ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1600-1;
 80014b0:	4b40      	ldr	r3, [pc, #256]	; (80015b4 <MX_TIM1_Init+0x148>)
 80014b2:	f240 623f 	movw	r2, #1599	; 0x63f
 80014b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b8:	4b3e      	ldr	r3, [pc, #248]	; (80015b4 <MX_TIM1_Init+0x148>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014be:	4b3d      	ldr	r3, [pc, #244]	; (80015b4 <MX_TIM1_Init+0x148>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c4:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <MX_TIM1_Init+0x148>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014ca:	483a      	ldr	r0, [pc, #232]	; (80015b4 <MX_TIM1_Init+0x148>)
 80014cc:	f003 fa3a 	bl	8004944 <HAL_TIM_PWM_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80014d6:	f000 f8bd 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014da:	2300      	movs	r3, #0
 80014dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014de:	2300      	movs	r3, #0
 80014e0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014ea:	4619      	mov	r1, r3
 80014ec:	4831      	ldr	r0, [pc, #196]	; (80015b4 <MX_TIM1_Init+0x148>)
 80014ee:	f004 f86b 	bl	80055c8 <HAL_TIMEx_MasterConfigSynchronization>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80014f8:	f000 f8ac 	bl	8001654 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014fc:	2360      	movs	r3, #96	; 0x60
 80014fe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001504:	2300      	movs	r3, #0
 8001506:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001508:	2300      	movs	r3, #0
 800150a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001510:	2300      	movs	r3, #0
 8001512:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001514:	2300      	movs	r3, #0
 8001516:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001518:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800151c:	2200      	movs	r2, #0
 800151e:	4619      	mov	r1, r3
 8001520:	4824      	ldr	r0, [pc, #144]	; (80015b4 <MX_TIM1_Init+0x148>)
 8001522:	f003 fb53 	bl	8004bcc <HAL_TIM_PWM_ConfigChannel>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800152c:	f000 f892 	bl	8001654 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001530:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001534:	2204      	movs	r2, #4
 8001536:	4619      	mov	r1, r3
 8001538:	481e      	ldr	r0, [pc, #120]	; (80015b4 <MX_TIM1_Init+0x148>)
 800153a:	f003 fb47 	bl	8004bcc <HAL_TIM_PWM_ConfigChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001544:	f000 f886 	bl	8001654 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001548:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800154c:	220c      	movs	r2, #12
 800154e:	4619      	mov	r1, r3
 8001550:	4818      	ldr	r0, [pc, #96]	; (80015b4 <MX_TIM1_Init+0x148>)
 8001552:	f003 fb3b 	bl	8004bcc <HAL_TIM_PWM_ConfigChannel>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 800155c:	f000 f87a 	bl	8001654 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 80;
 800156c:	2350      	movs	r3, #80	; 0x50
 800156e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001578:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001582:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	4619      	mov	r1, r3
 8001594:	4807      	ldr	r0, [pc, #28]	; (80015b4 <MX_TIM1_Init+0x148>)
 8001596:	f004 f885 	bl	80056a4 <HAL_TIMEx_ConfigBreakDeadTime>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80015a0:	f000 f858 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015a4:	4803      	ldr	r0, [pc, #12]	; (80015b4 <MX_TIM1_Init+0x148>)
 80015a6:	f000 f8e3 	bl	8001770 <HAL_TIM_MspPostInit>

}
 80015aa:	bf00      	nop
 80015ac:	3758      	adds	r7, #88	; 0x58
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000258 	.word	0x20000258
 80015b8:	40012c00 	.word	0x40012c00

080015bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c2:	f107 030c 	add.w	r3, r7, #12
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	4b1e      	ldr	r3, [pc, #120]	; (800164c <MX_GPIO_Init+0x90>)
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	4a1d      	ldr	r2, [pc, #116]	; (800164c <MX_GPIO_Init+0x90>)
 80015d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015dc:	6153      	str	r3, [r2, #20]
 80015de:	4b1b      	ldr	r3, [pc, #108]	; (800164c <MX_GPIO_Init+0x90>)
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <MX_GPIO_Init+0x90>)
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	4a17      	ldr	r2, [pc, #92]	; (800164c <MX_GPIO_Init+0x90>)
 80015f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f4:	6153      	str	r3, [r2, #20]
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <MX_GPIO_Init+0x90>)
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	2102      	movs	r1, #2
 8001606:	4812      	ldr	r0, [pc, #72]	; (8001650 <MX_GPIO_Init+0x94>)
 8001608:	f001 ff14 	bl	8003434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800160c:	2308      	movs	r3, #8
 800160e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001610:	2300      	movs	r3, #0
 8001612:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	4619      	mov	r1, r3
 800161e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001622:	f001 fd7d 	bl	8003120 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001626:	2302      	movs	r3, #2
 8001628:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162a:	2301      	movs	r3, #1
 800162c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	4619      	mov	r1, r3
 800163c:	4804      	ldr	r0, [pc, #16]	; (8001650 <MX_GPIO_Init+0x94>)
 800163e:	f001 fd6f 	bl	8003120 <HAL_GPIO_Init>

}
 8001642:	bf00      	nop
 8001644:	3720      	adds	r7, #32
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40021000 	.word	0x40021000
 8001650:	48000400 	.word	0x48000400

08001654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001658:	b672      	cpsid	i
}
 800165a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800165c:	e7fe      	b.n	800165c <Error_Handler+0x8>
	...

08001660 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001666:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <HAL_MspInit+0x44>)
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <HAL_MspInit+0x44>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6193      	str	r3, [r2, #24]
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <HAL_MspInit+0x44>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <HAL_MspInit+0x44>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	4a08      	ldr	r2, [pc, #32]	; (80016a4 <HAL_MspInit+0x44>)
 8001684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001688:	61d3      	str	r3, [r2, #28]
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_MspInit+0x44>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000

080016a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016c8:	d12c      	bne.n	8001724 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80016ca:	4b18      	ldr	r3, [pc, #96]	; (800172c <HAL_ADC_MspInit+0x84>)
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	4a17      	ldr	r2, [pc, #92]	; (800172c <HAL_ADC_MspInit+0x84>)
 80016d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d4:	6153      	str	r3, [r2, #20]
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <HAL_ADC_MspInit+0x84>)
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_ADC_MspInit+0x84>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	4a11      	ldr	r2, [pc, #68]	; (800172c <HAL_ADC_MspInit+0x84>)
 80016e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ec:	6153      	str	r3, [r2, #20]
 80016ee:	4b0f      	ldr	r3, [pc, #60]	; (800172c <HAL_ADC_MspInit+0x84>)
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80016fa:	2307      	movs	r3, #7
 80016fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fe:	2303      	movs	r3, #3
 8001700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001710:	f001 fd06 	bl	8003120 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001714:	2200      	movs	r2, #0
 8001716:	2100      	movs	r1, #0
 8001718:	2012      	movs	r0, #18
 800171a:	f001 fcca 	bl	80030b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800171e:	2012      	movs	r0, #18
 8001720:	f001 fce3 	bl	80030ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001724:	bf00      	nop
 8001726:	3728      	adds	r7, #40	; 0x28
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40021000 	.word	0x40021000

08001730 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <HAL_TIM_PWM_MspInit+0x38>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d10b      	bne.n	800175a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001742:	4b0a      	ldr	r3, [pc, #40]	; (800176c <HAL_TIM_PWM_MspInit+0x3c>)
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	4a09      	ldr	r2, [pc, #36]	; (800176c <HAL_TIM_PWM_MspInit+0x3c>)
 8001748:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800174c:	6193      	str	r3, [r2, #24]
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <HAL_TIM_PWM_MspInit+0x3c>)
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800175a:	bf00      	nop
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	40012c00 	.word	0x40012c00
 800176c:	40021000 	.word	0x40021000

08001770 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a20      	ldr	r2, [pc, #128]	; (8001810 <HAL_TIM_MspPostInit+0xa0>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d139      	bne.n	8001806 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001792:	4b20      	ldr	r3, [pc, #128]	; (8001814 <HAL_TIM_MspPostInit+0xa4>)
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	4a1f      	ldr	r2, [pc, #124]	; (8001814 <HAL_TIM_MspPostInit+0xa4>)
 8001798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800179c:	6153      	str	r3, [r2, #20]
 800179e:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <HAL_TIM_MspPostInit+0xa4>)
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017aa:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <HAL_TIM_MspPostInit+0xa4>)
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	4a19      	ldr	r2, [pc, #100]	; (8001814 <HAL_TIM_MspPostInit+0xa4>)
 80017b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b4:	6153      	str	r3, [r2, #20]
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <HAL_TIM_MspPostInit+0xa4>)
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80017c2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80017c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	2300      	movs	r3, #0
 80017d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80017d4:	2306      	movs	r3, #6
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e2:	f001 fc9d 	bl	8003120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017e6:	2301      	movs	r3, #1
 80017e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80017f6:	2306      	movs	r3, #6
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	4619      	mov	r1, r3
 8001800:	4805      	ldr	r0, [pc, #20]	; (8001818 <HAL_TIM_MspPostInit+0xa8>)
 8001802:	f001 fc8d 	bl	8003120 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001806:	bf00      	nop
 8001808:	3728      	adds	r7, #40	; 0x28
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40012c00 	.word	0x40012c00
 8001814:	40021000 	.word	0x40021000
 8001818:	48000400 	.word	0x48000400

0800181c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <NMI_Handler+0x4>

08001822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <HardFault_Handler+0x4>

08001828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <MemManage_Handler+0x4>

0800182e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001832:	e7fe      	b.n	8001832 <BusFault_Handler+0x4>

08001834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <UsageFault_Handler+0x4>

0800183a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001868:	f000 f958 	bl	8001b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}

08001870 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
  adc_flag = 1;
 8001874:	4b03      	ldr	r3, [pc, #12]	; (8001884 <ADC1_2_IRQHandler+0x14>)
 8001876:	2201      	movs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800187a:	4803      	ldr	r0, [pc, #12]	; (8001888 <ADC1_2_IRQHandler+0x18>)
 800187c:	f000 fb1e 	bl	8001ebc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}
 8001884:	200002a4 	.word	0x200002a4
 8001888:	20000208 	.word	0x20000208

0800188c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
	return 1;
 8001890:	2301      	movs	r3, #1
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <_kill>:

int _kill(int pid, int sig)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018a6:	f003 ff9b 	bl	80057e0 <__errno>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2216      	movs	r2, #22
 80018ae:	601a      	str	r2, [r3, #0]
	return -1;
 80018b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <_exit>:

void _exit (int status)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff ffe7 	bl	800189c <_kill>
	while (1) {}		/* Make sure we hang here */
 80018ce:	e7fe      	b.n	80018ce <_exit+0x12>

080018d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	e00a      	b.n	80018f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018e2:	f3af 8000 	nop.w
 80018e6:	4601      	mov	r1, r0
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	60ba      	str	r2, [r7, #8]
 80018ee:	b2ca      	uxtb	r2, r1
 80018f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	3301      	adds	r3, #1
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	dbf0      	blt.n	80018e2 <_read+0x12>
	}

return len;
 8001900:	687b      	ldr	r3, [r7, #4]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	e009      	b.n	8001930 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	60ba      	str	r2, [r7, #8]
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	3301      	adds	r3, #1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	429a      	cmp	r2, r3
 8001936:	dbf1      	blt.n	800191c <_write+0x12>
	}
	return len;
 8001938:	687b      	ldr	r3, [r7, #4]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <_close>:

int _close(int file)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
	return -1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800196a:	605a      	str	r2, [r3, #4]
	return 0;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <_isatty>:

int _isatty(int file)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
	return 1;
 8001982:	2301      	movs	r3, #1
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
	return 0;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b4:	4a14      	ldr	r2, [pc, #80]	; (8001a08 <_sbrk+0x5c>)
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <_sbrk+0x60>)
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d102      	bne.n	80019ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <_sbrk+0x64>)
 80019ca:	4a12      	ldr	r2, [pc, #72]	; (8001a14 <_sbrk+0x68>)
 80019cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d207      	bcs.n	80019ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019dc:	f003 ff00 	bl	80057e0 <__errno>
 80019e0:	4603      	mov	r3, r0
 80019e2:	220c      	movs	r2, #12
 80019e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ea:	e009      	b.n	8001a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <_sbrk+0x64>)
 80019fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019fe:	68fb      	ldr	r3, [r7, #12]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20003000 	.word	0x20003000
 8001a0c:	00000400 	.word	0x00000400
 8001a10:	200001fc 	.word	0x200001fc
 8001a14:	200002c0 	.word	0x200002c0

08001a18 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <SystemInit+0x20>)
 8001a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a22:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <SystemInit+0x20>)
 8001a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a74 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a40:	480d      	ldr	r0, [pc, #52]	; (8001a78 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a42:	490e      	ldr	r1, [pc, #56]	; (8001a7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a44:	4a0e      	ldr	r2, [pc, #56]	; (8001a80 <LoopForever+0xe>)
  movs r3, #0
 8001a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a48:	e002      	b.n	8001a50 <LoopCopyDataInit>

08001a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a4e:	3304      	adds	r3, #4

08001a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a54:	d3f9      	bcc.n	8001a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a56:	4a0b      	ldr	r2, [pc, #44]	; (8001a84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a58:	4c0b      	ldr	r4, [pc, #44]	; (8001a88 <LoopForever+0x16>)
  movs r3, #0
 8001a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a5c:	e001      	b.n	8001a62 <LoopFillZerobss>

08001a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a60:	3204      	adds	r2, #4

08001a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a64:	d3fb      	bcc.n	8001a5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a66:	f7ff ffd7 	bl	8001a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a6a:	f003 febf 	bl	80057ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a6e:	f7ff f8bb 	bl	8000be8 <main>

08001a72 <LoopForever>:

LoopForever:
    b LoopForever
 8001a72:	e7fe      	b.n	8001a72 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a74:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a7c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001a80:	08009624 	.word	0x08009624
  ldr r2, =_sbss
 8001a84:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001a88:	200002bc 	.word	0x200002bc

08001a8c <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a8c:	e7fe      	b.n	8001a8c <CAN_RX0_IRQHandler>
	...

08001a90 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a94:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <HAL_Init+0x28>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a07      	ldr	r2, [pc, #28]	; (8001ab8 <HAL_Init+0x28>)
 8001a9a:	f043 0310 	orr.w	r3, r3, #16
 8001a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa0:	2003      	movs	r0, #3
 8001aa2:	f001 fafb 	bl	800309c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aa6:	200f      	movs	r0, #15
 8001aa8:	f000 f808 	bl	8001abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aac:	f7ff fdd8 	bl	8001660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40022000 	.word	0x40022000

08001abc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <HAL_InitTick+0x54>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <HAL_InitTick+0x58>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	4619      	mov	r1, r3
 8001ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ada:	4618      	mov	r0, r3
 8001adc:	f001 fb13 	bl	8003106 <HAL_SYSTICK_Config>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e00e      	b.n	8001b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b0f      	cmp	r3, #15
 8001aee:	d80a      	bhi.n	8001b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001af0:	2200      	movs	r2, #0
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	f04f 30ff 	mov.w	r0, #4294967295
 8001af8:	f001 fadb 	bl	80030b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001afc:	4a06      	ldr	r2, [pc, #24]	; (8001b18 <HAL_InitTick+0x5c>)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
 8001b04:	e000      	b.n	8001b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20000000 	.word	0x20000000
 8001b14:	20000008 	.word	0x20000008
 8001b18:	20000004 	.word	0x20000004

08001b1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_IncTick+0x20>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_IncTick+0x24>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <HAL_IncTick+0x24>)
 8001b2e:	6013      	str	r3, [r2, #0]
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20000008 	.word	0x20000008
 8001b40:	200002a8 	.word	0x200002a8

08001b44 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <HAL_GetTick+0x14>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	200002a8 	.word	0x200002a8

08001b5c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b09a      	sub	sp, #104	; 0x68
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e172      	b.n	8001e9e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f003 0310 	and.w	r3, r3, #16
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d176      	bne.n	8001cb8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d152      	bne.n	8001c78 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff fd5b 	bl	80016a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d13b      	bne.n	8001c78 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f001 f915 	bl	8002e30 <ADC_Disable>
 8001c06:	4603      	mov	r3, r0
 8001c08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	f003 0310 	and.w	r3, r3, #16
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d12f      	bne.n	8001c78 <HAL_ADC_Init+0xe0>
 8001c18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d12b      	bne.n	8001c78 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c28:	f023 0302 	bic.w	r3, r3, #2
 8001c2c:	f043 0202 	orr.w	r2, r3, #2
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c42:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c52:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c54:	4b94      	ldr	r3, [pc, #592]	; (8001ea8 <HAL_ADC_Init+0x310>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a94      	ldr	r2, [pc, #592]	; (8001eac <HAL_ADC_Init+0x314>)
 8001c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5e:	0c9a      	lsrs	r2, r3, #18
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c6a:	e002      	b.n	8001c72 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1f9      	bne.n	8001c6c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d007      	beq.n	8001c96 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c94:	d110      	bne.n	8001cb8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f023 0312 	bic.w	r3, r3, #18
 8001c9e:	f043 0210 	orr.w	r2, r3, #16
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	f043 0201 	orr.w	r2, r3, #1
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	f003 0310 	and.w	r3, r3, #16
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f040 80df 	bne.w	8001e84 <HAL_ADC_Init+0x2ec>
 8001cc6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f040 80da 	bne.w	8001e84 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f040 80d2 	bne.w	8001e84 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ce8:	f043 0202 	orr.w	r2, r3, #2
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cf0:	4b6f      	ldr	r3, [pc, #444]	; (8001eb0 <HAL_ADC_Init+0x318>)
 8001cf2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cfc:	d102      	bne.n	8001d04 <HAL_ADC_Init+0x16c>
 8001cfe:	4b6d      	ldr	r3, [pc, #436]	; (8001eb4 <HAL_ADC_Init+0x31c>)
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	e002      	b.n	8001d0a <HAL_ADC_Init+0x172>
 8001d04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d08:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d108      	bne.n	8001d2a <HAL_ADC_Init+0x192>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_ADC_Init+0x192>
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <HAL_ADC_Init+0x194>
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d11c      	bne.n	8001d6a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d30:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d010      	beq.n	8001d58 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d107      	bne.n	8001d52 <HAL_ADC_Init+0x1ba>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d101      	bne.n	8001d52 <HAL_ADC_Init+0x1ba>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <HAL_ADC_Init+0x1bc>
 8001d52:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d108      	bne.n	8001d6a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001d58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	431a      	orrs	r2, r3
 8001d66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d68:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	7e5b      	ldrb	r3, [r3, #25]
 8001d6e:	035b      	lsls	r3, r3, #13
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d74:	2a01      	cmp	r2, #1
 8001d76:	d002      	beq.n	8001d7e <HAL_ADC_Init+0x1e6>
 8001d78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d7c:	e000      	b.n	8001d80 <HAL_ADC_Init+0x1e8>
 8001d7e:	2200      	movs	r2, #0
 8001d80:	431a      	orrs	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d90:	4313      	orrs	r3, r2
 8001d92:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d11b      	bne.n	8001dd6 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	7e5b      	ldrb	r3, [r3, #25]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d109      	bne.n	8001dba <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	3b01      	subs	r3, #1
 8001dac:	045a      	lsls	r2, r3, #17
 8001dae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001db0:	4313      	orrs	r3, r2
 8001db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db6:	663b      	str	r3, [r7, #96]	; 0x60
 8001db8:	e00d      	b.n	8001dd6 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001dc2:	f043 0220 	orr.w	r2, r3, #32
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	f043 0201 	orr.w	r2, r3, #1
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d007      	beq.n	8001dee <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de6:	4313      	orrs	r3, r2
 8001de8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001dea:	4313      	orrs	r3, r2
 8001dec:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 030c 	and.w	r3, r3, #12
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d114      	bne.n	8001e26 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e0a:	f023 0302 	bic.w	r3, r3, #2
 8001e0e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	7e1b      	ldrb	r3, [r3, #24]
 8001e14:	039a      	lsls	r2, r3, #14
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e22:	4313      	orrs	r3, r2
 8001e24:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	4b22      	ldr	r3, [pc, #136]	; (8001eb8 <HAL_ADC_Init+0x320>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001e36:	430b      	orrs	r3, r1
 8001e38:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d10c      	bne.n	8001e5c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	f023 010f 	bic.w	r1, r3, #15
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	1e5a      	subs	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	631a      	str	r2, [r3, #48]	; 0x30
 8001e5a:	e007      	b.n	8001e6c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 020f 	bic.w	r2, r2, #15
 8001e6a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f023 0303 	bic.w	r3, r3, #3
 8001e7a:	f043 0201 	orr.w	r2, r3, #1
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	641a      	str	r2, [r3, #64]	; 0x40
 8001e82:	e00a      	b.n	8001e9a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	f023 0312 	bic.w	r3, r3, #18
 8001e8c:	f043 0210 	orr.w	r2, r3, #16
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001e94:	2301      	movs	r3, #1
 8001e96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001e9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3768      	adds	r7, #104	; 0x68
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000000 	.word	0x20000000
 8001eac:	431bde83 	.word	0x431bde83
 8001eb0:	50000300 	.word	0x50000300
 8001eb4:	50000100 	.word	0x50000100
 8001eb8:	fff0c007 	.word	0xfff0c007

08001ebc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d106      	bne.n	8001eec <HAL_ADC_IRQHandler+0x30>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d00d      	beq.n	8001f08 <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d17a      	bne.n	8001ff0 <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d173      	bne.n	8001ff0 <HAL_ADC_IRQHandler+0x134>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	f003 0310 	and.w	r3, r3, #16
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d105      	bne.n	8001f20 <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001f20:	4b88      	ldr	r3, [pc, #544]	; (8002144 <HAL_ADC_IRQHandler+0x288>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 031f 	and.w	r3, r3, #31
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d010      	beq.n	8001f4e <HAL_ADC_IRQHandler+0x92>
 8001f2c:	4b85      	ldr	r3, [pc, #532]	; (8002144 <HAL_ADC_IRQHandler+0x288>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 031f 	and.w	r3, r3, #31
 8001f34:	2b05      	cmp	r3, #5
 8001f36:	d00a      	beq.n	8001f4e <HAL_ADC_IRQHandler+0x92>
 8001f38:	4b82      	ldr	r3, [pc, #520]	; (8002144 <HAL_ADC_IRQHandler+0x288>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 031f 	and.w	r3, r3, #31
 8001f40:	2b09      	cmp	r3, #9
 8001f42:	d004      	beq.n	8001f4e <HAL_ADC_IRQHandler+0x92>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f4c:	d104      	bne.n	8001f58 <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	e003      	b.n	8001f60 <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001f58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d139      	bne.n	8001fe2 <HAL_ADC_IRQHandler+0x126>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d134      	bne.n	8001fe2 <HAL_ADC_IRQHandler+0x126>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b08      	cmp	r3, #8
 8001f84:	d12d      	bne.n	8001fe2 <HAL_ADC_IRQHandler+0x126>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d11a      	bne.n	8001fca <HAL_ADC_IRQHandler+0x10e>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 020c 	bic.w	r2, r2, #12
 8001fa2:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d112      	bne.n	8001fe2 <HAL_ADC_IRQHandler+0x126>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	f043 0201 	orr.w	r2, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	641a      	str	r2, [r3, #64]	; 0x40
 8001fc8:	e00b      	b.n	8001fe2 <HAL_ADC_IRQHandler+0x126>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f043 0210 	orr.w	r2, r3, #16
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	f043 0201 	orr.w	r2, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff fdba 	bl	8001b5c <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	220c      	movs	r2, #12
 8001fee:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0320 	and.w	r3, r3, #32
 8001ffa:	2b20      	cmp	r3, #32
 8001ffc:	d106      	bne.n	800200c <HAL_ADC_IRQHandler+0x150>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 0320 	and.w	r3, r3, #32
 8002008:	2b20      	cmp	r3, #32
 800200a:	d00f      	beq.n	800202c <HAL_ADC_IRQHandler+0x170>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002016:	2b40      	cmp	r3, #64	; 0x40
 8002018:	f040 80a9 	bne.w	800216e <HAL_ADC_IRQHandler+0x2b2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002026:	2b40      	cmp	r3, #64	; 0x40
 8002028:	f040 80a1 	bne.w	800216e <HAL_ADC_IRQHandler+0x2b2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002038:	4b42      	ldr	r3, [pc, #264]	; (8002144 <HAL_ADC_IRQHandler+0x288>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 031f 	and.w	r3, r3, #31
 8002040:	2b00      	cmp	r3, #0
 8002042:	d010      	beq.n	8002066 <HAL_ADC_IRQHandler+0x1aa>
 8002044:	4b3f      	ldr	r3, [pc, #252]	; (8002144 <HAL_ADC_IRQHandler+0x288>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 031f 	and.w	r3, r3, #31
 800204c:	2b05      	cmp	r3, #5
 800204e:	d00a      	beq.n	8002066 <HAL_ADC_IRQHandler+0x1aa>
 8002050:	4b3c      	ldr	r3, [pc, #240]	; (8002144 <HAL_ADC_IRQHandler+0x288>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 031f 	and.w	r3, r3, #31
 8002058:	2b09      	cmp	r3, #9
 800205a:	d004      	beq.n	8002066 <HAL_ADC_IRQHandler+0x1aa>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002064:	d104      	bne.n	8002070 <HAL_ADC_IRQHandler+0x1b4>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	e003      	b.n	8002078 <HAL_ADC_IRQHandler+0x1bc>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002070:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d16c      	bne.n	8002160 <HAL_ADC_IRQHandler+0x2a4>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00b      	beq.n	80020a8 <HAL_ADC_IRQHandler+0x1ec>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800209a:	2b00      	cmp	r3, #0
 800209c:	d160      	bne.n	8002160 <HAL_ADC_IRQHandler+0x2a4>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d15b      	bne.n	8002160 <HAL_ADC_IRQHandler+0x2a4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b2:	2b40      	cmp	r3, #64	; 0x40
 80020b4:	d154      	bne.n	8002160 <HAL_ADC_IRQHandler+0x2a4>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80020b6:	4b23      	ldr	r3, [pc, #140]	; (8002144 <HAL_ADC_IRQHandler+0x288>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 031f 	and.w	r3, r3, #31
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d010      	beq.n	80020e4 <HAL_ADC_IRQHandler+0x228>
 80020c2:	4b20      	ldr	r3, [pc, #128]	; (8002144 <HAL_ADC_IRQHandler+0x288>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 031f 	and.w	r3, r3, #31
 80020ca:	2b06      	cmp	r3, #6
 80020cc:	d00a      	beq.n	80020e4 <HAL_ADC_IRQHandler+0x228>
 80020ce:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <HAL_ADC_IRQHandler+0x288>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 031f 	and.w	r3, r3, #31
 80020d6:	2b07      	cmp	r3, #7
 80020d8:	d004      	beq.n	80020e4 <HAL_ADC_IRQHandler+0x228>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020e2:	d104      	bne.n	80020ee <HAL_ADC_IRQHandler+0x232>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	e003      	b.n	80020f6 <HAL_ADC_IRQHandler+0x23a>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80020ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d12f      	bne.n	8002160 <HAL_ADC_IRQHandler+0x2a4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b00      	cmp	r3, #0
 800210c:	d11c      	bne.n	8002148 <HAL_ADC_IRQHandler+0x28c>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800211c:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002132:	2b00      	cmp	r3, #0
 8002134:	d114      	bne.n	8002160 <HAL_ADC_IRQHandler+0x2a4>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f043 0201 	orr.w	r2, r3, #1
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	641a      	str	r2, [r3, #64]	; 0x40
 8002142:	e00d      	b.n	8002160 <HAL_ADC_IRQHandler+0x2a4>
 8002144:	50000300 	.word	0x50000300
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	f043 0210 	orr.w	r2, r3, #16
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002158:	f043 0201 	orr.w	r2, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f9f5 	bl	8002550 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2260      	movs	r2, #96	; 0x60
 800216c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002178:	2b80      	cmp	r3, #128	; 0x80
 800217a:	d113      	bne.n	80021a4 <HAL_ADC_IRQHandler+0x2e8>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002186:	2b80      	cmp	r3, #128	; 0x80
 8002188:	d10c      	bne.n	80021a4 <HAL_ADC_IRQHandler+0x2e8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff fcea 	bl	8001b70 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2280      	movs	r2, #128	; 0x80
 80021a2:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021b2:	d115      	bne.n	80021e0 <HAL_ADC_IRQHandler+0x324>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021c2:	d10d      	bne.n	80021e0 <HAL_ADC_IRQHandler+0x324>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f9d1 	bl	8002578 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021de:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021ee:	d115      	bne.n	800221c <HAL_ADC_IRQHandler+0x360>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021fe:	d10d      	bne.n	800221c <HAL_ADC_IRQHandler+0x360>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f9bd 	bl	800258c <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800221a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	2b10      	cmp	r3, #16
 8002228:	d13d      	bne.n	80022a6 <HAL_ADC_IRQHandler+0x3ea>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 0310 	and.w	r3, r3, #16
 8002234:	2b10      	cmp	r3, #16
 8002236:	d136      	bne.n	80022a6 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223c:	2b01      	cmp	r3, #1
 800223e:	d102      	bne.n	8002246 <HAL_ADC_IRQHandler+0x38a>
    {
      overrun_error = 1U;
 8002240:	2301      	movs	r3, #1
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	e019      	b.n	800227a <HAL_ADC_IRQHandler+0x3be>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002246:	4b2c      	ldr	r3, [pc, #176]	; (80022f8 <HAL_ADC_IRQHandler+0x43c>)
 8002248:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 031f 	and.w	r3, r3, #31
 8002252:	2b00      	cmp	r3, #0
 8002254:	d109      	bne.n	800226a <HAL_ADC_IRQHandler+0x3ae>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b01      	cmp	r3, #1
 8002262:	d10a      	bne.n	800227a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 8002264:	2301      	movs	r3, #1
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	e007      	b.n	800227a <HAL_ADC_IRQHandler+0x3be>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 8002276:	2301      	movs	r3, #1
 8002278:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d10e      	bne.n	800229e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002290:	f043 0202 	orr.w	r2, r3, #2
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff fc73 	bl	8001b84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2210      	movs	r2, #16
 80022a4:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b4:	d11b      	bne.n	80022ee <HAL_ADC_IRQHandler+0x432>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022c4:	d113      	bne.n	80022ee <HAL_ADC_IRQHandler+0x432>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	f043 0208 	orr.w	r2, r3, #8
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022e6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f93b 	bl	8002564 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80022ee:	bf00      	nop
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	50000300 	.word	0x50000300

080022fc <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <HAL_ADCEx_Calibration_Start+0x1c>
 8002314:	2302      	movs	r3, #2
 8002316:	e05f      	b.n	80023d8 <HAL_ADCEx_Calibration_Start+0xdc>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 fd85 	bl	8002e30 <ADC_Disable>
 8002326:	4603      	mov	r3, r0
 8002328:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800232a:	7bfb      	ldrb	r3, [r7, #15]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d14e      	bne.n	80023ce <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002344:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d107      	bne.n	800235c <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800235a:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800236a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800236c:	f7ff fbea 	bl	8001b44 <HAL_GetTick>
 8002370:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002372:	e01c      	b.n	80023ae <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002374:	f7ff fbe6 	bl	8001b44 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b0a      	cmp	r3, #10
 8002380:	d915      	bls.n	80023ae <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800238c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002390:	d10d      	bne.n	80023ae <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f023 0312 	bic.w	r3, r3, #18
 800239a:	f043 0210 	orr.w	r2, r3, #16
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e014      	b.n	80023d8 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023bc:	d0da      	beq.n	8002374 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f023 0303 	bic.w	r3, r3, #3
 80023c6:	f043 0201 	orr.w	r2, r3, #1
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f040 80a0 	bne.w	800253c <HAL_ADCEx_InjectedStart_IT+0x15c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_ADCEx_InjectedStart_IT+0x2a>
 8002406:	2302      	movs	r3, #2
 8002408:	e09b      	b.n	8002542 <HAL_ADCEx_InjectedStart_IT+0x162>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 fca8 	bl	8002d68 <ADC_Enable>
 8002418:	4603      	mov	r3, r0
 800241a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
      /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	2b00      	cmp	r3, #0
 8002420:	f040 8087 	bne.w	8002532 <HAL_ADCEx_InjectedStart_IT+0x152>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800242c:	f023 0301 	bic.w	r3, r3, #1
 8002430:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                        HAL_ADC_STATE_INJ_BUSY);
      
      /* Case of independent mode or multimode(for devices with several ADCs):*/
      /* Set multimode state.                                                 */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002438:	4b44      	ldr	r3, [pc, #272]	; (800254c <HAL_ADCEx_InjectedStart_IT+0x16c>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	2b00      	cmp	r3, #0
 8002442:	d004      	beq.n	800244e <HAL_ADCEx_InjectedStart_IT+0x6e>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800244c:	d106      	bne.n	800245c <HAL_ADCEx_InjectedStart_IT+0x7c>
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	641a      	str	r2, [r3, #64]	; 0x40
 800245a:	e005      	b.n	8002468 <HAL_ADCEx_InjectedStart_IT+0x88>
      }
      else
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Check if a regular conversion is ongoing */
      /* Note: On this device, there is no ADC error code fields related to   */
      /*       conversions on group injected only. In case of conversion on   */
      /*       going on group regular, no error code is reset.                */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002470:	2b00      	cmp	r3, #0
 8002472:	d102      	bne.n	800247a <HAL_ADCEx_InjectedStart_IT+0x9a>
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2260      	movs	r2, #96	; 0x60
 8002488:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC Injected context queue overflow interrupt if this feature */
      /* is enabled.                                                          */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d007      	beq.n	80024a8 <HAL_ADCEx_InjectedStart_IT+0xc8>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024a6:	605a      	str	r2, [r3, #4]
      }
      
      /* Enable ADC end of conversion interrupt */
      switch(hadc->Init.EOCSelection)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d110      	bne.n	80024d2 <HAL_ADCEx_InjectedStart_IT+0xf2>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0220 	bic.w	r2, r2, #32
 80024be:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024ce:	605a      	str	r2, [r3, #4]
          break;
 80024d0:	e008      	b.n	80024e4 <HAL_ADCEx_InjectedStart_IT+0x104>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80024e0:	605a      	str	r2, [r3, #4]
          break;
 80024e2:	bf00      	nop
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d126      	bne.n	8002540 <HAL_ADCEx_InjectedStart_IT+0x160>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 80024f2:	4b16      	ldr	r3, [pc, #88]	; (800254c <HAL_ADCEx_InjectedStart_IT+0x16c>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 031f 	and.w	r3, r3, #31
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d010      	beq.n	8002520 <HAL_ADCEx_InjectedStart_IT+0x140>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 80024fe:	4b13      	ldr	r3, [pc, #76]	; (800254c <HAL_ADCEx_InjectedStart_IT+0x16c>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 031f 	and.w	r3, r3, #31
 8002506:	2b06      	cmp	r3, #6
 8002508:	d00a      	beq.n	8002520 <HAL_ADCEx_InjectedStart_IT+0x140>
 800250a:	4b10      	ldr	r3, [pc, #64]	; (800254c <HAL_ADCEx_InjectedStart_IT+0x16c>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 031f 	and.w	r3, r3, #31
 8002512:	2b07      	cmp	r3, #7
 8002514:	d004      	beq.n	8002520 <HAL_ADCEx_InjectedStart_IT+0x140>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800251e:	d10f      	bne.n	8002540 <HAL_ADCEx_InjectedStart_IT+0x160>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTART);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0208 	orr.w	r2, r2, #8
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	e006      	b.n	8002540 <HAL_ADCEx_InjectedStart_IT+0x160>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800253a:	e001      	b.n	8002540 <HAL_ADCEx_InjectedStart_IT+0x160>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800253c:	2302      	movs	r3, #2
 800253e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002540:	7bfb      	ldrb	r3, [r7, #15]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	50000300 	.word	0x50000300

08002550 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b09d      	sub	sp, #116	; 0x74
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]
  
  /* Injected context queue feature: temporary JSQR variables defined in      */
  /* static to be passed over calls of this function                          */
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d101      	bne.n	80025c6 <HAL_ADCEx_InjectedConfigChannel+0x26>
 80025c2:	2302      	movs	r3, #2
 80025c4:	e2ff      	b.n	8002bc6 <HAL_ADCEx_InjectedConfigChannel+0x626>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */
  
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_ADCEx_InjectedConfigChannel+0x3e>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d132      	bne.n	8002644 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 used)        */
    
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d124      	bne.n	8002630 <HAL_ADCEx_InjectedConfigChannel+0x90>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d00c      	beq.n	8002608 <HAL_ADCEx_InjectedConfigChannel+0x68>
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	021a      	lsls	r2, r3, #8
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	431a      	orrs	r2, r3
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	4313      	orrs	r3, r2
 8002600:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002602:	4313      	orrs	r3, r2
 8002604:	66bb      	str	r3, [r7, #104]	; 0x68
 8002606:	e005      	b.n	8002614 <HAL_ADCEx_InjectedConfigChannel+0x74>
                                                 ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                 sConfigInjected->ExternalTrigInjecConvEdge                          );
      }
      else
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	021b      	lsls	r3, r3, #8
 800260e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002610:	4313      	orrs	r3, r2
 8002612:	66bb      	str	r3, [r7, #104]	; 0x68
      }
      
      /* Update ADC register JSQR */
      MODIFY_REG(hadc->Instance->JSQR           ,
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800261a:	4b9c      	ldr	r3, [pc, #624]	; (800288c <HAL_ADCEx_InjectedConfigChannel+0x2ec>)
 800261c:	4013      	ands	r3, r2
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6812      	ldr	r2, [r2, #0]
 8002622:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002624:	430b      	orrs	r3, r1
 8002626:	64d3      	str	r3, [r2, #76]	; 0x4c
                 ADC_JSQR_JEXTSEL |
                 ADC_JSQR_JL                    ,
                 tmp_JSQR_ContextQueueBeingBuilt );
      
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800262c:	649a      	str	r2, [r3, #72]	; 0x48
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800262e:	e060      	b.n	80026f2 <HAL_ADCEx_InjectedConfigChannel+0x152>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	f043 0220 	orr.w	r2, r3, #32
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	641a      	str	r2, [r3, #64]	; 0x40
      
      tmp_hal_status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002642:	e056      	b.n	80026f2 <HAL_ADCEx_InjectedConfigChannel+0x152>
    /* Procedure to define injected context register JSQR over successive     */
    /* calls of this function, for each injected channel rank:                */
    
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger                      */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002648:	2b00      	cmp	r3, #0
 800264a:	d121      	bne.n	8002690 <HAL_ADCEx_InjectedConfigChannel+0xf0>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	699a      	ldr	r2, [r3, #24]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Initialize value that will be set into register JSQR */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	649a      	str	r2, [r3, #72]	; 0x48
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d00e      	beq.n	8002680 <HAL_ADCEx_InjectedConfigChannel+0xe0>
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	1e59      	subs	r1, r3, #1
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	4319      	orrs	r1, r3
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	430b      	orrs	r3, r1
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	649a      	str	r2, [r3, #72]	; 0x48
 800267e:	e007      	b.n	8002690 <HAL_ADCEx_InjectedConfigChannel+0xf0>
                                                    ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                    sConfigInjected->ExternalTrigInjecConvEdge                          );        
      }
      else
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	3b01      	subs	r3, #1
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	649a      	str	r2, [r3, #72]	; 0x48

      /* 2. Continue setting of context under definition with parameter       */
      /*    related to each channel: channel rank sequence                    */
      
      /* Set the JSQx bits for the selected rank */
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4413      	add	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	3302      	adds	r3, #2
 80026a2:	221f      	movs	r2, #31
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	4019      	ands	r1, r3
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	4413      	add	r3, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	3302      	adds	r3, #2
 80026be:	fa00 f303 	lsl.w	r3, r0, r3
 80026c2:	ea41 0203 	orr.w	r2, r1, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	649a      	str	r2, [r3, #72]	; 0x48
                 ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank)                   ,
                 ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank) );
      
      /* Decrease channel count after setting into temporary JSQR variable */
      hadc->InjectionConfig.ChannelCount --;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ce:	1e5a      	subs	r2, r3, #1
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* 3. End of context setting: If last channel set, then write context   */
      /*    into register JSQR and make it enter into queue                   */
      if (hadc->InjectionConfig.ChannelCount == 0U)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10a      	bne.n	80026f2 <HAL_ADCEx_InjectedConfigChannel+0x152>
      {
        /* Update ADC register JSQR */
        MODIFY_REG(hadc->Instance->JSQR              ,
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026e2:	4b6a      	ldr	r3, [pc, #424]	; (800288c <HAL_ADCEx_InjectedConfigChannel+0x2ec>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	430b      	orrs	r3, r1
 80026f0:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 0308 	and.w	r3, r3, #8
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d12d      	bne.n	800275c <HAL_ADCEx_InjectedConfigChannel+0x1bc>
  {     
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	7f5b      	ldrb	r3, [r3, #29]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d110      	bne.n	800272a <HAL_ADCEx_InjectedConfigChannel+0x18a>
    {
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	7f9b      	ldrb	r3, [r3, #30]
 8002716:	055a      	lsls	r2, r3, #21
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	7f1b      	ldrb	r3, [r3, #28]
 800271c:	051b      	lsls	r3, r3, #20
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	60da      	str	r2, [r3, #12]
 8002728:	e018      	b.n	800275c <HAL_ADCEx_InjectedConfigChannel+0x1bc>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	7f9b      	ldrb	r3, [r3, #30]
 8002738:	055a      	lsls	r2, r3, #21
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	60da      	str	r2, [r3, #12]
                 ADC_CFGR_JDISCEN                                                    ,
                 ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext) );
      
      /* If injected discontinuous mode was intended to be set and could not  */
      /* due to auto-injected enabled, error is reported.                     */
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	7f1b      	ldrb	r3, [r3, #28]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d108      	bne.n	800275c <HAL_ADCEx_InjectedConfigChannel+0x1bc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	f043 0220 	orr.w	r2, r3, #32
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b00      	cmp	r3, #0
 8002768:	f040 8110 	bne.w	800298c <HAL_ADCEx_InjectedConfigChannel+0x3ec>
  {    
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d10c      	bne.n	800278e <HAL_ADCEx_InjectedConfigChannel+0x1ee>
    {
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f023 7100 	bic.w	r1, r3, #33554432	; 0x2000000
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	7f5b      	ldrb	r3, [r3, #29]
 8002782:	065a      	lsls	r2, r3, #25
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	60da      	str	r2, [r3, #12]
 800278c:	e014      	b.n	80027b8 <HAL_ADCEx_InjectedConfigChannel+0x218>
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      /* Disable Automatic injected conversion */
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800279c:	60da      	str	r2, [r3, #12]
      
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	7f5b      	ldrb	r3, [r3, #29]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d108      	bne.n	80027b8 <HAL_ADCEx_InjectedConfigChannel+0x218>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f043 0220 	orr.w	r2, r3, #32
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }
      

    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b09      	cmp	r3, #9
 80027be:	d91c      	bls.n	80027fa <HAL_ADCEx_InjectedConfigChannel+0x25a>
    {
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6999      	ldr	r1, [r3, #24]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	4613      	mov	r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4413      	add	r3, r2
 80027d0:	3b1e      	subs	r3, #30
 80027d2:	2207      	movs	r2, #7
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	4019      	ands	r1, r3
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	6898      	ldr	r0, [r3, #8]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4613      	mov	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4413      	add	r3, r2
 80027ea:	3b1e      	subs	r3, #30
 80027ec:	fa00 f203 	lsl.w	r2, r0, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	619a      	str	r2, [r3, #24]
 80027f8:	e019      	b.n	800282e <HAL_ADCEx_InjectedConfigChannel+0x28e>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel)                      ,
                 ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6959      	ldr	r1, [r3, #20]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4613      	mov	r3, r2
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	4413      	add	r3, r2
 800280a:	2207      	movs	r2, #7
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	4019      	ands	r1, r3
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	6898      	ldr	r0, [r3, #8]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4613      	mov	r3, r2
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	4413      	add	r3, r2
 8002822:	fa00 f203 	lsl.w	r2, r0, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */
    
    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	695a      	ldr	r2, [r3, #20]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	08db      	lsrs	r3, r3, #3
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfigInjected->InjectedOffsetNumber)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	3b01      	subs	r3, #1
 800284c:	2b03      	cmp	r3, #3
 800284e:	d854      	bhi.n	80028fa <HAL_ADCEx_InjectedConfigChannel+0x35a>
 8002850:	a201      	add	r2, pc, #4	; (adr r2, 8002858 <HAL_ADCEx_InjectedConfigChannel+0x2b8>)
 8002852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002856:	bf00      	nop
 8002858:	08002869 	.word	0x08002869
 800285c:	08002895 	.word	0x08002895
 8002860:	080028b7 	.word	0x080028b7
 8002864:	080028d9 	.word	0x080028d9
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800286e:	4b08      	ldr	r3, [pc, #32]	; (8002890 <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 8002870:	4013      	ands	r3, r2
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	0691      	lsls	r1, r2, #26
 8002878:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800287a:	430a      	orrs	r2, r1
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002886:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                                   ,
                 ADC_OFR1_OFFSET1_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8002888:	e083      	b.n	8002992 <HAL_ADCEx_InjectedConfigChannel+0x3f2>
 800288a:	bf00      	nop
 800288c:	82082000 	.word	0x82082000
 8002890:	83fff000 	.word	0x83fff000
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2                               ,
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800289a:	4b9f      	ldr	r3, [pc, #636]	; (8002b18 <HAL_ADCEx_InjectedConfigChannel+0x578>)
 800289c:	4013      	ands	r3, r2
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	6812      	ldr	r2, [r2, #0]
 80028a2:	0691      	lsls	r1, r2, #26
 80028a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80028a6:	430a      	orrs	r2, r1
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80028b2:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                                   ,
                 ADC_OFR2_OFFSET2_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 80028b4:	e06d      	b.n	8002992 <HAL_ADCEx_InjectedConfigChannel+0x3f2>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3                               ,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80028bc:	4b96      	ldr	r3, [pc, #600]	; (8002b18 <HAL_ADCEx_InjectedConfigChannel+0x578>)
 80028be:	4013      	ands	r3, r2
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	0691      	lsls	r1, r2, #26
 80028c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80028c8:	430a      	orrs	r2, r1
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80028d4:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                                   ,
                 ADC_OFR3_OFFSET3_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 80028d6:	e05c      	b.n	8002992 <HAL_ADCEx_InjectedConfigChannel+0x3f2>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4                               ,
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80028de:	4b8e      	ldr	r3, [pc, #568]	; (8002b18 <HAL_ADCEx_InjectedConfigChannel+0x578>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	6812      	ldr	r2, [r2, #0]
 80028e6:	0691      	lsls	r1, r2, #26
 80028e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80028ea:	430a      	orrs	r2, r1
 80028ec:	431a      	orrs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80028f6:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                                   ,
                 ADC_OFR4_OFFSET4_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 80028f8:	e04b      	b.n	8002992 <HAL_ADCEx_InjectedConfigChannel+0x3f2>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002900:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	069b      	lsls	r3, r3, #26
 800290a:	429a      	cmp	r2, r3
 800290c:	d107      	bne.n	800291e <HAL_ADCEx_InjectedConfigChannel+0x37e>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800291c:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002924:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	069b      	lsls	r3, r3, #26
 800292e:	429a      	cmp	r2, r3
 8002930:	d107      	bne.n	8002942 <HAL_ADCEx_InjectedConfigChannel+0x3a2>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002940:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002948:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	069b      	lsls	r3, r3, #26
 8002952:	429a      	cmp	r2, r3
 8002954:	d107      	bne.n	8002966 <HAL_ADCEx_InjectedConfigChannel+0x3c6>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002964:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800296c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	069b      	lsls	r3, r3, #26
 8002976:	429a      	cmp	r2, r3
 8002978:	d10a      	bne.n	8002990 <HAL_ADCEx_InjectedConfigChannel+0x3f0>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002988:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800298a:	e001      	b.n	8002990 <HAL_ADCEx_InjectedConfigChannel+0x3f0>
    }
    
  }
 800298c:	bf00      	nop
 800298e:	e000      	b.n	8002992 <HAL_ADCEx_InjectedConfigChannel+0x3f2>
      break;
 8002990:	bf00      	nop
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	2b01      	cmp	r3, #1
 800299e:	d108      	bne.n	80029b2 <HAL_ADCEx_InjectedConfigChannel+0x412>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_ADCEx_InjectedConfigChannel+0x412>
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <HAL_ADCEx_InjectedConfigChannel+0x414>
 80029b2:	2300      	movs	r3, #0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f040 8100 	bne.w	8002bba <HAL_ADCEx_InjectedConfigChannel+0x61a>
  {
    /* Configuration of differential mode */
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d00f      	beq.n	80029e2 <HAL_ADCEx_InjectedConfigChannel+0x442>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2201      	movs	r2, #1
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43da      	mvns	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	400a      	ands	r2, r1
 80029dc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80029e0:	e049      	b.n	8002a76 <HAL_ADCEx_InjectedConfigChannel+0x4d6>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2201      	movs	r2, #1
 80029f0:	409a      	lsls	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b09      	cmp	r3, #9
 8002a02:	d91c      	bls.n	8002a3e <HAL_ADCEx_InjectedConfigChannel+0x49e>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6999      	ldr	r1, [r3, #24]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	4413      	add	r3, r2
 8002a14:	3b1b      	subs	r3, #27
 8002a16:	2207      	movs	r2, #7
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	4019      	ands	r1, r3
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	6898      	ldr	r0, [r3, #8]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3b1b      	subs	r3, #27
 8002a30:	fa00 f203 	lsl.w	r2, r0, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	619a      	str	r2, [r3, #24]
 8002a3c:	e01b      	b.n	8002a76 <HAL_ADCEx_InjectedConfigChannel+0x4d6>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel +1U),
                   ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6959      	ldr	r1, [r3, #20]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	4413      	add	r3, r2
 8002a50:	2207      	movs	r2, #7
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	4019      	ands	r1, r3
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	6898      	ldr	r0, [r3, #8]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	4613      	mov	r3, r2
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4413      	add	r3, r2
 8002a6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a76:	4b29      	ldr	r3, [pc, #164]	; (8002b1c <HAL_ADCEx_InjectedConfigChannel+0x57c>)
 8002a78:	663b      	str	r3, [r7, #96]	; 0x60
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2b10      	cmp	r3, #16
 8002a80:	d105      	bne.n	8002a8e <HAL_ADCEx_InjectedConfigChannel+0x4ee>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002a82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d015      	beq.n	8002aba <HAL_ADCEx_InjectedConfigChannel+0x51a>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002a92:	2b11      	cmp	r3, #17
 8002a94:	d105      	bne.n	8002aa2 <HAL_ADCEx_InjectedConfigChannel+0x502>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002a96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00b      	beq.n	8002aba <HAL_ADCEx_InjectedConfigChannel+0x51a>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002aa6:	2b12      	cmp	r3, #18
 8002aa8:	f040 8087 	bne.w	8002bba <HAL_ADCEx_InjectedConfigChannel+0x61a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002aac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f040 8080 	bne.w	8002bba <HAL_ADCEx_InjectedConfigChannel+0x61a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ac2:	d102      	bne.n	8002aca <HAL_ADCEx_InjectedConfigChannel+0x52a>
 8002ac4:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <HAL_ADCEx_InjectedConfigChannel+0x580>)
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	e002      	b.n	8002ad0 <HAL_ADCEx_InjectedConfigChannel+0x530>
 8002aca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ace:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d108      	bne.n	8002af0 <HAL_ADCEx_InjectedConfigChannel+0x550>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d101      	bne.n	8002af0 <HAL_ADCEx_InjectedConfigChannel+0x550>
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <HAL_ADCEx_InjectedConfigChannel+0x552>
 8002af0:	2300      	movs	r3, #0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d156      	bne.n	8002ba4 <HAL_ADCEx_InjectedConfigChannel+0x604>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002af6:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d016      	beq.n	8002b2a <HAL_ADCEx_InjectedConfigChannel+0x58a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d10d      	bne.n	8002b24 <HAL_ADCEx_InjectedConfigChannel+0x584>
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d107      	bne.n	8002b24 <HAL_ADCEx_InjectedConfigChannel+0x584>
 8002b14:	2301      	movs	r3, #1
 8002b16:	e006      	b.n	8002b26 <HAL_ADCEx_InjectedConfigChannel+0x586>
 8002b18:	83fff000 	.word	0x83fff000
 8002b1c:	50000300 	.word	0x50000300
 8002b20:	50000100 	.word	0x50000100
 8002b24:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d13c      	bne.n	8002ba4 <HAL_ADCEx_InjectedConfigChannel+0x604>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2b10      	cmp	r3, #16
 8002b30:	d11d      	bne.n	8002b6e <HAL_ADCEx_InjectedConfigChannel+0x5ce>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b3a:	d118      	bne.n	8002b6e <HAL_ADCEx_InjectedConfigChannel+0x5ce>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002b3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b46:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b48:	4b22      	ldr	r3, [pc, #136]	; (8002bd4 <HAL_ADCEx_InjectedConfigChannel+0x634>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a22      	ldr	r2, [pc, #136]	; (8002bd8 <HAL_ADCEx_InjectedConfigChannel+0x638>)
 8002b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b52:	0c9a      	lsrs	r2, r3, #18
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8002b5e:	e002      	b.n	8002b66 <HAL_ADCEx_InjectedConfigChannel+0x5c6>
          {
            wait_loop_index--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1f9      	bne.n	8002b60 <HAL_ADCEx_InjectedConfigChannel+0x5c0>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b6c:	e024      	b.n	8002bb8 <HAL_ADCEx_InjectedConfigChannel+0x618>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b11      	cmp	r3, #17
 8002b74:	d10b      	bne.n	8002b8e <HAL_ADCEx_InjectedConfigChannel+0x5ee>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b7e:	d106      	bne.n	8002b8e <HAL_ADCEx_InjectedConfigChannel+0x5ee>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002b80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002b88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b8a:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b8c:	e014      	b.n	8002bb8 <HAL_ADCEx_InjectedConfigChannel+0x618>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b12      	cmp	r3, #18
 8002b94:	d110      	bne.n	8002bb8 <HAL_ADCEx_InjectedConfigChannel+0x618>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002b96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ba0:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ba2:	e009      	b.n	8002bb8 <HAL_ADCEx_InjectedConfigChannel+0x618>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	f043 0220 	orr.w	r2, r3, #32
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002bb6:	e000      	b.n	8002bba <HAL_ADCEx_InjectedConfigChannel+0x61a>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bb8:	bf00      	nop
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002bc2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3774      	adds	r7, #116	; 0x74
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	20000000 	.word	0x20000000
 8002bd8:	431bde83 	.word	0x431bde83

08002bdc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b099      	sub	sp, #100	; 0x64
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bf4:	d102      	bne.n	8002bfc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002bf6:	4b5a      	ldr	r3, [pc, #360]	; (8002d60 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	e002      	b.n	8002c02 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002bfc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c00:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0a2      	b.n	8002d52 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e09b      	b.n	8002d52 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d17f      	bne.n	8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d179      	bne.n	8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c3c:	4b49      	ldr	r3, [pc, #292]	; (8002d64 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8002c3e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d040      	beq.n	8002cca <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002c48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	6859      	ldr	r1, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c5a:	035b      	lsls	r3, r3, #13
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c62:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d108      	bne.n	8002c84 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002c80:	2301      	movs	r3, #1
 8002c82:	e000      	b.n	8002c86 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002c84:	2300      	movs	r3, #0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d15c      	bne.n	8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d107      	bne.n	8002ca6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002ca6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d14b      	bne.n	8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002cac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cb4:	f023 030f 	bic.w	r3, r3, #15
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	6811      	ldr	r1, [r2, #0]
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	6892      	ldr	r2, [r2, #8]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cc6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cc8:	e03c      	b.n	8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002cca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cd4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d108      	bne.n	8002cf6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d123      	bne.n	8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d107      	bne.n	8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002d14:	2301      	movs	r3, #1
 8002d16:	e000      	b.n	8002d1a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002d18:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d112      	bne.n	8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002d1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d26:	f023 030f 	bic.w	r3, r3, #15
 8002d2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d2c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d2e:	e009      	b.n	8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	f043 0220 	orr.w	r2, r3, #32
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002d42:	e000      	b.n	8002d46 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d44:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002d52:	4618      	mov	r0, r3
 8002d54:	3764      	adds	r7, #100	; 0x64
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	50000100 	.word	0x50000100
 8002d64:	50000300 	.word	0x50000300

08002d68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d108      	bne.n	8002d94 <ADC_Enable+0x2c>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <ADC_Enable+0x2c>
 8002d90:	2301      	movs	r3, #1
 8002d92:	e000      	b.n	8002d96 <ADC_Enable+0x2e>
 8002d94:	2300      	movs	r3, #0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d143      	bne.n	8002e22 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <ADC_Enable+0xc4>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00d      	beq.n	8002dc4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	f043 0210 	orr.w	r2, r3, #16
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db8:	f043 0201 	orr.w	r2, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e02f      	b.n	8002e24 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0201 	orr.w	r2, r2, #1
 8002dd2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002dd4:	f7fe feb6 	bl	8001b44 <HAL_GetTick>
 8002dd8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002dda:	e01b      	b.n	8002e14 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ddc:	f7fe feb2 	bl	8001b44 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d914      	bls.n	8002e14 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d00d      	beq.n	8002e14 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	f043 0210 	orr.w	r2, r3, #16
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e08:	f043 0201 	orr.w	r2, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e007      	b.n	8002e24 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d1dc      	bne.n	8002ddc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	8000003f 	.word	0x8000003f

08002e30 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d108      	bne.n	8002e5c <ADC_Disable+0x2c>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <ADC_Disable+0x2c>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <ADC_Disable+0x2e>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d047      	beq.n	8002ef2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 030d 	and.w	r3, r3, #13
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d10f      	bne.n	8002e90 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0202 	orr.w	r2, r2, #2
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2203      	movs	r2, #3
 8002e86:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002e88:	f7fe fe5c 	bl	8001b44 <HAL_GetTick>
 8002e8c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002e8e:	e029      	b.n	8002ee4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	f043 0210 	orr.w	r2, r3, #16
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea0:	f043 0201 	orr.w	r2, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e023      	b.n	8002ef4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002eac:	f7fe fe4a 	bl	8001b44 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d914      	bls.n	8002ee4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d10d      	bne.n	8002ee4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	f043 0210 	orr.w	r2, r3, #16
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed8:	f043 0201 	orr.w	r2, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e007      	b.n	8002ef4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d0dc      	beq.n	8002eac <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <__NVIC_SetPriorityGrouping+0x44>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f18:	4013      	ands	r3, r2
 8002f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f2e:	4a04      	ldr	r2, [pc, #16]	; (8002f40 <__NVIC_SetPriorityGrouping+0x44>)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	60d3      	str	r3, [r2, #12]
}
 8002f34:	bf00      	nop
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f48:	4b04      	ldr	r3, [pc, #16]	; (8002f5c <__NVIC_GetPriorityGrouping+0x18>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	0a1b      	lsrs	r3, r3, #8
 8002f4e:	f003 0307 	and.w	r3, r3, #7
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	db0b      	blt.n	8002f8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	f003 021f 	and.w	r2, r3, #31
 8002f78:	4907      	ldr	r1, [pc, #28]	; (8002f98 <__NVIC_EnableIRQ+0x38>)
 8002f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	2001      	movs	r0, #1
 8002f82:	fa00 f202 	lsl.w	r2, r0, r2
 8002f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	e000e100 	.word	0xe000e100

08002f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	6039      	str	r1, [r7, #0]
 8002fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	db0a      	blt.n	8002fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	490c      	ldr	r1, [pc, #48]	; (8002fe8 <__NVIC_SetPriority+0x4c>)
 8002fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fba:	0112      	lsls	r2, r2, #4
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fc4:	e00a      	b.n	8002fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	4908      	ldr	r1, [pc, #32]	; (8002fec <__NVIC_SetPriority+0x50>)
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	3b04      	subs	r3, #4
 8002fd4:	0112      	lsls	r2, r2, #4
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	440b      	add	r3, r1
 8002fda:	761a      	strb	r2, [r3, #24]
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	e000e100 	.word	0xe000e100
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b089      	sub	sp, #36	; 0x24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f1c3 0307 	rsb	r3, r3, #7
 800300a:	2b04      	cmp	r3, #4
 800300c:	bf28      	it	cs
 800300e:	2304      	movcs	r3, #4
 8003010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3304      	adds	r3, #4
 8003016:	2b06      	cmp	r3, #6
 8003018:	d902      	bls.n	8003020 <NVIC_EncodePriority+0x30>
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	3b03      	subs	r3, #3
 800301e:	e000      	b.n	8003022 <NVIC_EncodePriority+0x32>
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003024:	f04f 32ff 	mov.w	r2, #4294967295
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	43da      	mvns	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	401a      	ands	r2, r3
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003038:	f04f 31ff 	mov.w	r1, #4294967295
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	fa01 f303 	lsl.w	r3, r1, r3
 8003042:	43d9      	mvns	r1, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003048:	4313      	orrs	r3, r2
         );
}
 800304a:	4618      	mov	r0, r3
 800304c:	3724      	adds	r7, #36	; 0x24
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
	...

08003058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3b01      	subs	r3, #1
 8003064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003068:	d301      	bcc.n	800306e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800306a:	2301      	movs	r3, #1
 800306c:	e00f      	b.n	800308e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800306e:	4a0a      	ldr	r2, [pc, #40]	; (8003098 <SysTick_Config+0x40>)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3b01      	subs	r3, #1
 8003074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003076:	210f      	movs	r1, #15
 8003078:	f04f 30ff 	mov.w	r0, #4294967295
 800307c:	f7ff ff8e 	bl	8002f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003080:	4b05      	ldr	r3, [pc, #20]	; (8003098 <SysTick_Config+0x40>)
 8003082:	2200      	movs	r2, #0
 8003084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003086:	4b04      	ldr	r3, [pc, #16]	; (8003098 <SysTick_Config+0x40>)
 8003088:	2207      	movs	r2, #7
 800308a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	e000e010 	.word	0xe000e010

0800309c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f7ff ff29 	bl	8002efc <__NVIC_SetPriorityGrouping>
}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b086      	sub	sp, #24
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	4603      	mov	r3, r0
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	607a      	str	r2, [r7, #4]
 80030be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030c4:	f7ff ff3e 	bl	8002f44 <__NVIC_GetPriorityGrouping>
 80030c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	68b9      	ldr	r1, [r7, #8]
 80030ce:	6978      	ldr	r0, [r7, #20]
 80030d0:	f7ff ff8e 	bl	8002ff0 <NVIC_EncodePriority>
 80030d4:	4602      	mov	r2, r0
 80030d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030da:	4611      	mov	r1, r2
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff ff5d 	bl	8002f9c <__NVIC_SetPriority>
}
 80030e2:	bf00      	nop
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b082      	sub	sp, #8
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	4603      	mov	r3, r0
 80030f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff ff31 	bl	8002f60 <__NVIC_EnableIRQ>
}
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff ffa2 	bl	8003058 <SysTick_Config>
 8003114:	4603      	mov	r3, r0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003120:	b480      	push	{r7}
 8003122:	b087      	sub	sp, #28
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800312e:	e14e      	b.n	80033ce <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	2101      	movs	r1, #1
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	fa01 f303 	lsl.w	r3, r1, r3
 800313c:	4013      	ands	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 8140 	beq.w	80033c8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	2b01      	cmp	r3, #1
 8003152:	d005      	beq.n	8003160 <HAL_GPIO_Init+0x40>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d130      	bne.n	80031c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	2203      	movs	r2, #3
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	4013      	ands	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003196:	2201      	movs	r2, #1
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43db      	mvns	r3, r3
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4013      	ands	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	091b      	lsrs	r3, r3, #4
 80031ac:	f003 0201 	and.w	r2, r3, #1
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	d017      	beq.n	80031fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	2203      	movs	r2, #3
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	43db      	mvns	r3, r3
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	4013      	ands	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d123      	bne.n	8003252 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	08da      	lsrs	r2, r3, #3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3208      	adds	r2, #8
 8003212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003216:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	220f      	movs	r2, #15
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	43db      	mvns	r3, r3
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4013      	ands	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	691a      	ldr	r2, [r3, #16]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	08da      	lsrs	r2, r3, #3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3208      	adds	r2, #8
 800324c:	6939      	ldr	r1, [r7, #16]
 800324e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	2203      	movs	r2, #3
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43db      	mvns	r3, r3
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4013      	ands	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f003 0203 	and.w	r2, r3, #3
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 809a 	beq.w	80033c8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003294:	4b55      	ldr	r3, [pc, #340]	; (80033ec <HAL_GPIO_Init+0x2cc>)
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	4a54      	ldr	r2, [pc, #336]	; (80033ec <HAL_GPIO_Init+0x2cc>)
 800329a:	f043 0301 	orr.w	r3, r3, #1
 800329e:	6193      	str	r3, [r2, #24]
 80032a0:	4b52      	ldr	r3, [pc, #328]	; (80033ec <HAL_GPIO_Init+0x2cc>)
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032ac:	4a50      	ldr	r2, [pc, #320]	; (80033f0 <HAL_GPIO_Init+0x2d0>)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	089b      	lsrs	r3, r3, #2
 80032b2:	3302      	adds	r3, #2
 80032b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f003 0303 	and.w	r3, r3, #3
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	220f      	movs	r2, #15
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	4013      	ands	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032d6:	d013      	beq.n	8003300 <HAL_GPIO_Init+0x1e0>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a46      	ldr	r2, [pc, #280]	; (80033f4 <HAL_GPIO_Init+0x2d4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d00d      	beq.n	80032fc <HAL_GPIO_Init+0x1dc>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a45      	ldr	r2, [pc, #276]	; (80033f8 <HAL_GPIO_Init+0x2d8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d007      	beq.n	80032f8 <HAL_GPIO_Init+0x1d8>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a44      	ldr	r2, [pc, #272]	; (80033fc <HAL_GPIO_Init+0x2dc>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d101      	bne.n	80032f4 <HAL_GPIO_Init+0x1d4>
 80032f0:	2303      	movs	r3, #3
 80032f2:	e006      	b.n	8003302 <HAL_GPIO_Init+0x1e2>
 80032f4:	2305      	movs	r3, #5
 80032f6:	e004      	b.n	8003302 <HAL_GPIO_Init+0x1e2>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e002      	b.n	8003302 <HAL_GPIO_Init+0x1e2>
 80032fc:	2301      	movs	r3, #1
 80032fe:	e000      	b.n	8003302 <HAL_GPIO_Init+0x1e2>
 8003300:	2300      	movs	r3, #0
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	f002 0203 	and.w	r2, r2, #3
 8003308:	0092      	lsls	r2, r2, #2
 800330a:	4093      	lsls	r3, r2
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003312:	4937      	ldr	r1, [pc, #220]	; (80033f0 <HAL_GPIO_Init+0x2d0>)
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	089b      	lsrs	r3, r3, #2
 8003318:	3302      	adds	r3, #2
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003320:	4b37      	ldr	r3, [pc, #220]	; (8003400 <HAL_GPIO_Init+0x2e0>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	43db      	mvns	r3, r3
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4013      	ands	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003344:	4a2e      	ldr	r2, [pc, #184]	; (8003400 <HAL_GPIO_Init+0x2e0>)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800334a:	4b2d      	ldr	r3, [pc, #180]	; (8003400 <HAL_GPIO_Init+0x2e0>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	43db      	mvns	r3, r3
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4013      	ands	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4313      	orrs	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800336e:	4a24      	ldr	r2, [pc, #144]	; (8003400 <HAL_GPIO_Init+0x2e0>)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003374:	4b22      	ldr	r3, [pc, #136]	; (8003400 <HAL_GPIO_Init+0x2e0>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	43db      	mvns	r3, r3
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4013      	ands	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003398:	4a19      	ldr	r2, [pc, #100]	; (8003400 <HAL_GPIO_Init+0x2e0>)
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800339e:	4b18      	ldr	r3, [pc, #96]	; (8003400 <HAL_GPIO_Init+0x2e0>)
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	43db      	mvns	r3, r3
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4013      	ands	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80033c2:	4a0f      	ldr	r2, [pc, #60]	; (8003400 <HAL_GPIO_Init+0x2e0>)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	3301      	adds	r3, #1
 80033cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	fa22 f303 	lsr.w	r3, r2, r3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f47f aea9 	bne.w	8003130 <HAL_GPIO_Init+0x10>
  }
}
 80033de:	bf00      	nop
 80033e0:	bf00      	nop
 80033e2:	371c      	adds	r7, #28
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	40021000 	.word	0x40021000
 80033f0:	40010000 	.word	0x40010000
 80033f4:	48000400 	.word	0x48000400
 80033f8:	48000800 	.word	0x48000800
 80033fc:	48000c00 	.word	0x48000c00
 8003400:	40010400 	.word	0x40010400

08003404 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691a      	ldr	r2, [r3, #16]
 8003414:	887b      	ldrh	r3, [r7, #2]
 8003416:	4013      	ands	r3, r2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800341c:	2301      	movs	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
 8003420:	e001      	b.n	8003426 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003422:	2300      	movs	r3, #0
 8003424:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003426:	7bfb      	ldrb	r3, [r7, #15]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	460b      	mov	r3, r1
 800343e:	807b      	strh	r3, [r7, #2]
 8003440:	4613      	mov	r3, r2
 8003442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003444:	787b      	ldrb	r3, [r7, #1]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800344a:	887a      	ldrh	r2, [r7, #2]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003450:	e002      	b.n	8003458 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003452:	887a      	ldrh	r2, [r7, #2]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800346a:	af00      	add	r7, sp, #0
 800346c:	1d3b      	adds	r3, r7, #4
 800346e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003470:	1d3b      	adds	r3, r7, #4
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d102      	bne.n	800347e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	f000 bef4 	b.w	8004266 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800347e:	1d3b      	adds	r3, r7, #4
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 816a 	beq.w	8003762 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800348e:	4bb3      	ldr	r3, [pc, #716]	; (800375c <HAL_RCC_OscConfig+0x2f8>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	2b04      	cmp	r3, #4
 8003498:	d00c      	beq.n	80034b4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800349a:	4bb0      	ldr	r3, [pc, #704]	; (800375c <HAL_RCC_OscConfig+0x2f8>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 030c 	and.w	r3, r3, #12
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d159      	bne.n	800355a <HAL_RCC_OscConfig+0xf6>
 80034a6:	4bad      	ldr	r3, [pc, #692]	; (800375c <HAL_RCC_OscConfig+0x2f8>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b2:	d152      	bne.n	800355a <HAL_RCC_OscConfig+0xf6>
 80034b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034b8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034bc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80034c0:	fa93 f3a3 	rbit	r3, r3
 80034c4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034c8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034cc:	fab3 f383 	clz	r3, r3
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d102      	bne.n	80034e6 <HAL_RCC_OscConfig+0x82>
 80034e0:	4b9e      	ldr	r3, [pc, #632]	; (800375c <HAL_RCC_OscConfig+0x2f8>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	e015      	b.n	8003512 <HAL_RCC_OscConfig+0xae>
 80034e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034ea:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ee:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80034f2:	fa93 f3a3 	rbit	r3, r3
 80034f6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80034fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034fe:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003502:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003506:	fa93 f3a3 	rbit	r3, r3
 800350a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800350e:	4b93      	ldr	r3, [pc, #588]	; (800375c <HAL_RCC_OscConfig+0x2f8>)
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003516:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800351a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800351e:	fa92 f2a2 	rbit	r2, r2
 8003522:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003526:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800352a:	fab2 f282 	clz	r2, r2
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	f042 0220 	orr.w	r2, r2, #32
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	f002 021f 	and.w	r2, r2, #31
 800353a:	2101      	movs	r1, #1
 800353c:	fa01 f202 	lsl.w	r2, r1, r2
 8003540:	4013      	ands	r3, r2
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 810c 	beq.w	8003760 <HAL_RCC_OscConfig+0x2fc>
 8003548:	1d3b      	adds	r3, r7, #4
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	f040 8106 	bne.w	8003760 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	f000 be86 	b.w	8004266 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800355a:	1d3b      	adds	r3, r7, #4
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003564:	d106      	bne.n	8003574 <HAL_RCC_OscConfig+0x110>
 8003566:	4b7d      	ldr	r3, [pc, #500]	; (800375c <HAL_RCC_OscConfig+0x2f8>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a7c      	ldr	r2, [pc, #496]	; (800375c <HAL_RCC_OscConfig+0x2f8>)
 800356c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	e030      	b.n	80035d6 <HAL_RCC_OscConfig+0x172>
 8003574:	1d3b      	adds	r3, r7, #4
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10c      	bne.n	8003598 <HAL_RCC_OscConfig+0x134>
 800357e:	4b77      	ldr	r3, [pc, #476]	; (800375c <HAL_RCC_OscConfig+0x2f8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a76      	ldr	r2, [pc, #472]	; (800375c <HAL_RCC_OscConfig+0x2f8>)
 8003584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	4b74      	ldr	r3, [pc, #464]	; (800375c <HAL_RCC_OscConfig+0x2f8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a73      	ldr	r2, [pc, #460]	; (800375c <HAL_RCC_OscConfig+0x2f8>)
 8003590:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	e01e      	b.n	80035d6 <HAL_RCC_OscConfig+0x172>
 8003598:	1d3b      	adds	r3, r7, #4
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035a2:	d10c      	bne.n	80035be <HAL_RCC_OscConfig+0x15a>
 80035a4:	4b6d      	ldr	r3, [pc, #436]	; (800375c <HAL_RCC_OscConfig+0x2f8>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a6c      	ldr	r2, [pc, #432]	; (800375c <HAL_RCC_OscConfig+0x2f8>)
 80035aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	4b6a      	ldr	r3, [pc, #424]	; (800375c <HAL_RCC_OscConfig+0x2f8>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a69      	ldr	r2, [pc, #420]	; (800375c <HAL_RCC_OscConfig+0x2f8>)
 80035b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	e00b      	b.n	80035d6 <HAL_RCC_OscConfig+0x172>
 80035be:	4b67      	ldr	r3, [pc, #412]	; (800375c <HAL_RCC_OscConfig+0x2f8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a66      	ldr	r2, [pc, #408]	; (800375c <HAL_RCC_OscConfig+0x2f8>)
 80035c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	4b64      	ldr	r3, [pc, #400]	; (800375c <HAL_RCC_OscConfig+0x2f8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a63      	ldr	r2, [pc, #396]	; (800375c <HAL_RCC_OscConfig+0x2f8>)
 80035d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035d4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035d6:	4b61      	ldr	r3, [pc, #388]	; (800375c <HAL_RCC_OscConfig+0x2f8>)
 80035d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035da:	f023 020f 	bic.w	r2, r3, #15
 80035de:	1d3b      	adds	r3, r7, #4
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	495d      	ldr	r1, [pc, #372]	; (800375c <HAL_RCC_OscConfig+0x2f8>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035ea:	1d3b      	adds	r3, r7, #4
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d059      	beq.n	80036a8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f4:	f7fe faa6 	bl	8001b44 <HAL_GetTick>
 80035f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fc:	e00a      	b.n	8003614 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035fe:	f7fe faa1 	bl	8001b44 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b64      	cmp	r3, #100	; 0x64
 800360c:	d902      	bls.n	8003614 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	f000 be29 	b.w	8004266 <HAL_RCC_OscConfig+0xe02>
 8003614:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003618:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003620:	fa93 f3a3 	rbit	r3, r3
 8003624:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003628:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362c:	fab3 f383 	clz	r3, r3
 8003630:	b2db      	uxtb	r3, r3
 8003632:	095b      	lsrs	r3, r3, #5
 8003634:	b2db      	uxtb	r3, r3
 8003636:	f043 0301 	orr.w	r3, r3, #1
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b01      	cmp	r3, #1
 800363e:	d102      	bne.n	8003646 <HAL_RCC_OscConfig+0x1e2>
 8003640:	4b46      	ldr	r3, [pc, #280]	; (800375c <HAL_RCC_OscConfig+0x2f8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	e015      	b.n	8003672 <HAL_RCC_OscConfig+0x20e>
 8003646:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800364a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003652:	fa93 f3a3 	rbit	r3, r3
 8003656:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800365a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800365e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003662:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003666:	fa93 f3a3 	rbit	r3, r3
 800366a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800366e:	4b3b      	ldr	r3, [pc, #236]	; (800375c <HAL_RCC_OscConfig+0x2f8>)
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003676:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800367a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800367e:	fa92 f2a2 	rbit	r2, r2
 8003682:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003686:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800368a:	fab2 f282 	clz	r2, r2
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	f042 0220 	orr.w	r2, r2, #32
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	f002 021f 	and.w	r2, r2, #31
 800369a:	2101      	movs	r1, #1
 800369c:	fa01 f202 	lsl.w	r2, r1, r2
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0ab      	beq.n	80035fe <HAL_RCC_OscConfig+0x19a>
 80036a6:	e05c      	b.n	8003762 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a8:	f7fe fa4c 	bl	8001b44 <HAL_GetTick>
 80036ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036b0:	e00a      	b.n	80036c8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036b2:	f7fe fa47 	bl	8001b44 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b64      	cmp	r3, #100	; 0x64
 80036c0:	d902      	bls.n	80036c8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	f000 bdcf 	b.w	8004266 <HAL_RCC_OscConfig+0xe02>
 80036c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036cc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80036d4:	fa93 f3a3 	rbit	r3, r3
 80036d8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80036dc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036e0:	fab3 f383 	clz	r3, r3
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	f043 0301 	orr.w	r3, r3, #1
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d102      	bne.n	80036fa <HAL_RCC_OscConfig+0x296>
 80036f4:	4b19      	ldr	r3, [pc, #100]	; (800375c <HAL_RCC_OscConfig+0x2f8>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	e015      	b.n	8003726 <HAL_RCC_OscConfig+0x2c2>
 80036fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036fe:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003702:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003706:	fa93 f3a3 	rbit	r3, r3
 800370a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800370e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003712:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003716:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800371a:	fa93 f3a3 	rbit	r3, r3
 800371e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003722:	4b0e      	ldr	r3, [pc, #56]	; (800375c <HAL_RCC_OscConfig+0x2f8>)
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800372a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800372e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003732:	fa92 f2a2 	rbit	r2, r2
 8003736:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800373a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800373e:	fab2 f282 	clz	r2, r2
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	f042 0220 	orr.w	r2, r2, #32
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	f002 021f 	and.w	r2, r2, #31
 800374e:	2101      	movs	r1, #1
 8003750:	fa01 f202 	lsl.w	r2, r1, r2
 8003754:	4013      	ands	r3, r2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1ab      	bne.n	80036b2 <HAL_RCC_OscConfig+0x24e>
 800375a:	e002      	b.n	8003762 <HAL_RCC_OscConfig+0x2fe>
 800375c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003762:	1d3b      	adds	r3, r7, #4
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 816f 	beq.w	8003a50 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003772:	4bd0      	ldr	r3, [pc, #832]	; (8003ab4 <HAL_RCC_OscConfig+0x650>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f003 030c 	and.w	r3, r3, #12
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00b      	beq.n	8003796 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800377e:	4bcd      	ldr	r3, [pc, #820]	; (8003ab4 <HAL_RCC_OscConfig+0x650>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f003 030c 	and.w	r3, r3, #12
 8003786:	2b08      	cmp	r3, #8
 8003788:	d16c      	bne.n	8003864 <HAL_RCC_OscConfig+0x400>
 800378a:	4bca      	ldr	r3, [pc, #808]	; (8003ab4 <HAL_RCC_OscConfig+0x650>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d166      	bne.n	8003864 <HAL_RCC_OscConfig+0x400>
 8003796:	2302      	movs	r3, #2
 8003798:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80037a0:	fa93 f3a3 	rbit	r3, r3
 80037a4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80037a8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ac:	fab3 f383 	clz	r3, r3
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d102      	bne.n	80037c6 <HAL_RCC_OscConfig+0x362>
 80037c0:	4bbc      	ldr	r3, [pc, #752]	; (8003ab4 <HAL_RCC_OscConfig+0x650>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	e013      	b.n	80037ee <HAL_RCC_OscConfig+0x38a>
 80037c6:	2302      	movs	r3, #2
 80037c8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037cc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80037d0:	fa93 f3a3 	rbit	r3, r3
 80037d4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80037d8:	2302      	movs	r3, #2
 80037da:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80037de:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037e2:	fa93 f3a3 	rbit	r3, r3
 80037e6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80037ea:	4bb2      	ldr	r3, [pc, #712]	; (8003ab4 <HAL_RCC_OscConfig+0x650>)
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	2202      	movs	r2, #2
 80037f0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80037f4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80037f8:	fa92 f2a2 	rbit	r2, r2
 80037fc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003800:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003804:	fab2 f282 	clz	r2, r2
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	f042 0220 	orr.w	r2, r2, #32
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	f002 021f 	and.w	r2, r2, #31
 8003814:	2101      	movs	r1, #1
 8003816:	fa01 f202 	lsl.w	r2, r1, r2
 800381a:	4013      	ands	r3, r2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d007      	beq.n	8003830 <HAL_RCC_OscConfig+0x3cc>
 8003820:	1d3b      	adds	r3, r7, #4
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d002      	beq.n	8003830 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	f000 bd1b 	b.w	8004266 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003830:	4ba0      	ldr	r3, [pc, #640]	; (8003ab4 <HAL_RCC_OscConfig+0x650>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003838:	1d3b      	adds	r3, r7, #4
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	21f8      	movs	r1, #248	; 0xf8
 8003840:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003844:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003848:	fa91 f1a1 	rbit	r1, r1
 800384c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003850:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003854:	fab1 f181 	clz	r1, r1
 8003858:	b2c9      	uxtb	r1, r1
 800385a:	408b      	lsls	r3, r1
 800385c:	4995      	ldr	r1, [pc, #596]	; (8003ab4 <HAL_RCC_OscConfig+0x650>)
 800385e:	4313      	orrs	r3, r2
 8003860:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003862:	e0f5      	b.n	8003a50 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003864:	1d3b      	adds	r3, r7, #4
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 8085 	beq.w	800397a <HAL_RCC_OscConfig+0x516>
 8003870:	2301      	movs	r3, #1
 8003872:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003876:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800387a:	fa93 f3a3 	rbit	r3, r3
 800387e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003882:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003886:	fab3 f383 	clz	r3, r3
 800388a:	b2db      	uxtb	r3, r3
 800388c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003890:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	461a      	mov	r2, r3
 8003898:	2301      	movs	r3, #1
 800389a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389c:	f7fe f952 	bl	8001b44 <HAL_GetTick>
 80038a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a4:	e00a      	b.n	80038bc <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038a6:	f7fe f94d 	bl	8001b44 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d902      	bls.n	80038bc <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	f000 bcd5 	b.w	8004266 <HAL_RCC_OscConfig+0xe02>
 80038bc:	2302      	movs	r3, #2
 80038be:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80038c6:	fa93 f3a3 	rbit	r3, r3
 80038ca:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80038ce:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d2:	fab3 f383 	clz	r3, r3
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	095b      	lsrs	r3, r3, #5
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d102      	bne.n	80038ec <HAL_RCC_OscConfig+0x488>
 80038e6:	4b73      	ldr	r3, [pc, #460]	; (8003ab4 <HAL_RCC_OscConfig+0x650>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	e013      	b.n	8003914 <HAL_RCC_OscConfig+0x4b0>
 80038ec:	2302      	movs	r3, #2
 80038ee:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80038f6:	fa93 f3a3 	rbit	r3, r3
 80038fa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80038fe:	2302      	movs	r3, #2
 8003900:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003904:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003908:	fa93 f3a3 	rbit	r3, r3
 800390c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003910:	4b68      	ldr	r3, [pc, #416]	; (8003ab4 <HAL_RCC_OscConfig+0x650>)
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	2202      	movs	r2, #2
 8003916:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800391a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800391e:	fa92 f2a2 	rbit	r2, r2
 8003922:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003926:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800392a:	fab2 f282 	clz	r2, r2
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	f042 0220 	orr.w	r2, r2, #32
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	f002 021f 	and.w	r2, r2, #31
 800393a:	2101      	movs	r1, #1
 800393c:	fa01 f202 	lsl.w	r2, r1, r2
 8003940:	4013      	ands	r3, r2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0af      	beq.n	80038a6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003946:	4b5b      	ldr	r3, [pc, #364]	; (8003ab4 <HAL_RCC_OscConfig+0x650>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800394e:	1d3b      	adds	r3, r7, #4
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	21f8      	movs	r1, #248	; 0xf8
 8003956:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800395e:	fa91 f1a1 	rbit	r1, r1
 8003962:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003966:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800396a:	fab1 f181 	clz	r1, r1
 800396e:	b2c9      	uxtb	r1, r1
 8003970:	408b      	lsls	r3, r1
 8003972:	4950      	ldr	r1, [pc, #320]	; (8003ab4 <HAL_RCC_OscConfig+0x650>)
 8003974:	4313      	orrs	r3, r2
 8003976:	600b      	str	r3, [r1, #0]
 8003978:	e06a      	b.n	8003a50 <HAL_RCC_OscConfig+0x5ec>
 800397a:	2301      	movs	r3, #1
 800397c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003980:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003984:	fa93 f3a3 	rbit	r3, r3
 8003988:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800398c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003990:	fab3 f383 	clz	r3, r3
 8003994:	b2db      	uxtb	r3, r3
 8003996:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800399a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	461a      	mov	r2, r3
 80039a2:	2300      	movs	r3, #0
 80039a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a6:	f7fe f8cd 	bl	8001b44 <HAL_GetTick>
 80039aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ae:	e00a      	b.n	80039c6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039b0:	f7fe f8c8 	bl	8001b44 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d902      	bls.n	80039c6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	f000 bc50 	b.w	8004266 <HAL_RCC_OscConfig+0xe02>
 80039c6:	2302      	movs	r3, #2
 80039c8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80039d0:	fa93 f3a3 	rbit	r3, r3
 80039d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80039d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039dc:	fab3 f383 	clz	r3, r3
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	095b      	lsrs	r3, r3, #5
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	f043 0301 	orr.w	r3, r3, #1
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d102      	bne.n	80039f6 <HAL_RCC_OscConfig+0x592>
 80039f0:	4b30      	ldr	r3, [pc, #192]	; (8003ab4 <HAL_RCC_OscConfig+0x650>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	e013      	b.n	8003a1e <HAL_RCC_OscConfig+0x5ba>
 80039f6:	2302      	movs	r3, #2
 80039f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003a00:	fa93 f3a3 	rbit	r3, r3
 8003a04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003a08:	2302      	movs	r3, #2
 8003a0a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003a0e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a12:	fa93 f3a3 	rbit	r3, r3
 8003a16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003a1a:	4b26      	ldr	r3, [pc, #152]	; (8003ab4 <HAL_RCC_OscConfig+0x650>)
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003a24:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003a28:	fa92 f2a2 	rbit	r2, r2
 8003a2c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003a30:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003a34:	fab2 f282 	clz	r2, r2
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	f042 0220 	orr.w	r2, r2, #32
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	f002 021f 	and.w	r2, r2, #31
 8003a44:	2101      	movs	r1, #1
 8003a46:	fa01 f202 	lsl.w	r2, r1, r2
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1af      	bne.n	80039b0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a50:	1d3b      	adds	r3, r7, #4
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 80da 	beq.w	8003c14 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a60:	1d3b      	adds	r3, r7, #4
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d069      	beq.n	8003b3e <HAL_RCC_OscConfig+0x6da>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a70:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003a74:	fa93 f3a3 	rbit	r3, r3
 8003a78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a80:	fab3 f383 	clz	r3, r3
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	461a      	mov	r2, r3
 8003a88:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <HAL_RCC_OscConfig+0x654>)
 8003a8a:	4413      	add	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	461a      	mov	r2, r3
 8003a90:	2301      	movs	r3, #1
 8003a92:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a94:	f7fe f856 	bl	8001b44 <HAL_GetTick>
 8003a98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a9c:	e00e      	b.n	8003abc <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a9e:	f7fe f851 	bl	8001b44 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d906      	bls.n	8003abc <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e3d9      	b.n	8004266 <HAL_RCC_OscConfig+0xe02>
 8003ab2:	bf00      	nop
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	10908120 	.word	0x10908120
 8003abc:	2302      	movs	r3, #2
 8003abe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003ac6:	fa93 f3a3 	rbit	r3, r3
 8003aca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003ace:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	fa93 f2a3 	rbit	r2, r3
 8003ae0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003aea:	2202      	movs	r2, #2
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	fa93 f2a3 	rbit	r2, r3
 8003af8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003afc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003afe:	4ba5      	ldr	r3, [pc, #660]	; (8003d94 <HAL_RCC_OscConfig+0x930>)
 8003b00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b02:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003b06:	2102      	movs	r1, #2
 8003b08:	6019      	str	r1, [r3, #0]
 8003b0a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	fa93 f1a3 	rbit	r1, r3
 8003b14:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003b18:	6019      	str	r1, [r3, #0]
  return result;
 8003b1a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	fab3 f383 	clz	r3, r3
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	2101      	movs	r1, #1
 8003b32:	fa01 f303 	lsl.w	r3, r1, r3
 8003b36:	4013      	ands	r3, r2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0b0      	beq.n	8003a9e <HAL_RCC_OscConfig+0x63a>
 8003b3c:	e06a      	b.n	8003c14 <HAL_RCC_OscConfig+0x7b0>
 8003b3e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003b42:	2201      	movs	r2, #1
 8003b44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b46:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	fa93 f2a3 	rbit	r2, r3
 8003b50:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003b54:	601a      	str	r2, [r3, #0]
  return result;
 8003b56:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003b5a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b5c:	fab3 f383 	clz	r3, r3
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	461a      	mov	r2, r3
 8003b64:	4b8c      	ldr	r3, [pc, #560]	; (8003d98 <HAL_RCC_OscConfig+0x934>)
 8003b66:	4413      	add	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b70:	f7fd ffe8 	bl	8001b44 <HAL_GetTick>
 8003b74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b78:	e009      	b.n	8003b8e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b7a:	f7fd ffe3 	bl	8001b44 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e36b      	b.n	8004266 <HAL_RCC_OscConfig+0xe02>
 8003b8e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003b92:	2202      	movs	r2, #2
 8003b94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b96:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	fa93 f2a3 	rbit	r2, r3
 8003ba0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003baa:	2202      	movs	r2, #2
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	fa93 f2a3 	rbit	r2, r3
 8003bb8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	fa93 f2a3 	rbit	r2, r3
 8003bd0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003bd4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd6:	4b6f      	ldr	r3, [pc, #444]	; (8003d94 <HAL_RCC_OscConfig+0x930>)
 8003bd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bda:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003bde:	2102      	movs	r1, #2
 8003be0:	6019      	str	r1, [r3, #0]
 8003be2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	fa93 f1a3 	rbit	r1, r3
 8003bec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003bf0:	6019      	str	r1, [r3, #0]
  return result;
 8003bf2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	fab3 f383 	clz	r3, r3
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	f003 031f 	and.w	r3, r3, #31
 8003c08:	2101      	movs	r1, #1
 8003c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1b2      	bne.n	8003b7a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c14:	1d3b      	adds	r3, r7, #4
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0304 	and.w	r3, r3, #4
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 8158 	beq.w	8003ed4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c24:	2300      	movs	r3, #0
 8003c26:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c2a:	4b5a      	ldr	r3, [pc, #360]	; (8003d94 <HAL_RCC_OscConfig+0x930>)
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d112      	bne.n	8003c5c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c36:	4b57      	ldr	r3, [pc, #348]	; (8003d94 <HAL_RCC_OscConfig+0x930>)
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	4a56      	ldr	r2, [pc, #344]	; (8003d94 <HAL_RCC_OscConfig+0x930>)
 8003c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c40:	61d3      	str	r3, [r2, #28]
 8003c42:	4b54      	ldr	r3, [pc, #336]	; (8003d94 <HAL_RCC_OscConfig+0x930>)
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003c4a:	f107 0308 	add.w	r3, r7, #8
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	f107 0308 	add.w	r3, r7, #8
 8003c54:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003c56:	2301      	movs	r3, #1
 8003c58:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5c:	4b4f      	ldr	r3, [pc, #316]	; (8003d9c <HAL_RCC_OscConfig+0x938>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d11a      	bne.n	8003c9e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c68:	4b4c      	ldr	r3, [pc, #304]	; (8003d9c <HAL_RCC_OscConfig+0x938>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a4b      	ldr	r2, [pc, #300]	; (8003d9c <HAL_RCC_OscConfig+0x938>)
 8003c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c72:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c74:	f7fd ff66 	bl	8001b44 <HAL_GetTick>
 8003c78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7c:	e009      	b.n	8003c92 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c7e:	f7fd ff61 	bl	8001b44 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	; 0x64
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e2e9      	b.n	8004266 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c92:	4b42      	ldr	r3, [pc, #264]	; (8003d9c <HAL_RCC_OscConfig+0x938>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0ef      	beq.n	8003c7e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c9e:	1d3b      	adds	r3, r7, #4
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d106      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x852>
 8003ca8:	4b3a      	ldr	r3, [pc, #232]	; (8003d94 <HAL_RCC_OscConfig+0x930>)
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	4a39      	ldr	r2, [pc, #228]	; (8003d94 <HAL_RCC_OscConfig+0x930>)
 8003cae:	f043 0301 	orr.w	r3, r3, #1
 8003cb2:	6213      	str	r3, [r2, #32]
 8003cb4:	e02f      	b.n	8003d16 <HAL_RCC_OscConfig+0x8b2>
 8003cb6:	1d3b      	adds	r3, r7, #4
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10c      	bne.n	8003cda <HAL_RCC_OscConfig+0x876>
 8003cc0:	4b34      	ldr	r3, [pc, #208]	; (8003d94 <HAL_RCC_OscConfig+0x930>)
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	4a33      	ldr	r2, [pc, #204]	; (8003d94 <HAL_RCC_OscConfig+0x930>)
 8003cc6:	f023 0301 	bic.w	r3, r3, #1
 8003cca:	6213      	str	r3, [r2, #32]
 8003ccc:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <HAL_RCC_OscConfig+0x930>)
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	4a30      	ldr	r2, [pc, #192]	; (8003d94 <HAL_RCC_OscConfig+0x930>)
 8003cd2:	f023 0304 	bic.w	r3, r3, #4
 8003cd6:	6213      	str	r3, [r2, #32]
 8003cd8:	e01d      	b.n	8003d16 <HAL_RCC_OscConfig+0x8b2>
 8003cda:	1d3b      	adds	r3, r7, #4
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	2b05      	cmp	r3, #5
 8003ce2:	d10c      	bne.n	8003cfe <HAL_RCC_OscConfig+0x89a>
 8003ce4:	4b2b      	ldr	r3, [pc, #172]	; (8003d94 <HAL_RCC_OscConfig+0x930>)
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	4a2a      	ldr	r2, [pc, #168]	; (8003d94 <HAL_RCC_OscConfig+0x930>)
 8003cea:	f043 0304 	orr.w	r3, r3, #4
 8003cee:	6213      	str	r3, [r2, #32]
 8003cf0:	4b28      	ldr	r3, [pc, #160]	; (8003d94 <HAL_RCC_OscConfig+0x930>)
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	4a27      	ldr	r2, [pc, #156]	; (8003d94 <HAL_RCC_OscConfig+0x930>)
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	6213      	str	r3, [r2, #32]
 8003cfc:	e00b      	b.n	8003d16 <HAL_RCC_OscConfig+0x8b2>
 8003cfe:	4b25      	ldr	r3, [pc, #148]	; (8003d94 <HAL_RCC_OscConfig+0x930>)
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	4a24      	ldr	r2, [pc, #144]	; (8003d94 <HAL_RCC_OscConfig+0x930>)
 8003d04:	f023 0301 	bic.w	r3, r3, #1
 8003d08:	6213      	str	r3, [r2, #32]
 8003d0a:	4b22      	ldr	r3, [pc, #136]	; (8003d94 <HAL_RCC_OscConfig+0x930>)
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	4a21      	ldr	r2, [pc, #132]	; (8003d94 <HAL_RCC_OscConfig+0x930>)
 8003d10:	f023 0304 	bic.w	r3, r3, #4
 8003d14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d16:	1d3b      	adds	r3, r7, #4
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d06b      	beq.n	8003df8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d20:	f7fd ff10 	bl	8001b44 <HAL_GetTick>
 8003d24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d28:	e00b      	b.n	8003d42 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d2a:	f7fd ff0b 	bl	8001b44 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e291      	b.n	8004266 <HAL_RCC_OscConfig+0xe02>
 8003d42:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003d46:	2202      	movs	r2, #2
 8003d48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	fa93 f2a3 	rbit	r2, r3
 8003d54:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003d5e:	2202      	movs	r2, #2
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	fa93 f2a3 	rbit	r2, r3
 8003d6c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003d70:	601a      	str	r2, [r3, #0]
  return result;
 8003d72:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003d76:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d78:	fab3 f383 	clz	r3, r3
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	095b      	lsrs	r3, r3, #5
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	f043 0302 	orr.w	r3, r3, #2
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d109      	bne.n	8003da0 <HAL_RCC_OscConfig+0x93c>
 8003d8c:	4b01      	ldr	r3, [pc, #4]	; (8003d94 <HAL_RCC_OscConfig+0x930>)
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	e014      	b.n	8003dbc <HAL_RCC_OscConfig+0x958>
 8003d92:	bf00      	nop
 8003d94:	40021000 	.word	0x40021000
 8003d98:	10908120 	.word	0x10908120
 8003d9c:	40007000 	.word	0x40007000
 8003da0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003da4:	2202      	movs	r2, #2
 8003da6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	fa93 f2a3 	rbit	r2, r3
 8003db2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	4bbb      	ldr	r3, [pc, #748]	; (80040a8 <HAL_RCC_OscConfig+0xc44>)
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003dc0:	2102      	movs	r1, #2
 8003dc2:	6011      	str	r1, [r2, #0]
 8003dc4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003dc8:	6812      	ldr	r2, [r2, #0]
 8003dca:	fa92 f1a2 	rbit	r1, r2
 8003dce:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003dd2:	6011      	str	r1, [r2, #0]
  return result;
 8003dd4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003dd8:	6812      	ldr	r2, [r2, #0]
 8003dda:	fab2 f282 	clz	r2, r2
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	f002 021f 	and.w	r2, r2, #31
 8003dea:	2101      	movs	r1, #1
 8003dec:	fa01 f202 	lsl.w	r2, r1, r2
 8003df0:	4013      	ands	r3, r2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d099      	beq.n	8003d2a <HAL_RCC_OscConfig+0x8c6>
 8003df6:	e063      	b.n	8003ec0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df8:	f7fd fea4 	bl	8001b44 <HAL_GetTick>
 8003dfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e00:	e00b      	b.n	8003e1a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e02:	f7fd fe9f 	bl	8001b44 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e225      	b.n	8004266 <HAL_RCC_OscConfig+0xe02>
 8003e1a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003e1e:	2202      	movs	r2, #2
 8003e20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e22:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	fa93 f2a3 	rbit	r2, r3
 8003e2c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003e36:	2202      	movs	r2, #2
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	fa93 f2a3 	rbit	r2, r3
 8003e44:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003e48:	601a      	str	r2, [r3, #0]
  return result;
 8003e4a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003e4e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e50:	fab3 f383 	clz	r3, r3
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	f043 0302 	orr.w	r3, r3, #2
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d102      	bne.n	8003e6a <HAL_RCC_OscConfig+0xa06>
 8003e64:	4b90      	ldr	r3, [pc, #576]	; (80040a8 <HAL_RCC_OscConfig+0xc44>)
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	e00d      	b.n	8003e86 <HAL_RCC_OscConfig+0xa22>
 8003e6a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003e6e:	2202      	movs	r2, #2
 8003e70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e72:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	fa93 f2a3 	rbit	r2, r3
 8003e7c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	4b89      	ldr	r3, [pc, #548]	; (80040a8 <HAL_RCC_OscConfig+0xc44>)
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003e8a:	2102      	movs	r1, #2
 8003e8c:	6011      	str	r1, [r2, #0]
 8003e8e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003e92:	6812      	ldr	r2, [r2, #0]
 8003e94:	fa92 f1a2 	rbit	r1, r2
 8003e98:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003e9c:	6011      	str	r1, [r2, #0]
  return result;
 8003e9e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	fab2 f282 	clz	r2, r2
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	f002 021f 	and.w	r2, r2, #31
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003eba:	4013      	ands	r3, r2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1a0      	bne.n	8003e02 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ec0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d105      	bne.n	8003ed4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec8:	4b77      	ldr	r3, [pc, #476]	; (80040a8 <HAL_RCC_OscConfig+0xc44>)
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	4a76      	ldr	r2, [pc, #472]	; (80040a8 <HAL_RCC_OscConfig+0xc44>)
 8003ece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ed4:	1d3b      	adds	r3, r7, #4
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 81c2 	beq.w	8004264 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ee0:	4b71      	ldr	r3, [pc, #452]	; (80040a8 <HAL_RCC_OscConfig+0xc44>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f003 030c 	and.w	r3, r3, #12
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	f000 819c 	beq.w	8004226 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eee:	1d3b      	adds	r3, r7, #4
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	f040 8114 	bne.w	8004122 <HAL_RCC_OscConfig+0xcbe>
 8003efa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003efe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f04:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	fa93 f2a3 	rbit	r2, r3
 8003f0e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003f12:	601a      	str	r2, [r3, #0]
  return result;
 8003f14:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003f18:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f1a:	fab3 f383 	clz	r3, r3
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f30:	f7fd fe08 	bl	8001b44 <HAL_GetTick>
 8003f34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f38:	e009      	b.n	8003f4e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f3a:	f7fd fe03 	bl	8001b44 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e18b      	b.n	8004266 <HAL_RCC_OscConfig+0xe02>
 8003f4e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003f52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f58:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	fa93 f2a3 	rbit	r2, r3
 8003f62:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f66:	601a      	str	r2, [r3, #0]
  return result;
 8003f68:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f6c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f6e:	fab3 f383 	clz	r3, r3
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	095b      	lsrs	r3, r3, #5
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	f043 0301 	orr.w	r3, r3, #1
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d102      	bne.n	8003f88 <HAL_RCC_OscConfig+0xb24>
 8003f82:	4b49      	ldr	r3, [pc, #292]	; (80040a8 <HAL_RCC_OscConfig+0xc44>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	e01b      	b.n	8003fc0 <HAL_RCC_OscConfig+0xb5c>
 8003f88:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f92:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	fa93 f2a3 	rbit	r2, r3
 8003f9c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003fa6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	fa93 f2a3 	rbit	r2, r3
 8003fb6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	4b3a      	ldr	r3, [pc, #232]	; (80040a8 <HAL_RCC_OscConfig+0xc44>)
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003fc4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003fc8:	6011      	str	r1, [r2, #0]
 8003fca:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003fce:	6812      	ldr	r2, [r2, #0]
 8003fd0:	fa92 f1a2 	rbit	r1, r2
 8003fd4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003fd8:	6011      	str	r1, [r2, #0]
  return result;
 8003fda:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003fde:	6812      	ldr	r2, [r2, #0]
 8003fe0:	fab2 f282 	clz	r2, r2
 8003fe4:	b2d2      	uxtb	r2, r2
 8003fe6:	f042 0220 	orr.w	r2, r2, #32
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	f002 021f 	and.w	r2, r2, #31
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d19e      	bne.n	8003f3a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ffc:	4b2a      	ldr	r3, [pc, #168]	; (80040a8 <HAL_RCC_OscConfig+0xc44>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004004:	1d3b      	adds	r3, r7, #4
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800400a:	1d3b      	adds	r3, r7, #4
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	430b      	orrs	r3, r1
 8004012:	4925      	ldr	r1, [pc, #148]	; (80040a8 <HAL_RCC_OscConfig+0xc44>)
 8004014:	4313      	orrs	r3, r2
 8004016:	604b      	str	r3, [r1, #4]
 8004018:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800401c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004020:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004022:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	fa93 f2a3 	rbit	r2, r3
 800402c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004030:	601a      	str	r2, [r3, #0]
  return result;
 8004032:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004036:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004038:	fab3 f383 	clz	r3, r3
 800403c:	b2db      	uxtb	r3, r3
 800403e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004042:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	461a      	mov	r2, r3
 800404a:	2301      	movs	r3, #1
 800404c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404e:	f7fd fd79 	bl	8001b44 <HAL_GetTick>
 8004052:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004056:	e009      	b.n	800406c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004058:	f7fd fd74 	bl	8001b44 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e0fc      	b.n	8004266 <HAL_RCC_OscConfig+0xe02>
 800406c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004070:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004074:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004076:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	fa93 f2a3 	rbit	r2, r3
 8004080:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004084:	601a      	str	r2, [r3, #0]
  return result;
 8004086:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800408a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800408c:	fab3 f383 	clz	r3, r3
 8004090:	b2db      	uxtb	r3, r3
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	b2db      	uxtb	r3, r3
 8004096:	f043 0301 	orr.w	r3, r3, #1
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b01      	cmp	r3, #1
 800409e:	d105      	bne.n	80040ac <HAL_RCC_OscConfig+0xc48>
 80040a0:	4b01      	ldr	r3, [pc, #4]	; (80040a8 <HAL_RCC_OscConfig+0xc44>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	e01e      	b.n	80040e4 <HAL_RCC_OscConfig+0xc80>
 80040a6:	bf00      	nop
 80040a8:	40021000 	.word	0x40021000
 80040ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	fa93 f2a3 	rbit	r2, r3
 80040c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80040ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	fa93 f2a3 	rbit	r2, r3
 80040da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	4b63      	ldr	r3, [pc, #396]	; (8004270 <HAL_RCC_OscConfig+0xe0c>)
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80040e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040ec:	6011      	str	r1, [r2, #0]
 80040ee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	fa92 f1a2 	rbit	r1, r2
 80040f8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80040fc:	6011      	str	r1, [r2, #0]
  return result;
 80040fe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004102:	6812      	ldr	r2, [r2, #0]
 8004104:	fab2 f282 	clz	r2, r2
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	f042 0220 	orr.w	r2, r2, #32
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	f002 021f 	and.w	r2, r2, #31
 8004114:	2101      	movs	r1, #1
 8004116:	fa01 f202 	lsl.w	r2, r1, r2
 800411a:	4013      	ands	r3, r2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d09b      	beq.n	8004058 <HAL_RCC_OscConfig+0xbf4>
 8004120:	e0a0      	b.n	8004264 <HAL_RCC_OscConfig+0xe00>
 8004122:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004126:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800412a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	fa93 f2a3 	rbit	r2, r3
 8004136:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800413a:	601a      	str	r2, [r3, #0]
  return result;
 800413c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004140:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004142:	fab3 f383 	clz	r3, r3
 8004146:	b2db      	uxtb	r3, r3
 8004148:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800414c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	461a      	mov	r2, r3
 8004154:	2300      	movs	r3, #0
 8004156:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004158:	f7fd fcf4 	bl	8001b44 <HAL_GetTick>
 800415c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004160:	e009      	b.n	8004176 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004162:	f7fd fcef 	bl	8001b44 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e077      	b.n	8004266 <HAL_RCC_OscConfig+0xe02>
 8004176:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800417a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800417e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004180:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	fa93 f2a3 	rbit	r2, r3
 800418a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800418e:	601a      	str	r2, [r3, #0]
  return result;
 8004190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004194:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004196:	fab3 f383 	clz	r3, r3
 800419a:	b2db      	uxtb	r3, r3
 800419c:	095b      	lsrs	r3, r3, #5
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	f043 0301 	orr.w	r3, r3, #1
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d102      	bne.n	80041b0 <HAL_RCC_OscConfig+0xd4c>
 80041aa:	4b31      	ldr	r3, [pc, #196]	; (8004270 <HAL_RCC_OscConfig+0xe0c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	e01b      	b.n	80041e8 <HAL_RCC_OscConfig+0xd84>
 80041b0:	f107 0320 	add.w	r3, r7, #32
 80041b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ba:	f107 0320 	add.w	r3, r7, #32
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	fa93 f2a3 	rbit	r2, r3
 80041c4:	f107 031c 	add.w	r3, r7, #28
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	f107 0318 	add.w	r3, r7, #24
 80041ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	f107 0318 	add.w	r3, r7, #24
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	fa93 f2a3 	rbit	r2, r3
 80041de:	f107 0314 	add.w	r3, r7, #20
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	4b22      	ldr	r3, [pc, #136]	; (8004270 <HAL_RCC_OscConfig+0xe0c>)
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	f107 0210 	add.w	r2, r7, #16
 80041ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80041f0:	6011      	str	r1, [r2, #0]
 80041f2:	f107 0210 	add.w	r2, r7, #16
 80041f6:	6812      	ldr	r2, [r2, #0]
 80041f8:	fa92 f1a2 	rbit	r1, r2
 80041fc:	f107 020c 	add.w	r2, r7, #12
 8004200:	6011      	str	r1, [r2, #0]
  return result;
 8004202:	f107 020c 	add.w	r2, r7, #12
 8004206:	6812      	ldr	r2, [r2, #0]
 8004208:	fab2 f282 	clz	r2, r2
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	f042 0220 	orr.w	r2, r2, #32
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	f002 021f 	and.w	r2, r2, #31
 8004218:	2101      	movs	r1, #1
 800421a:	fa01 f202 	lsl.w	r2, r1, r2
 800421e:	4013      	ands	r3, r2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d19e      	bne.n	8004162 <HAL_RCC_OscConfig+0xcfe>
 8004224:	e01e      	b.n	8004264 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004226:	1d3b      	adds	r3, r7, #4
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e018      	b.n	8004266 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004234:	4b0e      	ldr	r3, [pc, #56]	; (8004270 <HAL_RCC_OscConfig+0xe0c>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800423c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004240:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004244:	1d3b      	adds	r3, r7, #4
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	429a      	cmp	r2, r3
 800424c:	d108      	bne.n	8004260 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800424e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004252:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004256:	1d3b      	adds	r3, r7, #4
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800425c:	429a      	cmp	r2, r3
 800425e:	d001      	beq.n	8004264 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e000      	b.n	8004266 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40021000 	.word	0x40021000

08004274 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b09e      	sub	sp, #120	; 0x78
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800427e:	2300      	movs	r3, #0
 8004280:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e162      	b.n	8004552 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800428c:	4b90      	ldr	r3, [pc, #576]	; (80044d0 <HAL_RCC_ClockConfig+0x25c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d910      	bls.n	80042bc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429a:	4b8d      	ldr	r3, [pc, #564]	; (80044d0 <HAL_RCC_ClockConfig+0x25c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f023 0207 	bic.w	r2, r3, #7
 80042a2:	498b      	ldr	r1, [pc, #556]	; (80044d0 <HAL_RCC_ClockConfig+0x25c>)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042aa:	4b89      	ldr	r3, [pc, #548]	; (80044d0 <HAL_RCC_ClockConfig+0x25c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d001      	beq.n	80042bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e14a      	b.n	8004552 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d008      	beq.n	80042da <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042c8:	4b82      	ldr	r3, [pc, #520]	; (80044d4 <HAL_RCC_ClockConfig+0x260>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	497f      	ldr	r1, [pc, #508]	; (80044d4 <HAL_RCC_ClockConfig+0x260>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f000 80dc 	beq.w	80044a0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d13c      	bne.n	800436a <HAL_RCC_ClockConfig+0xf6>
 80042f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042f4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042f8:	fa93 f3a3 	rbit	r3, r3
 80042fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80042fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004300:	fab3 f383 	clz	r3, r3
 8004304:	b2db      	uxtb	r3, r3
 8004306:	095b      	lsrs	r3, r3, #5
 8004308:	b2db      	uxtb	r3, r3
 800430a:	f043 0301 	orr.w	r3, r3, #1
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b01      	cmp	r3, #1
 8004312:	d102      	bne.n	800431a <HAL_RCC_ClockConfig+0xa6>
 8004314:	4b6f      	ldr	r3, [pc, #444]	; (80044d4 <HAL_RCC_ClockConfig+0x260>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	e00f      	b.n	800433a <HAL_RCC_ClockConfig+0xc6>
 800431a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800431e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004320:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004322:	fa93 f3a3 	rbit	r3, r3
 8004326:	667b      	str	r3, [r7, #100]	; 0x64
 8004328:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800432c:	663b      	str	r3, [r7, #96]	; 0x60
 800432e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004330:	fa93 f3a3 	rbit	r3, r3
 8004334:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004336:	4b67      	ldr	r3, [pc, #412]	; (80044d4 <HAL_RCC_ClockConfig+0x260>)
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800433e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004340:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004342:	fa92 f2a2 	rbit	r2, r2
 8004346:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004348:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800434a:	fab2 f282 	clz	r2, r2
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	f042 0220 	orr.w	r2, r2, #32
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	f002 021f 	and.w	r2, r2, #31
 800435a:	2101      	movs	r1, #1
 800435c:	fa01 f202 	lsl.w	r2, r1, r2
 8004360:	4013      	ands	r3, r2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d17b      	bne.n	800445e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e0f3      	b.n	8004552 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2b02      	cmp	r3, #2
 8004370:	d13c      	bne.n	80043ec <HAL_RCC_ClockConfig+0x178>
 8004372:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004376:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800437a:	fa93 f3a3 	rbit	r3, r3
 800437e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004382:	fab3 f383 	clz	r3, r3
 8004386:	b2db      	uxtb	r3, r3
 8004388:	095b      	lsrs	r3, r3, #5
 800438a:	b2db      	uxtb	r3, r3
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b01      	cmp	r3, #1
 8004394:	d102      	bne.n	800439c <HAL_RCC_ClockConfig+0x128>
 8004396:	4b4f      	ldr	r3, [pc, #316]	; (80044d4 <HAL_RCC_ClockConfig+0x260>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	e00f      	b.n	80043bc <HAL_RCC_ClockConfig+0x148>
 800439c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043a4:	fa93 f3a3 	rbit	r3, r3
 80043a8:	647b      	str	r3, [r7, #68]	; 0x44
 80043aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043ae:	643b      	str	r3, [r7, #64]	; 0x40
 80043b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043b2:	fa93 f3a3 	rbit	r3, r3
 80043b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043b8:	4b46      	ldr	r3, [pc, #280]	; (80044d4 <HAL_RCC_ClockConfig+0x260>)
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043c0:	63ba      	str	r2, [r7, #56]	; 0x38
 80043c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043c4:	fa92 f2a2 	rbit	r2, r2
 80043c8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80043ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043cc:	fab2 f282 	clz	r2, r2
 80043d0:	b2d2      	uxtb	r2, r2
 80043d2:	f042 0220 	orr.w	r2, r2, #32
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	f002 021f 	and.w	r2, r2, #31
 80043dc:	2101      	movs	r1, #1
 80043de:	fa01 f202 	lsl.w	r2, r1, r2
 80043e2:	4013      	ands	r3, r2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d13a      	bne.n	800445e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e0b2      	b.n	8004552 <HAL_RCC_ClockConfig+0x2de>
 80043ec:	2302      	movs	r3, #2
 80043ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f2:	fa93 f3a3 	rbit	r3, r3
 80043f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80043f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043fa:	fab3 f383 	clz	r3, r3
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	095b      	lsrs	r3, r3, #5
 8004402:	b2db      	uxtb	r3, r3
 8004404:	f043 0301 	orr.w	r3, r3, #1
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b01      	cmp	r3, #1
 800440c:	d102      	bne.n	8004414 <HAL_RCC_ClockConfig+0x1a0>
 800440e:	4b31      	ldr	r3, [pc, #196]	; (80044d4 <HAL_RCC_ClockConfig+0x260>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	e00d      	b.n	8004430 <HAL_RCC_ClockConfig+0x1bc>
 8004414:	2302      	movs	r3, #2
 8004416:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441a:	fa93 f3a3 	rbit	r3, r3
 800441e:	627b      	str	r3, [r7, #36]	; 0x24
 8004420:	2302      	movs	r3, #2
 8004422:	623b      	str	r3, [r7, #32]
 8004424:	6a3b      	ldr	r3, [r7, #32]
 8004426:	fa93 f3a3 	rbit	r3, r3
 800442a:	61fb      	str	r3, [r7, #28]
 800442c:	4b29      	ldr	r3, [pc, #164]	; (80044d4 <HAL_RCC_ClockConfig+0x260>)
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	2202      	movs	r2, #2
 8004432:	61ba      	str	r2, [r7, #24]
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	fa92 f2a2 	rbit	r2, r2
 800443a:	617a      	str	r2, [r7, #20]
  return result;
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	fab2 f282 	clz	r2, r2
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	f042 0220 	orr.w	r2, r2, #32
 8004448:	b2d2      	uxtb	r2, r2
 800444a:	f002 021f 	and.w	r2, r2, #31
 800444e:	2101      	movs	r1, #1
 8004450:	fa01 f202 	lsl.w	r2, r1, r2
 8004454:	4013      	ands	r3, r2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e079      	b.n	8004552 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800445e:	4b1d      	ldr	r3, [pc, #116]	; (80044d4 <HAL_RCC_ClockConfig+0x260>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f023 0203 	bic.w	r2, r3, #3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	491a      	ldr	r1, [pc, #104]	; (80044d4 <HAL_RCC_ClockConfig+0x260>)
 800446c:	4313      	orrs	r3, r2
 800446e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004470:	f7fd fb68 	bl	8001b44 <HAL_GetTick>
 8004474:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004476:	e00a      	b.n	800448e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004478:	f7fd fb64 	bl	8001b44 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	f241 3288 	movw	r2, #5000	; 0x1388
 8004486:	4293      	cmp	r3, r2
 8004488:	d901      	bls.n	800448e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e061      	b.n	8004552 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800448e:	4b11      	ldr	r3, [pc, #68]	; (80044d4 <HAL_RCC_ClockConfig+0x260>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f003 020c 	and.w	r2, r3, #12
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	429a      	cmp	r2, r3
 800449e:	d1eb      	bne.n	8004478 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044a0:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <HAL_RCC_ClockConfig+0x25c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d214      	bcs.n	80044d8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ae:	4b08      	ldr	r3, [pc, #32]	; (80044d0 <HAL_RCC_ClockConfig+0x25c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f023 0207 	bic.w	r2, r3, #7
 80044b6:	4906      	ldr	r1, [pc, #24]	; (80044d0 <HAL_RCC_ClockConfig+0x25c>)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044be:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <HAL_RCC_ClockConfig+0x25c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d005      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e040      	b.n	8004552 <HAL_RCC_ClockConfig+0x2de>
 80044d0:	40022000 	.word	0x40022000
 80044d4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d008      	beq.n	80044f6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044e4:	4b1d      	ldr	r3, [pc, #116]	; (800455c <HAL_RCC_ClockConfig+0x2e8>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	491a      	ldr	r1, [pc, #104]	; (800455c <HAL_RCC_ClockConfig+0x2e8>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0308 	and.w	r3, r3, #8
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d009      	beq.n	8004516 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004502:	4b16      	ldr	r3, [pc, #88]	; (800455c <HAL_RCC_ClockConfig+0x2e8>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	4912      	ldr	r1, [pc, #72]	; (800455c <HAL_RCC_ClockConfig+0x2e8>)
 8004512:	4313      	orrs	r3, r2
 8004514:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004516:	f000 f829 	bl	800456c <HAL_RCC_GetSysClockFreq>
 800451a:	4601      	mov	r1, r0
 800451c:	4b0f      	ldr	r3, [pc, #60]	; (800455c <HAL_RCC_ClockConfig+0x2e8>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004524:	22f0      	movs	r2, #240	; 0xf0
 8004526:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	fa92 f2a2 	rbit	r2, r2
 800452e:	60fa      	str	r2, [r7, #12]
  return result;
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	fab2 f282 	clz	r2, r2
 8004536:	b2d2      	uxtb	r2, r2
 8004538:	40d3      	lsrs	r3, r2
 800453a:	4a09      	ldr	r2, [pc, #36]	; (8004560 <HAL_RCC_ClockConfig+0x2ec>)
 800453c:	5cd3      	ldrb	r3, [r2, r3]
 800453e:	fa21 f303 	lsr.w	r3, r1, r3
 8004542:	4a08      	ldr	r2, [pc, #32]	; (8004564 <HAL_RCC_ClockConfig+0x2f0>)
 8004544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004546:	4b08      	ldr	r3, [pc, #32]	; (8004568 <HAL_RCC_ClockConfig+0x2f4>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4618      	mov	r0, r3
 800454c:	f7fd fab6 	bl	8001abc <HAL_InitTick>
  
  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3778      	adds	r7, #120	; 0x78
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	40021000 	.word	0x40021000
 8004560:	08008e30 	.word	0x08008e30
 8004564:	20000000 	.word	0x20000000
 8004568:	20000004 	.word	0x20000004

0800456c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800456c:	b480      	push	{r7}
 800456e:	b08b      	sub	sp, #44	; 0x2c
 8004570:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	61fb      	str	r3, [r7, #28]
 8004576:	2300      	movs	r3, #0
 8004578:	61bb      	str	r3, [r7, #24]
 800457a:	2300      	movs	r3, #0
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
 800457e:	2300      	movs	r3, #0
 8004580:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004586:	4b29      	ldr	r3, [pc, #164]	; (800462c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f003 030c 	and.w	r3, r3, #12
 8004592:	2b04      	cmp	r3, #4
 8004594:	d002      	beq.n	800459c <HAL_RCC_GetSysClockFreq+0x30>
 8004596:	2b08      	cmp	r3, #8
 8004598:	d003      	beq.n	80045a2 <HAL_RCC_GetSysClockFreq+0x36>
 800459a:	e03c      	b.n	8004616 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800459c:	4b24      	ldr	r3, [pc, #144]	; (8004630 <HAL_RCC_GetSysClockFreq+0xc4>)
 800459e:	623b      	str	r3, [r7, #32]
      break;
 80045a0:	e03c      	b.n	800461c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80045a8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80045ac:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	fa92 f2a2 	rbit	r2, r2
 80045b4:	607a      	str	r2, [r7, #4]
  return result;
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	fab2 f282 	clz	r2, r2
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	40d3      	lsrs	r3, r2
 80045c0:	4a1c      	ldr	r2, [pc, #112]	; (8004634 <HAL_RCC_GetSysClockFreq+0xc8>)
 80045c2:	5cd3      	ldrb	r3, [r2, r3]
 80045c4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80045c6:	4b19      	ldr	r3, [pc, #100]	; (800462c <HAL_RCC_GetSysClockFreq+0xc0>)
 80045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	220f      	movs	r2, #15
 80045d0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	fa92 f2a2 	rbit	r2, r2
 80045d8:	60fa      	str	r2, [r7, #12]
  return result;
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	fab2 f282 	clz	r2, r2
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	40d3      	lsrs	r3, r2
 80045e4:	4a14      	ldr	r2, [pc, #80]	; (8004638 <HAL_RCC_GetSysClockFreq+0xcc>)
 80045e6:	5cd3      	ldrb	r3, [r2, r3]
 80045e8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d008      	beq.n	8004606 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80045f4:	4a0e      	ldr	r2, [pc, #56]	; (8004630 <HAL_RCC_GetSysClockFreq+0xc4>)
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	fb02 f303 	mul.w	r3, r2, r3
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
 8004604:	e004      	b.n	8004610 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	4a0c      	ldr	r2, [pc, #48]	; (800463c <HAL_RCC_GetSysClockFreq+0xd0>)
 800460a:	fb02 f303 	mul.w	r3, r2, r3
 800460e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	623b      	str	r3, [r7, #32]
      break;
 8004614:	e002      	b.n	800461c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004616:	4b06      	ldr	r3, [pc, #24]	; (8004630 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004618:	623b      	str	r3, [r7, #32]
      break;
 800461a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800461c:	6a3b      	ldr	r3, [r7, #32]
}
 800461e:	4618      	mov	r0, r3
 8004620:	372c      	adds	r7, #44	; 0x2c
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	40021000 	.word	0x40021000
 8004630:	007a1200 	.word	0x007a1200
 8004634:	08008e40 	.word	0x08008e40
 8004638:	08008e50 	.word	0x08008e50
 800463c:	003d0900 	.word	0x003d0900

08004640 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b092      	sub	sp, #72	; 0x48
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800464c:	2300      	movs	r3, #0
 800464e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004650:	2300      	movs	r3, #0
 8004652:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 80cd 	beq.w	80047fe <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004664:	4b86      	ldr	r3, [pc, #536]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10e      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004670:	4b83      	ldr	r3, [pc, #524]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	4a82      	ldr	r2, [pc, #520]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467a:	61d3      	str	r3, [r2, #28]
 800467c:	4b80      	ldr	r3, [pc, #512]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800467e:	69db      	ldr	r3, [r3, #28]
 8004680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004684:	60bb      	str	r3, [r7, #8]
 8004686:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004688:	2301      	movs	r3, #1
 800468a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800468e:	4b7d      	ldr	r3, [pc, #500]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004696:	2b00      	cmp	r3, #0
 8004698:	d118      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800469a:	4b7a      	ldr	r3, [pc, #488]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a79      	ldr	r2, [pc, #484]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80046a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046a6:	f7fd fa4d 	bl	8001b44 <HAL_GetTick>
 80046aa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ac:	e008      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ae:	f7fd fa49 	bl	8001b44 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b64      	cmp	r3, #100	; 0x64
 80046ba:	d901      	bls.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e0db      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c0:	4b70      	ldr	r3, [pc, #448]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0f0      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046cc:	4b6c      	ldr	r3, [pc, #432]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d07d      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d076      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046ea:	4b65      	ldr	r3, [pc, #404]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046f8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fc:	fa93 f3a3 	rbit	r3, r3
 8004700:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004704:	fab3 f383 	clz	r3, r3
 8004708:	b2db      	uxtb	r3, r3
 800470a:	461a      	mov	r2, r3
 800470c:	4b5e      	ldr	r3, [pc, #376]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800470e:	4413      	add	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	461a      	mov	r2, r3
 8004714:	2301      	movs	r3, #1
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800471c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004720:	fa93 f3a3 	rbit	r3, r3
 8004724:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004728:	fab3 f383 	clz	r3, r3
 800472c:	b2db      	uxtb	r3, r3
 800472e:	461a      	mov	r2, r3
 8004730:	4b55      	ldr	r3, [pc, #340]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004732:	4413      	add	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	461a      	mov	r2, r3
 8004738:	2300      	movs	r3, #0
 800473a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800473c:	4a50      	ldr	r2, [pc, #320]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800473e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004740:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	d045      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474c:	f7fd f9fa 	bl	8001b44 <HAL_GetTick>
 8004750:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004752:	e00a      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004754:	f7fd f9f6 	bl	8001b44 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004762:	4293      	cmp	r3, r2
 8004764:	d901      	bls.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e086      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800476a:	2302      	movs	r3, #2
 800476c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004770:	fa93 f3a3 	rbit	r3, r3
 8004774:	627b      	str	r3, [r7, #36]	; 0x24
 8004776:	2302      	movs	r3, #2
 8004778:	623b      	str	r3, [r7, #32]
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	fa93 f3a3 	rbit	r3, r3
 8004780:	61fb      	str	r3, [r7, #28]
  return result;
 8004782:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004784:	fab3 f383 	clz	r3, r3
 8004788:	b2db      	uxtb	r3, r3
 800478a:	095b      	lsrs	r3, r3, #5
 800478c:	b2db      	uxtb	r3, r3
 800478e:	f043 0302 	orr.w	r3, r3, #2
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d102      	bne.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004798:	4b39      	ldr	r3, [pc, #228]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	e007      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800479e:	2302      	movs	r3, #2
 80047a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	fa93 f3a3 	rbit	r3, r3
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	4b35      	ldr	r3, [pc, #212]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	2202      	movs	r2, #2
 80047b0:	613a      	str	r2, [r7, #16]
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	fa92 f2a2 	rbit	r2, r2
 80047b8:	60fa      	str	r2, [r7, #12]
  return result;
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	fab2 f282 	clz	r2, r2
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047c6:	b2d2      	uxtb	r2, r2
 80047c8:	f002 021f 	and.w	r2, r2, #31
 80047cc:	2101      	movs	r1, #1
 80047ce:	fa01 f202 	lsl.w	r2, r1, r2
 80047d2:	4013      	ands	r3, r2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0bd      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80047d8:	4b29      	ldr	r3, [pc, #164]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	4926      	ldr	r1, [pc, #152]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d105      	bne.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047f2:	4b23      	ldr	r3, [pc, #140]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	4a22      	ldr	r2, [pc, #136]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047fc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d008      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800480a:	4b1d      	ldr	r3, [pc, #116]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480e:	f023 0203 	bic.w	r2, r3, #3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	491a      	ldr	r1, [pc, #104]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004818:	4313      	orrs	r3, r2
 800481a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0320 	and.w	r3, r3, #32
 8004824:	2b00      	cmp	r3, #0
 8004826:	d008      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004828:	4b15      	ldr	r3, [pc, #84]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482c:	f023 0210 	bic.w	r2, r3, #16
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	4912      	ldr	r1, [pc, #72]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004836:	4313      	orrs	r3, r2
 8004838:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004842:	2b00      	cmp	r3, #0
 8004844:	d008      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004846:	4b0e      	ldr	r3, [pc, #56]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	490b      	ldr	r1, [pc, #44]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004854:	4313      	orrs	r3, r2
 8004856:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d008      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004864:	4b06      	ldr	r3, [pc, #24]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	4903      	ldr	r1, [pc, #12]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004872:	4313      	orrs	r3, r2
 8004874:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3748      	adds	r7, #72	; 0x48
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40021000 	.word	0x40021000
 8004884:	40007000 	.word	0x40007000
 8004888:	10908100 	.word	0x10908100

0800488c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b01      	cmp	r3, #1
 800489e:	d001      	beq.n	80048a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e040      	b.n	8004926 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0201 	orr.w	r2, r2, #1
 80048ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a1c      	ldr	r2, [pc, #112]	; (8004934 <HAL_TIM_Base_Start_IT+0xa8>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00e      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x58>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ce:	d009      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x58>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a18      	ldr	r2, [pc, #96]	; (8004938 <HAL_TIM_Base_Start_IT+0xac>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d004      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x58>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a17      	ldr	r2, [pc, #92]	; (800493c <HAL_TIM_Base_Start_IT+0xb0>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d115      	bne.n	8004910 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	4b15      	ldr	r3, [pc, #84]	; (8004940 <HAL_TIM_Base_Start_IT+0xb4>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2b06      	cmp	r3, #6
 80048f4:	d015      	beq.n	8004922 <HAL_TIM_Base_Start_IT+0x96>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048fc:	d011      	beq.n	8004922 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f042 0201 	orr.w	r2, r2, #1
 800490c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490e:	e008      	b.n	8004922 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	e000      	b.n	8004924 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004922:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	40012c00 	.word	0x40012c00
 8004938:	40000400 	.word	0x40000400
 800493c:	40014000 	.word	0x40014000
 8004940:	00010007 	.word	0x00010007

08004944 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e049      	b.n	80049ea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d106      	bne.n	8004970 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fc fee0 	bl	8001730 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	3304      	adds	r3, #4
 8004980:	4619      	mov	r1, r3
 8004982:	4610      	mov	r0, r2
 8004984:	f000 fa36 	bl	8004df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
	...

080049f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d109      	bne.n	8004a18 <HAL_TIM_PWM_Start+0x24>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	bf14      	ite	ne
 8004a10:	2301      	movne	r3, #1
 8004a12:	2300      	moveq	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	e03c      	b.n	8004a92 <HAL_TIM_PWM_Start+0x9e>
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	d109      	bne.n	8004a32 <HAL_TIM_PWM_Start+0x3e>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	bf14      	ite	ne
 8004a2a:	2301      	movne	r3, #1
 8004a2c:	2300      	moveq	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	e02f      	b.n	8004a92 <HAL_TIM_PWM_Start+0x9e>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d109      	bne.n	8004a4c <HAL_TIM_PWM_Start+0x58>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	bf14      	ite	ne
 8004a44:	2301      	movne	r3, #1
 8004a46:	2300      	moveq	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	e022      	b.n	8004a92 <HAL_TIM_PWM_Start+0x9e>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2b0c      	cmp	r3, #12
 8004a50:	d109      	bne.n	8004a66 <HAL_TIM_PWM_Start+0x72>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	bf14      	ite	ne
 8004a5e:	2301      	movne	r3, #1
 8004a60:	2300      	moveq	r3, #0
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	e015      	b.n	8004a92 <HAL_TIM_PWM_Start+0x9e>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b10      	cmp	r3, #16
 8004a6a:	d109      	bne.n	8004a80 <HAL_TIM_PWM_Start+0x8c>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	bf14      	ite	ne
 8004a78:	2301      	movne	r3, #1
 8004a7a:	2300      	moveq	r3, #0
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	e008      	b.n	8004a92 <HAL_TIM_PWM_Start+0x9e>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	bf14      	ite	ne
 8004a8c:	2301      	movne	r3, #1
 8004a8e:	2300      	moveq	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e088      	b.n	8004bac <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d104      	bne.n	8004aaa <HAL_TIM_PWM_Start+0xb6>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aa8:	e023      	b.n	8004af2 <HAL_TIM_PWM_Start+0xfe>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d104      	bne.n	8004aba <HAL_TIM_PWM_Start+0xc6>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ab8:	e01b      	b.n	8004af2 <HAL_TIM_PWM_Start+0xfe>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d104      	bne.n	8004aca <HAL_TIM_PWM_Start+0xd6>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ac8:	e013      	b.n	8004af2 <HAL_TIM_PWM_Start+0xfe>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b0c      	cmp	r3, #12
 8004ace:	d104      	bne.n	8004ada <HAL_TIM_PWM_Start+0xe6>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ad8:	e00b      	b.n	8004af2 <HAL_TIM_PWM_Start+0xfe>
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b10      	cmp	r3, #16
 8004ade:	d104      	bne.n	8004aea <HAL_TIM_PWM_Start+0xf6>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ae8:	e003      	b.n	8004af2 <HAL_TIM_PWM_Start+0xfe>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2202      	movs	r2, #2
 8004aee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2201      	movs	r2, #1
 8004af8:	6839      	ldr	r1, [r7, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fc98 	bl	8005430 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a2b      	ldr	r2, [pc, #172]	; (8004bb4 <HAL_TIM_PWM_Start+0x1c0>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d00e      	beq.n	8004b28 <HAL_TIM_PWM_Start+0x134>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a2a      	ldr	r2, [pc, #168]	; (8004bb8 <HAL_TIM_PWM_Start+0x1c4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d009      	beq.n	8004b28 <HAL_TIM_PWM_Start+0x134>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a28      	ldr	r2, [pc, #160]	; (8004bbc <HAL_TIM_PWM_Start+0x1c8>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d004      	beq.n	8004b28 <HAL_TIM_PWM_Start+0x134>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a27      	ldr	r2, [pc, #156]	; (8004bc0 <HAL_TIM_PWM_Start+0x1cc>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d101      	bne.n	8004b2c <HAL_TIM_PWM_Start+0x138>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e000      	b.n	8004b2e <HAL_TIM_PWM_Start+0x13a>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d007      	beq.n	8004b42 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a1b      	ldr	r2, [pc, #108]	; (8004bb4 <HAL_TIM_PWM_Start+0x1c0>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d00e      	beq.n	8004b6a <HAL_TIM_PWM_Start+0x176>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b54:	d009      	beq.n	8004b6a <HAL_TIM_PWM_Start+0x176>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a1a      	ldr	r2, [pc, #104]	; (8004bc4 <HAL_TIM_PWM_Start+0x1d0>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d004      	beq.n	8004b6a <HAL_TIM_PWM_Start+0x176>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a14      	ldr	r2, [pc, #80]	; (8004bb8 <HAL_TIM_PWM_Start+0x1c4>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d115      	bne.n	8004b96 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	4b15      	ldr	r3, [pc, #84]	; (8004bc8 <HAL_TIM_PWM_Start+0x1d4>)
 8004b72:	4013      	ands	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2b06      	cmp	r3, #6
 8004b7a:	d015      	beq.n	8004ba8 <HAL_TIM_PWM_Start+0x1b4>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b82:	d011      	beq.n	8004ba8 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0201 	orr.w	r2, r2, #1
 8004b92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b94:	e008      	b.n	8004ba8 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f042 0201 	orr.w	r2, r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	e000      	b.n	8004baa <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	40012c00 	.word	0x40012c00
 8004bb8:	40014000 	.word	0x40014000
 8004bbc:	40014400 	.word	0x40014400
 8004bc0:	40014800 	.word	0x40014800
 8004bc4:	40000400 	.word	0x40000400
 8004bc8:	00010007 	.word	0x00010007

08004bcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d101      	bne.n	8004bea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004be6:	2302      	movs	r3, #2
 8004be8:	e0ff      	b.n	8004dea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b14      	cmp	r3, #20
 8004bf6:	f200 80f0 	bhi.w	8004dda <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004bfa:	a201      	add	r2, pc, #4	; (adr r2, 8004c00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c00:	08004c55 	.word	0x08004c55
 8004c04:	08004ddb 	.word	0x08004ddb
 8004c08:	08004ddb 	.word	0x08004ddb
 8004c0c:	08004ddb 	.word	0x08004ddb
 8004c10:	08004c95 	.word	0x08004c95
 8004c14:	08004ddb 	.word	0x08004ddb
 8004c18:	08004ddb 	.word	0x08004ddb
 8004c1c:	08004ddb 	.word	0x08004ddb
 8004c20:	08004cd7 	.word	0x08004cd7
 8004c24:	08004ddb 	.word	0x08004ddb
 8004c28:	08004ddb 	.word	0x08004ddb
 8004c2c:	08004ddb 	.word	0x08004ddb
 8004c30:	08004d17 	.word	0x08004d17
 8004c34:	08004ddb 	.word	0x08004ddb
 8004c38:	08004ddb 	.word	0x08004ddb
 8004c3c:	08004ddb 	.word	0x08004ddb
 8004c40:	08004d59 	.word	0x08004d59
 8004c44:	08004ddb 	.word	0x08004ddb
 8004c48:	08004ddb 	.word	0x08004ddb
 8004c4c:	08004ddb 	.word	0x08004ddb
 8004c50:	08004d99 	.word	0x08004d99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68b9      	ldr	r1, [r7, #8]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 f942 	bl	8004ee4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	699a      	ldr	r2, [r3, #24]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0208 	orr.w	r2, r2, #8
 8004c6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699a      	ldr	r2, [r3, #24]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0204 	bic.w	r2, r2, #4
 8004c7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6999      	ldr	r1, [r3, #24]
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	619a      	str	r2, [r3, #24]
      break;
 8004c92:	e0a5      	b.n	8004de0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68b9      	ldr	r1, [r7, #8]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 f9a8 	bl	8004ff0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	699a      	ldr	r2, [r3, #24]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6999      	ldr	r1, [r3, #24]
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	021a      	lsls	r2, r3, #8
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	619a      	str	r2, [r3, #24]
      break;
 8004cd4:	e084      	b.n	8004de0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68b9      	ldr	r1, [r7, #8]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 fa07 	bl	80050f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	69da      	ldr	r2, [r3, #28]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f042 0208 	orr.w	r2, r2, #8
 8004cf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0204 	bic.w	r2, r2, #4
 8004d00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69d9      	ldr	r1, [r3, #28]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	691a      	ldr	r2, [r3, #16]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	61da      	str	r2, [r3, #28]
      break;
 8004d14:	e064      	b.n	8004de0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68b9      	ldr	r1, [r7, #8]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f000 fa65 	bl	80051ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69da      	ldr	r2, [r3, #28]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69da      	ldr	r2, [r3, #28]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69d9      	ldr	r1, [r3, #28]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	021a      	lsls	r2, r3, #8
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	61da      	str	r2, [r3, #28]
      break;
 8004d56:	e043      	b.n	8004de0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68b9      	ldr	r1, [r7, #8]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 faa8 	bl	80052b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0208 	orr.w	r2, r2, #8
 8004d72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 0204 	bic.w	r2, r2, #4
 8004d82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	691a      	ldr	r2, [r3, #16]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d96:	e023      	b.n	8004de0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68b9      	ldr	r1, [r7, #8]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fae6 	bl	8005370 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004db2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dc2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	021a      	lsls	r2, r3, #8
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004dd8:	e002      	b.n	8004de0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8004dde:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3718      	adds	r7, #24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop

08004df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a32      	ldr	r2, [pc, #200]	; (8004ed0 <TIM_Base_SetConfig+0xdc>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d007      	beq.n	8004e1c <TIM_Base_SetConfig+0x28>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e12:	d003      	beq.n	8004e1c <TIM_Base_SetConfig+0x28>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a2f      	ldr	r2, [pc, #188]	; (8004ed4 <TIM_Base_SetConfig+0xe0>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d108      	bne.n	8004e2e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a27      	ldr	r2, [pc, #156]	; (8004ed0 <TIM_Base_SetConfig+0xdc>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d013      	beq.n	8004e5e <TIM_Base_SetConfig+0x6a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e3c:	d00f      	beq.n	8004e5e <TIM_Base_SetConfig+0x6a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a24      	ldr	r2, [pc, #144]	; (8004ed4 <TIM_Base_SetConfig+0xe0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d00b      	beq.n	8004e5e <TIM_Base_SetConfig+0x6a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a23      	ldr	r2, [pc, #140]	; (8004ed8 <TIM_Base_SetConfig+0xe4>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d007      	beq.n	8004e5e <TIM_Base_SetConfig+0x6a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a22      	ldr	r2, [pc, #136]	; (8004edc <TIM_Base_SetConfig+0xe8>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d003      	beq.n	8004e5e <TIM_Base_SetConfig+0x6a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a21      	ldr	r2, [pc, #132]	; (8004ee0 <TIM_Base_SetConfig+0xec>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d108      	bne.n	8004e70 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a0e      	ldr	r2, [pc, #56]	; (8004ed0 <TIM_Base_SetConfig+0xdc>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d00b      	beq.n	8004eb4 <TIM_Base_SetConfig+0xc0>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a0e      	ldr	r2, [pc, #56]	; (8004ed8 <TIM_Base_SetConfig+0xe4>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d007      	beq.n	8004eb4 <TIM_Base_SetConfig+0xc0>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a0d      	ldr	r2, [pc, #52]	; (8004edc <TIM_Base_SetConfig+0xe8>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d003      	beq.n	8004eb4 <TIM_Base_SetConfig+0xc0>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a0c      	ldr	r2, [pc, #48]	; (8004ee0 <TIM_Base_SetConfig+0xec>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d103      	bne.n	8004ebc <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	691a      	ldr	r2, [r3, #16]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	615a      	str	r2, [r3, #20]
}
 8004ec2:	bf00      	nop
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	40012c00 	.word	0x40012c00
 8004ed4:	40000400 	.word	0x40000400
 8004ed8:	40014000 	.word	0x40014000
 8004edc:	40014400 	.word	0x40014400
 8004ee0:	40014800 	.word	0x40014800

08004ee4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	f023 0201 	bic.w	r2, r3, #1
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 0303 	bic.w	r3, r3, #3
 8004f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f023 0302 	bic.w	r3, r3, #2
 8004f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a28      	ldr	r2, [pc, #160]	; (8004fe0 <TIM_OC1_SetConfig+0xfc>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d00b      	beq.n	8004f5c <TIM_OC1_SetConfig+0x78>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a27      	ldr	r2, [pc, #156]	; (8004fe4 <TIM_OC1_SetConfig+0x100>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d007      	beq.n	8004f5c <TIM_OC1_SetConfig+0x78>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a26      	ldr	r2, [pc, #152]	; (8004fe8 <TIM_OC1_SetConfig+0x104>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d003      	beq.n	8004f5c <TIM_OC1_SetConfig+0x78>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a25      	ldr	r2, [pc, #148]	; (8004fec <TIM_OC1_SetConfig+0x108>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d10c      	bne.n	8004f76 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f023 0308 	bic.w	r3, r3, #8
 8004f62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f023 0304 	bic.w	r3, r3, #4
 8004f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a19      	ldr	r2, [pc, #100]	; (8004fe0 <TIM_OC1_SetConfig+0xfc>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d00b      	beq.n	8004f96 <TIM_OC1_SetConfig+0xb2>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a18      	ldr	r2, [pc, #96]	; (8004fe4 <TIM_OC1_SetConfig+0x100>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d007      	beq.n	8004f96 <TIM_OC1_SetConfig+0xb2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a17      	ldr	r2, [pc, #92]	; (8004fe8 <TIM_OC1_SetConfig+0x104>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d003      	beq.n	8004f96 <TIM_OC1_SetConfig+0xb2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a16      	ldr	r2, [pc, #88]	; (8004fec <TIM_OC1_SetConfig+0x108>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d111      	bne.n	8004fba <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	621a      	str	r2, [r3, #32]
}
 8004fd4:	bf00      	nop
 8004fd6:	371c      	adds	r7, #28
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	40012c00 	.word	0x40012c00
 8004fe4:	40014000 	.word	0x40014000
 8004fe8:	40014400 	.word	0x40014400
 8004fec:	40014800 	.word	0x40014800

08004ff0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	f023 0210 	bic.w	r2, r3, #16
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800501e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800502a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	021b      	lsls	r3, r3, #8
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4313      	orrs	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f023 0320 	bic.w	r3, r3, #32
 800503e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	011b      	lsls	r3, r3, #4
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	4313      	orrs	r3, r2
 800504a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a24      	ldr	r2, [pc, #144]	; (80050e0 <TIM_OC2_SetConfig+0xf0>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d10d      	bne.n	8005070 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800505a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	011b      	lsls	r3, r3, #4
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	4313      	orrs	r3, r2
 8005066:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800506e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a1b      	ldr	r2, [pc, #108]	; (80050e0 <TIM_OC2_SetConfig+0xf0>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d00b      	beq.n	8005090 <TIM_OC2_SetConfig+0xa0>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a1a      	ldr	r2, [pc, #104]	; (80050e4 <TIM_OC2_SetConfig+0xf4>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d007      	beq.n	8005090 <TIM_OC2_SetConfig+0xa0>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a19      	ldr	r2, [pc, #100]	; (80050e8 <TIM_OC2_SetConfig+0xf8>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d003      	beq.n	8005090 <TIM_OC2_SetConfig+0xa0>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a18      	ldr	r2, [pc, #96]	; (80050ec <TIM_OC2_SetConfig+0xfc>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d113      	bne.n	80050b8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005096:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800509e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685a      	ldr	r2, [r3, #4]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	621a      	str	r2, [r3, #32]
}
 80050d2:	bf00      	nop
 80050d4:	371c      	adds	r7, #28
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	40012c00 	.word	0x40012c00
 80050e4:	40014000 	.word	0x40014000
 80050e8:	40014400 	.word	0x40014400
 80050ec:	40014800 	.word	0x40014800

080050f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800511e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0303 	bic.w	r3, r3, #3
 800512a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800513c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	021b      	lsls	r3, r3, #8
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a23      	ldr	r2, [pc, #140]	; (80051dc <TIM_OC3_SetConfig+0xec>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d10d      	bne.n	800516e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005158:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	021b      	lsls	r3, r3, #8
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	4313      	orrs	r3, r2
 8005164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800516c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a1a      	ldr	r2, [pc, #104]	; (80051dc <TIM_OC3_SetConfig+0xec>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d00b      	beq.n	800518e <TIM_OC3_SetConfig+0x9e>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a19      	ldr	r2, [pc, #100]	; (80051e0 <TIM_OC3_SetConfig+0xf0>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d007      	beq.n	800518e <TIM_OC3_SetConfig+0x9e>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a18      	ldr	r2, [pc, #96]	; (80051e4 <TIM_OC3_SetConfig+0xf4>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d003      	beq.n	800518e <TIM_OC3_SetConfig+0x9e>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a17      	ldr	r2, [pc, #92]	; (80051e8 <TIM_OC3_SetConfig+0xf8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d113      	bne.n	80051b6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800519c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	011b      	lsls	r3, r3, #4
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	621a      	str	r2, [r3, #32]
}
 80051d0:	bf00      	nop
 80051d2:	371c      	adds	r7, #28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	40012c00 	.word	0x40012c00
 80051e0:	40014000 	.word	0x40014000
 80051e4:	40014400 	.word	0x40014400
 80051e8:	40014800 	.word	0x40014800

080051ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800521a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800521e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	021b      	lsls	r3, r3, #8
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4313      	orrs	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800523a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	031b      	lsls	r3, r3, #12
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	4313      	orrs	r3, r2
 8005246:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a16      	ldr	r2, [pc, #88]	; (80052a4 <TIM_OC4_SetConfig+0xb8>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d00b      	beq.n	8005268 <TIM_OC4_SetConfig+0x7c>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a15      	ldr	r2, [pc, #84]	; (80052a8 <TIM_OC4_SetConfig+0xbc>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d007      	beq.n	8005268 <TIM_OC4_SetConfig+0x7c>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a14      	ldr	r2, [pc, #80]	; (80052ac <TIM_OC4_SetConfig+0xc0>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d003      	beq.n	8005268 <TIM_OC4_SetConfig+0x7c>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a13      	ldr	r2, [pc, #76]	; (80052b0 <TIM_OC4_SetConfig+0xc4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d109      	bne.n	800527c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800526e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	019b      	lsls	r3, r3, #6
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	4313      	orrs	r3, r2
 800527a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	621a      	str	r2, [r3, #32]
}
 8005296:	bf00      	nop
 8005298:	371c      	adds	r7, #28
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	40012c00 	.word	0x40012c00
 80052a8:	40014000 	.word	0x40014000
 80052ac:	40014400 	.word	0x40014400
 80052b0:	40014800 	.word	0x40014800

080052b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b087      	sub	sp, #28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80052f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	041b      	lsls	r3, r3, #16
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	4313      	orrs	r3, r2
 8005304:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a15      	ldr	r2, [pc, #84]	; (8005360 <TIM_OC5_SetConfig+0xac>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00b      	beq.n	8005326 <TIM_OC5_SetConfig+0x72>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a14      	ldr	r2, [pc, #80]	; (8005364 <TIM_OC5_SetConfig+0xb0>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d007      	beq.n	8005326 <TIM_OC5_SetConfig+0x72>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a13      	ldr	r2, [pc, #76]	; (8005368 <TIM_OC5_SetConfig+0xb4>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d003      	beq.n	8005326 <TIM_OC5_SetConfig+0x72>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a12      	ldr	r2, [pc, #72]	; (800536c <TIM_OC5_SetConfig+0xb8>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d109      	bne.n	800533a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800532c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	021b      	lsls	r3, r3, #8
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	4313      	orrs	r3, r2
 8005338:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	621a      	str	r2, [r3, #32]
}
 8005354:	bf00      	nop
 8005356:	371c      	adds	r7, #28
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	40012c00 	.word	0x40012c00
 8005364:	40014000 	.word	0x40014000
 8005368:	40014400 	.word	0x40014400
 800536c:	40014800 	.word	0x40014800

08005370 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800539e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	021b      	lsls	r3, r3, #8
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	051b      	lsls	r3, r3, #20
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a16      	ldr	r2, [pc, #88]	; (8005420 <TIM_OC6_SetConfig+0xb0>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00b      	beq.n	80053e4 <TIM_OC6_SetConfig+0x74>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a15      	ldr	r2, [pc, #84]	; (8005424 <TIM_OC6_SetConfig+0xb4>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d007      	beq.n	80053e4 <TIM_OC6_SetConfig+0x74>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a14      	ldr	r2, [pc, #80]	; (8005428 <TIM_OC6_SetConfig+0xb8>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d003      	beq.n	80053e4 <TIM_OC6_SetConfig+0x74>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a13      	ldr	r2, [pc, #76]	; (800542c <TIM_OC6_SetConfig+0xbc>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d109      	bne.n	80053f8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	029b      	lsls	r3, r3, #10
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	621a      	str	r2, [r3, #32]
}
 8005412:	bf00      	nop
 8005414:	371c      	adds	r7, #28
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	40012c00 	.word	0x40012c00
 8005424:	40014000 	.word	0x40014000
 8005428:	40014400 	.word	0x40014400
 800542c:	40014800 	.word	0x40014800

08005430 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	f003 031f 	and.w	r3, r3, #31
 8005442:	2201      	movs	r2, #1
 8005444:	fa02 f303 	lsl.w	r3, r2, r3
 8005448:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a1a      	ldr	r2, [r3, #32]
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	43db      	mvns	r3, r3
 8005452:	401a      	ands	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6a1a      	ldr	r2, [r3, #32]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f003 031f 	and.w	r3, r3, #31
 8005462:	6879      	ldr	r1, [r7, #4]
 8005464:	fa01 f303 	lsl.w	r3, r1, r3
 8005468:	431a      	orrs	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	621a      	str	r2, [r3, #32]
}
 800546e:	bf00      	nop
 8005470:	371c      	adds	r7, #28
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
	...

0800547c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d109      	bne.n	80054a0 <HAL_TIMEx_PWMN_Start+0x24>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b01      	cmp	r3, #1
 8005496:	bf14      	ite	ne
 8005498:	2301      	movne	r3, #1
 800549a:	2300      	moveq	r3, #0
 800549c:	b2db      	uxtb	r3, r3
 800549e:	e022      	b.n	80054e6 <HAL_TIMEx_PWMN_Start+0x6a>
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	d109      	bne.n	80054ba <HAL_TIMEx_PWMN_Start+0x3e>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	bf14      	ite	ne
 80054b2:	2301      	movne	r3, #1
 80054b4:	2300      	moveq	r3, #0
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	e015      	b.n	80054e6 <HAL_TIMEx_PWMN_Start+0x6a>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b08      	cmp	r3, #8
 80054be:	d109      	bne.n	80054d4 <HAL_TIMEx_PWMN_Start+0x58>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	bf14      	ite	ne
 80054cc:	2301      	movne	r3, #1
 80054ce:	2300      	moveq	r3, #0
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	e008      	b.n	80054e6 <HAL_TIMEx_PWMN_Start+0x6a>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b01      	cmp	r3, #1
 80054de:	bf14      	ite	ne
 80054e0:	2301      	movne	r3, #1
 80054e2:	2300      	moveq	r3, #0
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e05f      	b.n	80055ae <HAL_TIMEx_PWMN_Start+0x132>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d104      	bne.n	80054fe <HAL_TIMEx_PWMN_Start+0x82>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054fc:	e013      	b.n	8005526 <HAL_TIMEx_PWMN_Start+0xaa>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b04      	cmp	r3, #4
 8005502:	d104      	bne.n	800550e <HAL_TIMEx_PWMN_Start+0x92>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800550c:	e00b      	b.n	8005526 <HAL_TIMEx_PWMN_Start+0xaa>
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b08      	cmp	r3, #8
 8005512:	d104      	bne.n	800551e <HAL_TIMEx_PWMN_Start+0xa2>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800551c:	e003      	b.n	8005526 <HAL_TIMEx_PWMN_Start+0xaa>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2202      	movs	r2, #2
 8005522:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2204      	movs	r2, #4
 800552c:	6839      	ldr	r1, [r7, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f000 f930 	bl	8005794 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005542:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a1b      	ldr	r2, [pc, #108]	; (80055b8 <HAL_TIMEx_PWMN_Start+0x13c>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d00e      	beq.n	800556c <HAL_TIMEx_PWMN_Start+0xf0>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005556:	d009      	beq.n	800556c <HAL_TIMEx_PWMN_Start+0xf0>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a17      	ldr	r2, [pc, #92]	; (80055bc <HAL_TIMEx_PWMN_Start+0x140>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d004      	beq.n	800556c <HAL_TIMEx_PWMN_Start+0xf0>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a16      	ldr	r2, [pc, #88]	; (80055c0 <HAL_TIMEx_PWMN_Start+0x144>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d115      	bne.n	8005598 <HAL_TIMEx_PWMN_Start+0x11c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689a      	ldr	r2, [r3, #8]
 8005572:	4b14      	ldr	r3, [pc, #80]	; (80055c4 <HAL_TIMEx_PWMN_Start+0x148>)
 8005574:	4013      	ands	r3, r2
 8005576:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2b06      	cmp	r3, #6
 800557c:	d015      	beq.n	80055aa <HAL_TIMEx_PWMN_Start+0x12e>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005584:	d011      	beq.n	80055aa <HAL_TIMEx_PWMN_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f042 0201 	orr.w	r2, r2, #1
 8005594:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005596:	e008      	b.n	80055aa <HAL_TIMEx_PWMN_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f042 0201 	orr.w	r2, r2, #1
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	e000      	b.n	80055ac <HAL_TIMEx_PWMN_Start+0x130>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	40012c00 	.word	0x40012c00
 80055bc:	40000400 	.word	0x40000400
 80055c0:	40014000 	.word	0x40014000
 80055c4:	00010007 	.word	0x00010007

080055c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d101      	bne.n	80055e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055dc:	2302      	movs	r3, #2
 80055de:	e054      	b.n	800568a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a24      	ldr	r2, [pc, #144]	; (8005698 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d108      	bne.n	800561c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005610:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	4313      	orrs	r3, r2
 800561a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005622:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	4313      	orrs	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a17      	ldr	r2, [pc, #92]	; (8005698 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d00e      	beq.n	800565e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005648:	d009      	beq.n	800565e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a13      	ldr	r2, [pc, #76]	; (800569c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d004      	beq.n	800565e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a11      	ldr	r2, [pc, #68]	; (80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d10c      	bne.n	8005678 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005664:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	4313      	orrs	r3, r2
 800566e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	40012c00 	.word	0x40012c00
 800569c:	40000400 	.word	0x40000400
 80056a0:	40014000 	.word	0x40014000

080056a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d101      	bne.n	80056c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80056bc:	2302      	movs	r3, #2
 80056be:	e060      	b.n	8005782 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	4313      	orrs	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	4313      	orrs	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005726:	4313      	orrs	r3, r2
 8005728:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	041b      	lsls	r3, r3, #16
 8005736:	4313      	orrs	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a14      	ldr	r2, [pc, #80]	; (8005790 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d115      	bne.n	8005770 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	051b      	lsls	r3, r3, #20
 8005750:	4313      	orrs	r3, r2
 8005752:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	4313      	orrs	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	4313      	orrs	r3, r2
 800576e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	40012c00 	.word	0x40012c00

08005794 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005794:	b480      	push	{r7}
 8005796:	b087      	sub	sp, #28
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f003 031f 	and.w	r3, r3, #31
 80057a6:	2204      	movs	r2, #4
 80057a8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6a1a      	ldr	r2, [r3, #32]
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	43db      	mvns	r3, r3
 80057b6:	401a      	ands	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6a1a      	ldr	r2, [r3, #32]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	f003 031f 	and.w	r3, r3, #31
 80057c6:	6879      	ldr	r1, [r7, #4]
 80057c8:	fa01 f303 	lsl.w	r3, r1, r3
 80057cc:	431a      	orrs	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	621a      	str	r2, [r3, #32]
}
 80057d2:	bf00      	nop
 80057d4:	371c      	adds	r7, #28
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
	...

080057e0 <__errno>:
 80057e0:	4b01      	ldr	r3, [pc, #4]	; (80057e8 <__errno+0x8>)
 80057e2:	6818      	ldr	r0, [r3, #0]
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	2000000c 	.word	0x2000000c

080057ec <__libc_init_array>:
 80057ec:	b570      	push	{r4, r5, r6, lr}
 80057ee:	4d0d      	ldr	r5, [pc, #52]	; (8005824 <__libc_init_array+0x38>)
 80057f0:	4c0d      	ldr	r4, [pc, #52]	; (8005828 <__libc_init_array+0x3c>)
 80057f2:	1b64      	subs	r4, r4, r5
 80057f4:	10a4      	asrs	r4, r4, #2
 80057f6:	2600      	movs	r6, #0
 80057f8:	42a6      	cmp	r6, r4
 80057fa:	d109      	bne.n	8005810 <__libc_init_array+0x24>
 80057fc:	4d0b      	ldr	r5, [pc, #44]	; (800582c <__libc_init_array+0x40>)
 80057fe:	4c0c      	ldr	r4, [pc, #48]	; (8005830 <__libc_init_array+0x44>)
 8005800:	f003 fb08 	bl	8008e14 <_init>
 8005804:	1b64      	subs	r4, r4, r5
 8005806:	10a4      	asrs	r4, r4, #2
 8005808:	2600      	movs	r6, #0
 800580a:	42a6      	cmp	r6, r4
 800580c:	d105      	bne.n	800581a <__libc_init_array+0x2e>
 800580e:	bd70      	pop	{r4, r5, r6, pc}
 8005810:	f855 3b04 	ldr.w	r3, [r5], #4
 8005814:	4798      	blx	r3
 8005816:	3601      	adds	r6, #1
 8005818:	e7ee      	b.n	80057f8 <__libc_init_array+0xc>
 800581a:	f855 3b04 	ldr.w	r3, [r5], #4
 800581e:	4798      	blx	r3
 8005820:	3601      	adds	r6, #1
 8005822:	e7f2      	b.n	800580a <__libc_init_array+0x1e>
 8005824:	0800961c 	.word	0x0800961c
 8005828:	0800961c 	.word	0x0800961c
 800582c:	0800961c 	.word	0x0800961c
 8005830:	08009620 	.word	0x08009620

08005834 <memset>:
 8005834:	4402      	add	r2, r0
 8005836:	4603      	mov	r3, r0
 8005838:	4293      	cmp	r3, r2
 800583a:	d100      	bne.n	800583e <memset+0xa>
 800583c:	4770      	bx	lr
 800583e:	f803 1b01 	strb.w	r1, [r3], #1
 8005842:	e7f9      	b.n	8005838 <memset+0x4>

08005844 <__cvt>:
 8005844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005848:	ec55 4b10 	vmov	r4, r5, d0
 800584c:	2d00      	cmp	r5, #0
 800584e:	460e      	mov	r6, r1
 8005850:	4619      	mov	r1, r3
 8005852:	462b      	mov	r3, r5
 8005854:	bfbb      	ittet	lt
 8005856:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800585a:	461d      	movlt	r5, r3
 800585c:	2300      	movge	r3, #0
 800585e:	232d      	movlt	r3, #45	; 0x2d
 8005860:	700b      	strb	r3, [r1, #0]
 8005862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005864:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005868:	4691      	mov	r9, r2
 800586a:	f023 0820 	bic.w	r8, r3, #32
 800586e:	bfbc      	itt	lt
 8005870:	4622      	movlt	r2, r4
 8005872:	4614      	movlt	r4, r2
 8005874:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005878:	d005      	beq.n	8005886 <__cvt+0x42>
 800587a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800587e:	d100      	bne.n	8005882 <__cvt+0x3e>
 8005880:	3601      	adds	r6, #1
 8005882:	2102      	movs	r1, #2
 8005884:	e000      	b.n	8005888 <__cvt+0x44>
 8005886:	2103      	movs	r1, #3
 8005888:	ab03      	add	r3, sp, #12
 800588a:	9301      	str	r3, [sp, #4]
 800588c:	ab02      	add	r3, sp, #8
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	ec45 4b10 	vmov	d0, r4, r5
 8005894:	4653      	mov	r3, sl
 8005896:	4632      	mov	r2, r6
 8005898:	f000 fcca 	bl	8006230 <_dtoa_r>
 800589c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80058a0:	4607      	mov	r7, r0
 80058a2:	d102      	bne.n	80058aa <__cvt+0x66>
 80058a4:	f019 0f01 	tst.w	r9, #1
 80058a8:	d022      	beq.n	80058f0 <__cvt+0xac>
 80058aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058ae:	eb07 0906 	add.w	r9, r7, r6
 80058b2:	d110      	bne.n	80058d6 <__cvt+0x92>
 80058b4:	783b      	ldrb	r3, [r7, #0]
 80058b6:	2b30      	cmp	r3, #48	; 0x30
 80058b8:	d10a      	bne.n	80058d0 <__cvt+0x8c>
 80058ba:	2200      	movs	r2, #0
 80058bc:	2300      	movs	r3, #0
 80058be:	4620      	mov	r0, r4
 80058c0:	4629      	mov	r1, r5
 80058c2:	f7fb f901 	bl	8000ac8 <__aeabi_dcmpeq>
 80058c6:	b918      	cbnz	r0, 80058d0 <__cvt+0x8c>
 80058c8:	f1c6 0601 	rsb	r6, r6, #1
 80058cc:	f8ca 6000 	str.w	r6, [sl]
 80058d0:	f8da 3000 	ldr.w	r3, [sl]
 80058d4:	4499      	add	r9, r3
 80058d6:	2200      	movs	r2, #0
 80058d8:	2300      	movs	r3, #0
 80058da:	4620      	mov	r0, r4
 80058dc:	4629      	mov	r1, r5
 80058de:	f7fb f8f3 	bl	8000ac8 <__aeabi_dcmpeq>
 80058e2:	b108      	cbz	r0, 80058e8 <__cvt+0xa4>
 80058e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80058e8:	2230      	movs	r2, #48	; 0x30
 80058ea:	9b03      	ldr	r3, [sp, #12]
 80058ec:	454b      	cmp	r3, r9
 80058ee:	d307      	bcc.n	8005900 <__cvt+0xbc>
 80058f0:	9b03      	ldr	r3, [sp, #12]
 80058f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058f4:	1bdb      	subs	r3, r3, r7
 80058f6:	4638      	mov	r0, r7
 80058f8:	6013      	str	r3, [r2, #0]
 80058fa:	b004      	add	sp, #16
 80058fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005900:	1c59      	adds	r1, r3, #1
 8005902:	9103      	str	r1, [sp, #12]
 8005904:	701a      	strb	r2, [r3, #0]
 8005906:	e7f0      	b.n	80058ea <__cvt+0xa6>

08005908 <__exponent>:
 8005908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800590a:	4603      	mov	r3, r0
 800590c:	2900      	cmp	r1, #0
 800590e:	bfb8      	it	lt
 8005910:	4249      	neglt	r1, r1
 8005912:	f803 2b02 	strb.w	r2, [r3], #2
 8005916:	bfb4      	ite	lt
 8005918:	222d      	movlt	r2, #45	; 0x2d
 800591a:	222b      	movge	r2, #43	; 0x2b
 800591c:	2909      	cmp	r1, #9
 800591e:	7042      	strb	r2, [r0, #1]
 8005920:	dd2a      	ble.n	8005978 <__exponent+0x70>
 8005922:	f10d 0407 	add.w	r4, sp, #7
 8005926:	46a4      	mov	ip, r4
 8005928:	270a      	movs	r7, #10
 800592a:	46a6      	mov	lr, r4
 800592c:	460a      	mov	r2, r1
 800592e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005932:	fb07 1516 	mls	r5, r7, r6, r1
 8005936:	3530      	adds	r5, #48	; 0x30
 8005938:	2a63      	cmp	r2, #99	; 0x63
 800593a:	f104 34ff 	add.w	r4, r4, #4294967295
 800593e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005942:	4631      	mov	r1, r6
 8005944:	dcf1      	bgt.n	800592a <__exponent+0x22>
 8005946:	3130      	adds	r1, #48	; 0x30
 8005948:	f1ae 0502 	sub.w	r5, lr, #2
 800594c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005950:	1c44      	adds	r4, r0, #1
 8005952:	4629      	mov	r1, r5
 8005954:	4561      	cmp	r1, ip
 8005956:	d30a      	bcc.n	800596e <__exponent+0x66>
 8005958:	f10d 0209 	add.w	r2, sp, #9
 800595c:	eba2 020e 	sub.w	r2, r2, lr
 8005960:	4565      	cmp	r5, ip
 8005962:	bf88      	it	hi
 8005964:	2200      	movhi	r2, #0
 8005966:	4413      	add	r3, r2
 8005968:	1a18      	subs	r0, r3, r0
 800596a:	b003      	add	sp, #12
 800596c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800596e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005972:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005976:	e7ed      	b.n	8005954 <__exponent+0x4c>
 8005978:	2330      	movs	r3, #48	; 0x30
 800597a:	3130      	adds	r1, #48	; 0x30
 800597c:	7083      	strb	r3, [r0, #2]
 800597e:	70c1      	strb	r1, [r0, #3]
 8005980:	1d03      	adds	r3, r0, #4
 8005982:	e7f1      	b.n	8005968 <__exponent+0x60>

08005984 <_printf_float>:
 8005984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005988:	ed2d 8b02 	vpush	{d8}
 800598c:	b08d      	sub	sp, #52	; 0x34
 800598e:	460c      	mov	r4, r1
 8005990:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005994:	4616      	mov	r6, r2
 8005996:	461f      	mov	r7, r3
 8005998:	4605      	mov	r5, r0
 800599a:	f001 fa35 	bl	8006e08 <_localeconv_r>
 800599e:	f8d0 a000 	ldr.w	sl, [r0]
 80059a2:	4650      	mov	r0, sl
 80059a4:	f7fa fc14 	bl	80001d0 <strlen>
 80059a8:	2300      	movs	r3, #0
 80059aa:	930a      	str	r3, [sp, #40]	; 0x28
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	9305      	str	r3, [sp, #20]
 80059b0:	f8d8 3000 	ldr.w	r3, [r8]
 80059b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80059b8:	3307      	adds	r3, #7
 80059ba:	f023 0307 	bic.w	r3, r3, #7
 80059be:	f103 0208 	add.w	r2, r3, #8
 80059c2:	f8c8 2000 	str.w	r2, [r8]
 80059c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80059ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80059d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80059d6:	9307      	str	r3, [sp, #28]
 80059d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80059dc:	ee08 0a10 	vmov	s16, r0
 80059e0:	4b9f      	ldr	r3, [pc, #636]	; (8005c60 <_printf_float+0x2dc>)
 80059e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059e6:	f04f 32ff 	mov.w	r2, #4294967295
 80059ea:	f7fb f89f 	bl	8000b2c <__aeabi_dcmpun>
 80059ee:	bb88      	cbnz	r0, 8005a54 <_printf_float+0xd0>
 80059f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059f4:	4b9a      	ldr	r3, [pc, #616]	; (8005c60 <_printf_float+0x2dc>)
 80059f6:	f04f 32ff 	mov.w	r2, #4294967295
 80059fa:	f7fb f879 	bl	8000af0 <__aeabi_dcmple>
 80059fe:	bb48      	cbnz	r0, 8005a54 <_printf_float+0xd0>
 8005a00:	2200      	movs	r2, #0
 8005a02:	2300      	movs	r3, #0
 8005a04:	4640      	mov	r0, r8
 8005a06:	4649      	mov	r1, r9
 8005a08:	f7fb f868 	bl	8000adc <__aeabi_dcmplt>
 8005a0c:	b110      	cbz	r0, 8005a14 <_printf_float+0x90>
 8005a0e:	232d      	movs	r3, #45	; 0x2d
 8005a10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a14:	4b93      	ldr	r3, [pc, #588]	; (8005c64 <_printf_float+0x2e0>)
 8005a16:	4894      	ldr	r0, [pc, #592]	; (8005c68 <_printf_float+0x2e4>)
 8005a18:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005a1c:	bf94      	ite	ls
 8005a1e:	4698      	movls	r8, r3
 8005a20:	4680      	movhi	r8, r0
 8005a22:	2303      	movs	r3, #3
 8005a24:	6123      	str	r3, [r4, #16]
 8005a26:	9b05      	ldr	r3, [sp, #20]
 8005a28:	f023 0204 	bic.w	r2, r3, #4
 8005a2c:	6022      	str	r2, [r4, #0]
 8005a2e:	f04f 0900 	mov.w	r9, #0
 8005a32:	9700      	str	r7, [sp, #0]
 8005a34:	4633      	mov	r3, r6
 8005a36:	aa0b      	add	r2, sp, #44	; 0x2c
 8005a38:	4621      	mov	r1, r4
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	f000 f9d8 	bl	8005df0 <_printf_common>
 8005a40:	3001      	adds	r0, #1
 8005a42:	f040 8090 	bne.w	8005b66 <_printf_float+0x1e2>
 8005a46:	f04f 30ff 	mov.w	r0, #4294967295
 8005a4a:	b00d      	add	sp, #52	; 0x34
 8005a4c:	ecbd 8b02 	vpop	{d8}
 8005a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a54:	4642      	mov	r2, r8
 8005a56:	464b      	mov	r3, r9
 8005a58:	4640      	mov	r0, r8
 8005a5a:	4649      	mov	r1, r9
 8005a5c:	f7fb f866 	bl	8000b2c <__aeabi_dcmpun>
 8005a60:	b140      	cbz	r0, 8005a74 <_printf_float+0xf0>
 8005a62:	464b      	mov	r3, r9
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	bfbc      	itt	lt
 8005a68:	232d      	movlt	r3, #45	; 0x2d
 8005a6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a6e:	487f      	ldr	r0, [pc, #508]	; (8005c6c <_printf_float+0x2e8>)
 8005a70:	4b7f      	ldr	r3, [pc, #508]	; (8005c70 <_printf_float+0x2ec>)
 8005a72:	e7d1      	b.n	8005a18 <_printf_float+0x94>
 8005a74:	6863      	ldr	r3, [r4, #4]
 8005a76:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005a7a:	9206      	str	r2, [sp, #24]
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	d13f      	bne.n	8005b00 <_printf_float+0x17c>
 8005a80:	2306      	movs	r3, #6
 8005a82:	6063      	str	r3, [r4, #4]
 8005a84:	9b05      	ldr	r3, [sp, #20]
 8005a86:	6861      	ldr	r1, [r4, #4]
 8005a88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	9303      	str	r3, [sp, #12]
 8005a90:	ab0a      	add	r3, sp, #40	; 0x28
 8005a92:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a96:	ab09      	add	r3, sp, #36	; 0x24
 8005a98:	ec49 8b10 	vmov	d0, r8, r9
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	6022      	str	r2, [r4, #0]
 8005aa0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	f7ff fecd 	bl	8005844 <__cvt>
 8005aaa:	9b06      	ldr	r3, [sp, #24]
 8005aac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005aae:	2b47      	cmp	r3, #71	; 0x47
 8005ab0:	4680      	mov	r8, r0
 8005ab2:	d108      	bne.n	8005ac6 <_printf_float+0x142>
 8005ab4:	1cc8      	adds	r0, r1, #3
 8005ab6:	db02      	blt.n	8005abe <_printf_float+0x13a>
 8005ab8:	6863      	ldr	r3, [r4, #4]
 8005aba:	4299      	cmp	r1, r3
 8005abc:	dd41      	ble.n	8005b42 <_printf_float+0x1be>
 8005abe:	f1ab 0b02 	sub.w	fp, fp, #2
 8005ac2:	fa5f fb8b 	uxtb.w	fp, fp
 8005ac6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005aca:	d820      	bhi.n	8005b0e <_printf_float+0x18a>
 8005acc:	3901      	subs	r1, #1
 8005ace:	465a      	mov	r2, fp
 8005ad0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ad4:	9109      	str	r1, [sp, #36]	; 0x24
 8005ad6:	f7ff ff17 	bl	8005908 <__exponent>
 8005ada:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005adc:	1813      	adds	r3, r2, r0
 8005ade:	2a01      	cmp	r2, #1
 8005ae0:	4681      	mov	r9, r0
 8005ae2:	6123      	str	r3, [r4, #16]
 8005ae4:	dc02      	bgt.n	8005aec <_printf_float+0x168>
 8005ae6:	6822      	ldr	r2, [r4, #0]
 8005ae8:	07d2      	lsls	r2, r2, #31
 8005aea:	d501      	bpl.n	8005af0 <_printf_float+0x16c>
 8005aec:	3301      	adds	r3, #1
 8005aee:	6123      	str	r3, [r4, #16]
 8005af0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d09c      	beq.n	8005a32 <_printf_float+0xae>
 8005af8:	232d      	movs	r3, #45	; 0x2d
 8005afa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005afe:	e798      	b.n	8005a32 <_printf_float+0xae>
 8005b00:	9a06      	ldr	r2, [sp, #24]
 8005b02:	2a47      	cmp	r2, #71	; 0x47
 8005b04:	d1be      	bne.n	8005a84 <_printf_float+0x100>
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1bc      	bne.n	8005a84 <_printf_float+0x100>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e7b9      	b.n	8005a82 <_printf_float+0xfe>
 8005b0e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005b12:	d118      	bne.n	8005b46 <_printf_float+0x1c2>
 8005b14:	2900      	cmp	r1, #0
 8005b16:	6863      	ldr	r3, [r4, #4]
 8005b18:	dd0b      	ble.n	8005b32 <_printf_float+0x1ae>
 8005b1a:	6121      	str	r1, [r4, #16]
 8005b1c:	b913      	cbnz	r3, 8005b24 <_printf_float+0x1a0>
 8005b1e:	6822      	ldr	r2, [r4, #0]
 8005b20:	07d0      	lsls	r0, r2, #31
 8005b22:	d502      	bpl.n	8005b2a <_printf_float+0x1a6>
 8005b24:	3301      	adds	r3, #1
 8005b26:	440b      	add	r3, r1
 8005b28:	6123      	str	r3, [r4, #16]
 8005b2a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b2c:	f04f 0900 	mov.w	r9, #0
 8005b30:	e7de      	b.n	8005af0 <_printf_float+0x16c>
 8005b32:	b913      	cbnz	r3, 8005b3a <_printf_float+0x1b6>
 8005b34:	6822      	ldr	r2, [r4, #0]
 8005b36:	07d2      	lsls	r2, r2, #31
 8005b38:	d501      	bpl.n	8005b3e <_printf_float+0x1ba>
 8005b3a:	3302      	adds	r3, #2
 8005b3c:	e7f4      	b.n	8005b28 <_printf_float+0x1a4>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e7f2      	b.n	8005b28 <_printf_float+0x1a4>
 8005b42:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b48:	4299      	cmp	r1, r3
 8005b4a:	db05      	blt.n	8005b58 <_printf_float+0x1d4>
 8005b4c:	6823      	ldr	r3, [r4, #0]
 8005b4e:	6121      	str	r1, [r4, #16]
 8005b50:	07d8      	lsls	r0, r3, #31
 8005b52:	d5ea      	bpl.n	8005b2a <_printf_float+0x1a6>
 8005b54:	1c4b      	adds	r3, r1, #1
 8005b56:	e7e7      	b.n	8005b28 <_printf_float+0x1a4>
 8005b58:	2900      	cmp	r1, #0
 8005b5a:	bfd4      	ite	le
 8005b5c:	f1c1 0202 	rsble	r2, r1, #2
 8005b60:	2201      	movgt	r2, #1
 8005b62:	4413      	add	r3, r2
 8005b64:	e7e0      	b.n	8005b28 <_printf_float+0x1a4>
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	055a      	lsls	r2, r3, #21
 8005b6a:	d407      	bmi.n	8005b7c <_printf_float+0x1f8>
 8005b6c:	6923      	ldr	r3, [r4, #16]
 8005b6e:	4642      	mov	r2, r8
 8005b70:	4631      	mov	r1, r6
 8005b72:	4628      	mov	r0, r5
 8005b74:	47b8      	blx	r7
 8005b76:	3001      	adds	r0, #1
 8005b78:	d12c      	bne.n	8005bd4 <_printf_float+0x250>
 8005b7a:	e764      	b.n	8005a46 <_printf_float+0xc2>
 8005b7c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b80:	f240 80e0 	bls.w	8005d44 <_printf_float+0x3c0>
 8005b84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b88:	2200      	movs	r2, #0
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	f7fa ff9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b90:	2800      	cmp	r0, #0
 8005b92:	d034      	beq.n	8005bfe <_printf_float+0x27a>
 8005b94:	4a37      	ldr	r2, [pc, #220]	; (8005c74 <_printf_float+0x2f0>)
 8005b96:	2301      	movs	r3, #1
 8005b98:	4631      	mov	r1, r6
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	47b8      	blx	r7
 8005b9e:	3001      	adds	r0, #1
 8005ba0:	f43f af51 	beq.w	8005a46 <_printf_float+0xc2>
 8005ba4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	db02      	blt.n	8005bb2 <_printf_float+0x22e>
 8005bac:	6823      	ldr	r3, [r4, #0]
 8005bae:	07d8      	lsls	r0, r3, #31
 8005bb0:	d510      	bpl.n	8005bd4 <_printf_float+0x250>
 8005bb2:	ee18 3a10 	vmov	r3, s16
 8005bb6:	4652      	mov	r2, sl
 8005bb8:	4631      	mov	r1, r6
 8005bba:	4628      	mov	r0, r5
 8005bbc:	47b8      	blx	r7
 8005bbe:	3001      	adds	r0, #1
 8005bc0:	f43f af41 	beq.w	8005a46 <_printf_float+0xc2>
 8005bc4:	f04f 0800 	mov.w	r8, #0
 8005bc8:	f104 091a 	add.w	r9, r4, #26
 8005bcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	4543      	cmp	r3, r8
 8005bd2:	dc09      	bgt.n	8005be8 <_printf_float+0x264>
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	079b      	lsls	r3, r3, #30
 8005bd8:	f100 8105 	bmi.w	8005de6 <_printf_float+0x462>
 8005bdc:	68e0      	ldr	r0, [r4, #12]
 8005bde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005be0:	4298      	cmp	r0, r3
 8005be2:	bfb8      	it	lt
 8005be4:	4618      	movlt	r0, r3
 8005be6:	e730      	b.n	8005a4a <_printf_float+0xc6>
 8005be8:	2301      	movs	r3, #1
 8005bea:	464a      	mov	r2, r9
 8005bec:	4631      	mov	r1, r6
 8005bee:	4628      	mov	r0, r5
 8005bf0:	47b8      	blx	r7
 8005bf2:	3001      	adds	r0, #1
 8005bf4:	f43f af27 	beq.w	8005a46 <_printf_float+0xc2>
 8005bf8:	f108 0801 	add.w	r8, r8, #1
 8005bfc:	e7e6      	b.n	8005bcc <_printf_float+0x248>
 8005bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	dc39      	bgt.n	8005c78 <_printf_float+0x2f4>
 8005c04:	4a1b      	ldr	r2, [pc, #108]	; (8005c74 <_printf_float+0x2f0>)
 8005c06:	2301      	movs	r3, #1
 8005c08:	4631      	mov	r1, r6
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	47b8      	blx	r7
 8005c0e:	3001      	adds	r0, #1
 8005c10:	f43f af19 	beq.w	8005a46 <_printf_float+0xc2>
 8005c14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	d102      	bne.n	8005c22 <_printf_float+0x29e>
 8005c1c:	6823      	ldr	r3, [r4, #0]
 8005c1e:	07d9      	lsls	r1, r3, #31
 8005c20:	d5d8      	bpl.n	8005bd4 <_printf_float+0x250>
 8005c22:	ee18 3a10 	vmov	r3, s16
 8005c26:	4652      	mov	r2, sl
 8005c28:	4631      	mov	r1, r6
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	47b8      	blx	r7
 8005c2e:	3001      	adds	r0, #1
 8005c30:	f43f af09 	beq.w	8005a46 <_printf_float+0xc2>
 8005c34:	f04f 0900 	mov.w	r9, #0
 8005c38:	f104 0a1a 	add.w	sl, r4, #26
 8005c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c3e:	425b      	negs	r3, r3
 8005c40:	454b      	cmp	r3, r9
 8005c42:	dc01      	bgt.n	8005c48 <_printf_float+0x2c4>
 8005c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c46:	e792      	b.n	8005b6e <_printf_float+0x1ea>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	4652      	mov	r2, sl
 8005c4c:	4631      	mov	r1, r6
 8005c4e:	4628      	mov	r0, r5
 8005c50:	47b8      	blx	r7
 8005c52:	3001      	adds	r0, #1
 8005c54:	f43f aef7 	beq.w	8005a46 <_printf_float+0xc2>
 8005c58:	f109 0901 	add.w	r9, r9, #1
 8005c5c:	e7ee      	b.n	8005c3c <_printf_float+0x2b8>
 8005c5e:	bf00      	nop
 8005c60:	7fefffff 	.word	0x7fefffff
 8005c64:	08008e64 	.word	0x08008e64
 8005c68:	08008e68 	.word	0x08008e68
 8005c6c:	08008e70 	.word	0x08008e70
 8005c70:	08008e6c 	.word	0x08008e6c
 8005c74:	08008e74 	.word	0x08008e74
 8005c78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	bfa8      	it	ge
 8005c80:	461a      	movge	r2, r3
 8005c82:	2a00      	cmp	r2, #0
 8005c84:	4691      	mov	r9, r2
 8005c86:	dc37      	bgt.n	8005cf8 <_printf_float+0x374>
 8005c88:	f04f 0b00 	mov.w	fp, #0
 8005c8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c90:	f104 021a 	add.w	r2, r4, #26
 8005c94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c96:	9305      	str	r3, [sp, #20]
 8005c98:	eba3 0309 	sub.w	r3, r3, r9
 8005c9c:	455b      	cmp	r3, fp
 8005c9e:	dc33      	bgt.n	8005d08 <_printf_float+0x384>
 8005ca0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	db3b      	blt.n	8005d20 <_printf_float+0x39c>
 8005ca8:	6823      	ldr	r3, [r4, #0]
 8005caa:	07da      	lsls	r2, r3, #31
 8005cac:	d438      	bmi.n	8005d20 <_printf_float+0x39c>
 8005cae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cb0:	9b05      	ldr	r3, [sp, #20]
 8005cb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	eba2 0901 	sub.w	r9, r2, r1
 8005cba:	4599      	cmp	r9, r3
 8005cbc:	bfa8      	it	ge
 8005cbe:	4699      	movge	r9, r3
 8005cc0:	f1b9 0f00 	cmp.w	r9, #0
 8005cc4:	dc35      	bgt.n	8005d32 <_printf_float+0x3ae>
 8005cc6:	f04f 0800 	mov.w	r8, #0
 8005cca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cce:	f104 0a1a 	add.w	sl, r4, #26
 8005cd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cd6:	1a9b      	subs	r3, r3, r2
 8005cd8:	eba3 0309 	sub.w	r3, r3, r9
 8005cdc:	4543      	cmp	r3, r8
 8005cde:	f77f af79 	ble.w	8005bd4 <_printf_float+0x250>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	4652      	mov	r2, sl
 8005ce6:	4631      	mov	r1, r6
 8005ce8:	4628      	mov	r0, r5
 8005cea:	47b8      	blx	r7
 8005cec:	3001      	adds	r0, #1
 8005cee:	f43f aeaa 	beq.w	8005a46 <_printf_float+0xc2>
 8005cf2:	f108 0801 	add.w	r8, r8, #1
 8005cf6:	e7ec      	b.n	8005cd2 <_printf_float+0x34e>
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	4631      	mov	r1, r6
 8005cfc:	4642      	mov	r2, r8
 8005cfe:	4628      	mov	r0, r5
 8005d00:	47b8      	blx	r7
 8005d02:	3001      	adds	r0, #1
 8005d04:	d1c0      	bne.n	8005c88 <_printf_float+0x304>
 8005d06:	e69e      	b.n	8005a46 <_printf_float+0xc2>
 8005d08:	2301      	movs	r3, #1
 8005d0a:	4631      	mov	r1, r6
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	9205      	str	r2, [sp, #20]
 8005d10:	47b8      	blx	r7
 8005d12:	3001      	adds	r0, #1
 8005d14:	f43f ae97 	beq.w	8005a46 <_printf_float+0xc2>
 8005d18:	9a05      	ldr	r2, [sp, #20]
 8005d1a:	f10b 0b01 	add.w	fp, fp, #1
 8005d1e:	e7b9      	b.n	8005c94 <_printf_float+0x310>
 8005d20:	ee18 3a10 	vmov	r3, s16
 8005d24:	4652      	mov	r2, sl
 8005d26:	4631      	mov	r1, r6
 8005d28:	4628      	mov	r0, r5
 8005d2a:	47b8      	blx	r7
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	d1be      	bne.n	8005cae <_printf_float+0x32a>
 8005d30:	e689      	b.n	8005a46 <_printf_float+0xc2>
 8005d32:	9a05      	ldr	r2, [sp, #20]
 8005d34:	464b      	mov	r3, r9
 8005d36:	4442      	add	r2, r8
 8005d38:	4631      	mov	r1, r6
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	47b8      	blx	r7
 8005d3e:	3001      	adds	r0, #1
 8005d40:	d1c1      	bne.n	8005cc6 <_printf_float+0x342>
 8005d42:	e680      	b.n	8005a46 <_printf_float+0xc2>
 8005d44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d46:	2a01      	cmp	r2, #1
 8005d48:	dc01      	bgt.n	8005d4e <_printf_float+0x3ca>
 8005d4a:	07db      	lsls	r3, r3, #31
 8005d4c:	d538      	bpl.n	8005dc0 <_printf_float+0x43c>
 8005d4e:	2301      	movs	r3, #1
 8005d50:	4642      	mov	r2, r8
 8005d52:	4631      	mov	r1, r6
 8005d54:	4628      	mov	r0, r5
 8005d56:	47b8      	blx	r7
 8005d58:	3001      	adds	r0, #1
 8005d5a:	f43f ae74 	beq.w	8005a46 <_printf_float+0xc2>
 8005d5e:	ee18 3a10 	vmov	r3, s16
 8005d62:	4652      	mov	r2, sl
 8005d64:	4631      	mov	r1, r6
 8005d66:	4628      	mov	r0, r5
 8005d68:	47b8      	blx	r7
 8005d6a:	3001      	adds	r0, #1
 8005d6c:	f43f ae6b 	beq.w	8005a46 <_printf_float+0xc2>
 8005d70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d74:	2200      	movs	r2, #0
 8005d76:	2300      	movs	r3, #0
 8005d78:	f7fa fea6 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d7c:	b9d8      	cbnz	r0, 8005db6 <_printf_float+0x432>
 8005d7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d80:	f108 0201 	add.w	r2, r8, #1
 8005d84:	3b01      	subs	r3, #1
 8005d86:	4631      	mov	r1, r6
 8005d88:	4628      	mov	r0, r5
 8005d8a:	47b8      	blx	r7
 8005d8c:	3001      	adds	r0, #1
 8005d8e:	d10e      	bne.n	8005dae <_printf_float+0x42a>
 8005d90:	e659      	b.n	8005a46 <_printf_float+0xc2>
 8005d92:	2301      	movs	r3, #1
 8005d94:	4652      	mov	r2, sl
 8005d96:	4631      	mov	r1, r6
 8005d98:	4628      	mov	r0, r5
 8005d9a:	47b8      	blx	r7
 8005d9c:	3001      	adds	r0, #1
 8005d9e:	f43f ae52 	beq.w	8005a46 <_printf_float+0xc2>
 8005da2:	f108 0801 	add.w	r8, r8, #1
 8005da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005da8:	3b01      	subs	r3, #1
 8005daa:	4543      	cmp	r3, r8
 8005dac:	dcf1      	bgt.n	8005d92 <_printf_float+0x40e>
 8005dae:	464b      	mov	r3, r9
 8005db0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005db4:	e6dc      	b.n	8005b70 <_printf_float+0x1ec>
 8005db6:	f04f 0800 	mov.w	r8, #0
 8005dba:	f104 0a1a 	add.w	sl, r4, #26
 8005dbe:	e7f2      	b.n	8005da6 <_printf_float+0x422>
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	4642      	mov	r2, r8
 8005dc4:	e7df      	b.n	8005d86 <_printf_float+0x402>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	464a      	mov	r2, r9
 8005dca:	4631      	mov	r1, r6
 8005dcc:	4628      	mov	r0, r5
 8005dce:	47b8      	blx	r7
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	f43f ae38 	beq.w	8005a46 <_printf_float+0xc2>
 8005dd6:	f108 0801 	add.w	r8, r8, #1
 8005dda:	68e3      	ldr	r3, [r4, #12]
 8005ddc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005dde:	1a5b      	subs	r3, r3, r1
 8005de0:	4543      	cmp	r3, r8
 8005de2:	dcf0      	bgt.n	8005dc6 <_printf_float+0x442>
 8005de4:	e6fa      	b.n	8005bdc <_printf_float+0x258>
 8005de6:	f04f 0800 	mov.w	r8, #0
 8005dea:	f104 0919 	add.w	r9, r4, #25
 8005dee:	e7f4      	b.n	8005dda <_printf_float+0x456>

08005df0 <_printf_common>:
 8005df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005df4:	4616      	mov	r6, r2
 8005df6:	4699      	mov	r9, r3
 8005df8:	688a      	ldr	r2, [r1, #8]
 8005dfa:	690b      	ldr	r3, [r1, #16]
 8005dfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e00:	4293      	cmp	r3, r2
 8005e02:	bfb8      	it	lt
 8005e04:	4613      	movlt	r3, r2
 8005e06:	6033      	str	r3, [r6, #0]
 8005e08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e0c:	4607      	mov	r7, r0
 8005e0e:	460c      	mov	r4, r1
 8005e10:	b10a      	cbz	r2, 8005e16 <_printf_common+0x26>
 8005e12:	3301      	adds	r3, #1
 8005e14:	6033      	str	r3, [r6, #0]
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	0699      	lsls	r1, r3, #26
 8005e1a:	bf42      	ittt	mi
 8005e1c:	6833      	ldrmi	r3, [r6, #0]
 8005e1e:	3302      	addmi	r3, #2
 8005e20:	6033      	strmi	r3, [r6, #0]
 8005e22:	6825      	ldr	r5, [r4, #0]
 8005e24:	f015 0506 	ands.w	r5, r5, #6
 8005e28:	d106      	bne.n	8005e38 <_printf_common+0x48>
 8005e2a:	f104 0a19 	add.w	sl, r4, #25
 8005e2e:	68e3      	ldr	r3, [r4, #12]
 8005e30:	6832      	ldr	r2, [r6, #0]
 8005e32:	1a9b      	subs	r3, r3, r2
 8005e34:	42ab      	cmp	r3, r5
 8005e36:	dc26      	bgt.n	8005e86 <_printf_common+0x96>
 8005e38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e3c:	1e13      	subs	r3, r2, #0
 8005e3e:	6822      	ldr	r2, [r4, #0]
 8005e40:	bf18      	it	ne
 8005e42:	2301      	movne	r3, #1
 8005e44:	0692      	lsls	r2, r2, #26
 8005e46:	d42b      	bmi.n	8005ea0 <_printf_common+0xb0>
 8005e48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e4c:	4649      	mov	r1, r9
 8005e4e:	4638      	mov	r0, r7
 8005e50:	47c0      	blx	r8
 8005e52:	3001      	adds	r0, #1
 8005e54:	d01e      	beq.n	8005e94 <_printf_common+0xa4>
 8005e56:	6823      	ldr	r3, [r4, #0]
 8005e58:	68e5      	ldr	r5, [r4, #12]
 8005e5a:	6832      	ldr	r2, [r6, #0]
 8005e5c:	f003 0306 	and.w	r3, r3, #6
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	bf08      	it	eq
 8005e64:	1aad      	subeq	r5, r5, r2
 8005e66:	68a3      	ldr	r3, [r4, #8]
 8005e68:	6922      	ldr	r2, [r4, #16]
 8005e6a:	bf0c      	ite	eq
 8005e6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e70:	2500      	movne	r5, #0
 8005e72:	4293      	cmp	r3, r2
 8005e74:	bfc4      	itt	gt
 8005e76:	1a9b      	subgt	r3, r3, r2
 8005e78:	18ed      	addgt	r5, r5, r3
 8005e7a:	2600      	movs	r6, #0
 8005e7c:	341a      	adds	r4, #26
 8005e7e:	42b5      	cmp	r5, r6
 8005e80:	d11a      	bne.n	8005eb8 <_printf_common+0xc8>
 8005e82:	2000      	movs	r0, #0
 8005e84:	e008      	b.n	8005e98 <_printf_common+0xa8>
 8005e86:	2301      	movs	r3, #1
 8005e88:	4652      	mov	r2, sl
 8005e8a:	4649      	mov	r1, r9
 8005e8c:	4638      	mov	r0, r7
 8005e8e:	47c0      	blx	r8
 8005e90:	3001      	adds	r0, #1
 8005e92:	d103      	bne.n	8005e9c <_printf_common+0xac>
 8005e94:	f04f 30ff 	mov.w	r0, #4294967295
 8005e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e9c:	3501      	adds	r5, #1
 8005e9e:	e7c6      	b.n	8005e2e <_printf_common+0x3e>
 8005ea0:	18e1      	adds	r1, r4, r3
 8005ea2:	1c5a      	adds	r2, r3, #1
 8005ea4:	2030      	movs	r0, #48	; 0x30
 8005ea6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005eaa:	4422      	add	r2, r4
 8005eac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005eb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005eb4:	3302      	adds	r3, #2
 8005eb6:	e7c7      	b.n	8005e48 <_printf_common+0x58>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	4622      	mov	r2, r4
 8005ebc:	4649      	mov	r1, r9
 8005ebe:	4638      	mov	r0, r7
 8005ec0:	47c0      	blx	r8
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	d0e6      	beq.n	8005e94 <_printf_common+0xa4>
 8005ec6:	3601      	adds	r6, #1
 8005ec8:	e7d9      	b.n	8005e7e <_printf_common+0x8e>
	...

08005ecc <_printf_i>:
 8005ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ed0:	460c      	mov	r4, r1
 8005ed2:	4691      	mov	r9, r2
 8005ed4:	7e27      	ldrb	r7, [r4, #24]
 8005ed6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005ed8:	2f78      	cmp	r7, #120	; 0x78
 8005eda:	4680      	mov	r8, r0
 8005edc:	469a      	mov	sl, r3
 8005ede:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ee2:	d807      	bhi.n	8005ef4 <_printf_i+0x28>
 8005ee4:	2f62      	cmp	r7, #98	; 0x62
 8005ee6:	d80a      	bhi.n	8005efe <_printf_i+0x32>
 8005ee8:	2f00      	cmp	r7, #0
 8005eea:	f000 80d8 	beq.w	800609e <_printf_i+0x1d2>
 8005eee:	2f58      	cmp	r7, #88	; 0x58
 8005ef0:	f000 80a3 	beq.w	800603a <_printf_i+0x16e>
 8005ef4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ef8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005efc:	e03a      	b.n	8005f74 <_printf_i+0xa8>
 8005efe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f02:	2b15      	cmp	r3, #21
 8005f04:	d8f6      	bhi.n	8005ef4 <_printf_i+0x28>
 8005f06:	a001      	add	r0, pc, #4	; (adr r0, 8005f0c <_printf_i+0x40>)
 8005f08:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005f0c:	08005f65 	.word	0x08005f65
 8005f10:	08005f79 	.word	0x08005f79
 8005f14:	08005ef5 	.word	0x08005ef5
 8005f18:	08005ef5 	.word	0x08005ef5
 8005f1c:	08005ef5 	.word	0x08005ef5
 8005f20:	08005ef5 	.word	0x08005ef5
 8005f24:	08005f79 	.word	0x08005f79
 8005f28:	08005ef5 	.word	0x08005ef5
 8005f2c:	08005ef5 	.word	0x08005ef5
 8005f30:	08005ef5 	.word	0x08005ef5
 8005f34:	08005ef5 	.word	0x08005ef5
 8005f38:	08006085 	.word	0x08006085
 8005f3c:	08005fa9 	.word	0x08005fa9
 8005f40:	08006067 	.word	0x08006067
 8005f44:	08005ef5 	.word	0x08005ef5
 8005f48:	08005ef5 	.word	0x08005ef5
 8005f4c:	080060a7 	.word	0x080060a7
 8005f50:	08005ef5 	.word	0x08005ef5
 8005f54:	08005fa9 	.word	0x08005fa9
 8005f58:	08005ef5 	.word	0x08005ef5
 8005f5c:	08005ef5 	.word	0x08005ef5
 8005f60:	0800606f 	.word	0x0800606f
 8005f64:	680b      	ldr	r3, [r1, #0]
 8005f66:	1d1a      	adds	r2, r3, #4
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	600a      	str	r2, [r1, #0]
 8005f6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f74:	2301      	movs	r3, #1
 8005f76:	e0a3      	b.n	80060c0 <_printf_i+0x1f4>
 8005f78:	6825      	ldr	r5, [r4, #0]
 8005f7a:	6808      	ldr	r0, [r1, #0]
 8005f7c:	062e      	lsls	r6, r5, #24
 8005f7e:	f100 0304 	add.w	r3, r0, #4
 8005f82:	d50a      	bpl.n	8005f9a <_printf_i+0xce>
 8005f84:	6805      	ldr	r5, [r0, #0]
 8005f86:	600b      	str	r3, [r1, #0]
 8005f88:	2d00      	cmp	r5, #0
 8005f8a:	da03      	bge.n	8005f94 <_printf_i+0xc8>
 8005f8c:	232d      	movs	r3, #45	; 0x2d
 8005f8e:	426d      	negs	r5, r5
 8005f90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f94:	485e      	ldr	r0, [pc, #376]	; (8006110 <_printf_i+0x244>)
 8005f96:	230a      	movs	r3, #10
 8005f98:	e019      	b.n	8005fce <_printf_i+0x102>
 8005f9a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005f9e:	6805      	ldr	r5, [r0, #0]
 8005fa0:	600b      	str	r3, [r1, #0]
 8005fa2:	bf18      	it	ne
 8005fa4:	b22d      	sxthne	r5, r5
 8005fa6:	e7ef      	b.n	8005f88 <_printf_i+0xbc>
 8005fa8:	680b      	ldr	r3, [r1, #0]
 8005faa:	6825      	ldr	r5, [r4, #0]
 8005fac:	1d18      	adds	r0, r3, #4
 8005fae:	6008      	str	r0, [r1, #0]
 8005fb0:	0628      	lsls	r0, r5, #24
 8005fb2:	d501      	bpl.n	8005fb8 <_printf_i+0xec>
 8005fb4:	681d      	ldr	r5, [r3, #0]
 8005fb6:	e002      	b.n	8005fbe <_printf_i+0xf2>
 8005fb8:	0669      	lsls	r1, r5, #25
 8005fba:	d5fb      	bpl.n	8005fb4 <_printf_i+0xe8>
 8005fbc:	881d      	ldrh	r5, [r3, #0]
 8005fbe:	4854      	ldr	r0, [pc, #336]	; (8006110 <_printf_i+0x244>)
 8005fc0:	2f6f      	cmp	r7, #111	; 0x6f
 8005fc2:	bf0c      	ite	eq
 8005fc4:	2308      	moveq	r3, #8
 8005fc6:	230a      	movne	r3, #10
 8005fc8:	2100      	movs	r1, #0
 8005fca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fce:	6866      	ldr	r6, [r4, #4]
 8005fd0:	60a6      	str	r6, [r4, #8]
 8005fd2:	2e00      	cmp	r6, #0
 8005fd4:	bfa2      	ittt	ge
 8005fd6:	6821      	ldrge	r1, [r4, #0]
 8005fd8:	f021 0104 	bicge.w	r1, r1, #4
 8005fdc:	6021      	strge	r1, [r4, #0]
 8005fde:	b90d      	cbnz	r5, 8005fe4 <_printf_i+0x118>
 8005fe0:	2e00      	cmp	r6, #0
 8005fe2:	d04d      	beq.n	8006080 <_printf_i+0x1b4>
 8005fe4:	4616      	mov	r6, r2
 8005fe6:	fbb5 f1f3 	udiv	r1, r5, r3
 8005fea:	fb03 5711 	mls	r7, r3, r1, r5
 8005fee:	5dc7      	ldrb	r7, [r0, r7]
 8005ff0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ff4:	462f      	mov	r7, r5
 8005ff6:	42bb      	cmp	r3, r7
 8005ff8:	460d      	mov	r5, r1
 8005ffa:	d9f4      	bls.n	8005fe6 <_printf_i+0x11a>
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	d10b      	bne.n	8006018 <_printf_i+0x14c>
 8006000:	6823      	ldr	r3, [r4, #0]
 8006002:	07df      	lsls	r7, r3, #31
 8006004:	d508      	bpl.n	8006018 <_printf_i+0x14c>
 8006006:	6923      	ldr	r3, [r4, #16]
 8006008:	6861      	ldr	r1, [r4, #4]
 800600a:	4299      	cmp	r1, r3
 800600c:	bfde      	ittt	le
 800600e:	2330      	movle	r3, #48	; 0x30
 8006010:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006014:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006018:	1b92      	subs	r2, r2, r6
 800601a:	6122      	str	r2, [r4, #16]
 800601c:	f8cd a000 	str.w	sl, [sp]
 8006020:	464b      	mov	r3, r9
 8006022:	aa03      	add	r2, sp, #12
 8006024:	4621      	mov	r1, r4
 8006026:	4640      	mov	r0, r8
 8006028:	f7ff fee2 	bl	8005df0 <_printf_common>
 800602c:	3001      	adds	r0, #1
 800602e:	d14c      	bne.n	80060ca <_printf_i+0x1fe>
 8006030:	f04f 30ff 	mov.w	r0, #4294967295
 8006034:	b004      	add	sp, #16
 8006036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800603a:	4835      	ldr	r0, [pc, #212]	; (8006110 <_printf_i+0x244>)
 800603c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006040:	6823      	ldr	r3, [r4, #0]
 8006042:	680e      	ldr	r6, [r1, #0]
 8006044:	061f      	lsls	r7, r3, #24
 8006046:	f856 5b04 	ldr.w	r5, [r6], #4
 800604a:	600e      	str	r6, [r1, #0]
 800604c:	d514      	bpl.n	8006078 <_printf_i+0x1ac>
 800604e:	07d9      	lsls	r1, r3, #31
 8006050:	bf44      	itt	mi
 8006052:	f043 0320 	orrmi.w	r3, r3, #32
 8006056:	6023      	strmi	r3, [r4, #0]
 8006058:	b91d      	cbnz	r5, 8006062 <_printf_i+0x196>
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	f023 0320 	bic.w	r3, r3, #32
 8006060:	6023      	str	r3, [r4, #0]
 8006062:	2310      	movs	r3, #16
 8006064:	e7b0      	b.n	8005fc8 <_printf_i+0xfc>
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	f043 0320 	orr.w	r3, r3, #32
 800606c:	6023      	str	r3, [r4, #0]
 800606e:	2378      	movs	r3, #120	; 0x78
 8006070:	4828      	ldr	r0, [pc, #160]	; (8006114 <_printf_i+0x248>)
 8006072:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006076:	e7e3      	b.n	8006040 <_printf_i+0x174>
 8006078:	065e      	lsls	r6, r3, #25
 800607a:	bf48      	it	mi
 800607c:	b2ad      	uxthmi	r5, r5
 800607e:	e7e6      	b.n	800604e <_printf_i+0x182>
 8006080:	4616      	mov	r6, r2
 8006082:	e7bb      	b.n	8005ffc <_printf_i+0x130>
 8006084:	680b      	ldr	r3, [r1, #0]
 8006086:	6826      	ldr	r6, [r4, #0]
 8006088:	6960      	ldr	r0, [r4, #20]
 800608a:	1d1d      	adds	r5, r3, #4
 800608c:	600d      	str	r5, [r1, #0]
 800608e:	0635      	lsls	r5, r6, #24
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	d501      	bpl.n	8006098 <_printf_i+0x1cc>
 8006094:	6018      	str	r0, [r3, #0]
 8006096:	e002      	b.n	800609e <_printf_i+0x1d2>
 8006098:	0671      	lsls	r1, r6, #25
 800609a:	d5fb      	bpl.n	8006094 <_printf_i+0x1c8>
 800609c:	8018      	strh	r0, [r3, #0]
 800609e:	2300      	movs	r3, #0
 80060a0:	6123      	str	r3, [r4, #16]
 80060a2:	4616      	mov	r6, r2
 80060a4:	e7ba      	b.n	800601c <_printf_i+0x150>
 80060a6:	680b      	ldr	r3, [r1, #0]
 80060a8:	1d1a      	adds	r2, r3, #4
 80060aa:	600a      	str	r2, [r1, #0]
 80060ac:	681e      	ldr	r6, [r3, #0]
 80060ae:	6862      	ldr	r2, [r4, #4]
 80060b0:	2100      	movs	r1, #0
 80060b2:	4630      	mov	r0, r6
 80060b4:	f7fa f894 	bl	80001e0 <memchr>
 80060b8:	b108      	cbz	r0, 80060be <_printf_i+0x1f2>
 80060ba:	1b80      	subs	r0, r0, r6
 80060bc:	6060      	str	r0, [r4, #4]
 80060be:	6863      	ldr	r3, [r4, #4]
 80060c0:	6123      	str	r3, [r4, #16]
 80060c2:	2300      	movs	r3, #0
 80060c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060c8:	e7a8      	b.n	800601c <_printf_i+0x150>
 80060ca:	6923      	ldr	r3, [r4, #16]
 80060cc:	4632      	mov	r2, r6
 80060ce:	4649      	mov	r1, r9
 80060d0:	4640      	mov	r0, r8
 80060d2:	47d0      	blx	sl
 80060d4:	3001      	adds	r0, #1
 80060d6:	d0ab      	beq.n	8006030 <_printf_i+0x164>
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	079b      	lsls	r3, r3, #30
 80060dc:	d413      	bmi.n	8006106 <_printf_i+0x23a>
 80060de:	68e0      	ldr	r0, [r4, #12]
 80060e0:	9b03      	ldr	r3, [sp, #12]
 80060e2:	4298      	cmp	r0, r3
 80060e4:	bfb8      	it	lt
 80060e6:	4618      	movlt	r0, r3
 80060e8:	e7a4      	b.n	8006034 <_printf_i+0x168>
 80060ea:	2301      	movs	r3, #1
 80060ec:	4632      	mov	r2, r6
 80060ee:	4649      	mov	r1, r9
 80060f0:	4640      	mov	r0, r8
 80060f2:	47d0      	blx	sl
 80060f4:	3001      	adds	r0, #1
 80060f6:	d09b      	beq.n	8006030 <_printf_i+0x164>
 80060f8:	3501      	adds	r5, #1
 80060fa:	68e3      	ldr	r3, [r4, #12]
 80060fc:	9903      	ldr	r1, [sp, #12]
 80060fe:	1a5b      	subs	r3, r3, r1
 8006100:	42ab      	cmp	r3, r5
 8006102:	dcf2      	bgt.n	80060ea <_printf_i+0x21e>
 8006104:	e7eb      	b.n	80060de <_printf_i+0x212>
 8006106:	2500      	movs	r5, #0
 8006108:	f104 0619 	add.w	r6, r4, #25
 800610c:	e7f5      	b.n	80060fa <_printf_i+0x22e>
 800610e:	bf00      	nop
 8006110:	08008e76 	.word	0x08008e76
 8006114:	08008e87 	.word	0x08008e87

08006118 <quorem>:
 8006118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611c:	6903      	ldr	r3, [r0, #16]
 800611e:	690c      	ldr	r4, [r1, #16]
 8006120:	42a3      	cmp	r3, r4
 8006122:	4607      	mov	r7, r0
 8006124:	f2c0 8081 	blt.w	800622a <quorem+0x112>
 8006128:	3c01      	subs	r4, #1
 800612a:	f101 0814 	add.w	r8, r1, #20
 800612e:	f100 0514 	add.w	r5, r0, #20
 8006132:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006136:	9301      	str	r3, [sp, #4]
 8006138:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800613c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006140:	3301      	adds	r3, #1
 8006142:	429a      	cmp	r2, r3
 8006144:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006148:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800614c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006150:	d331      	bcc.n	80061b6 <quorem+0x9e>
 8006152:	f04f 0e00 	mov.w	lr, #0
 8006156:	4640      	mov	r0, r8
 8006158:	46ac      	mov	ip, r5
 800615a:	46f2      	mov	sl, lr
 800615c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006160:	b293      	uxth	r3, r2
 8006162:	fb06 e303 	mla	r3, r6, r3, lr
 8006166:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800616a:	b29b      	uxth	r3, r3
 800616c:	ebaa 0303 	sub.w	r3, sl, r3
 8006170:	0c12      	lsrs	r2, r2, #16
 8006172:	f8dc a000 	ldr.w	sl, [ip]
 8006176:	fb06 e202 	mla	r2, r6, r2, lr
 800617a:	fa13 f38a 	uxtah	r3, r3, sl
 800617e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006182:	fa1f fa82 	uxth.w	sl, r2
 8006186:	f8dc 2000 	ldr.w	r2, [ip]
 800618a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800618e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006192:	b29b      	uxth	r3, r3
 8006194:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006198:	4581      	cmp	r9, r0
 800619a:	f84c 3b04 	str.w	r3, [ip], #4
 800619e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80061a2:	d2db      	bcs.n	800615c <quorem+0x44>
 80061a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80061a8:	b92b      	cbnz	r3, 80061b6 <quorem+0x9e>
 80061aa:	9b01      	ldr	r3, [sp, #4]
 80061ac:	3b04      	subs	r3, #4
 80061ae:	429d      	cmp	r5, r3
 80061b0:	461a      	mov	r2, r3
 80061b2:	d32e      	bcc.n	8006212 <quorem+0xfa>
 80061b4:	613c      	str	r4, [r7, #16]
 80061b6:	4638      	mov	r0, r7
 80061b8:	f001 f8be 	bl	8007338 <__mcmp>
 80061bc:	2800      	cmp	r0, #0
 80061be:	db24      	blt.n	800620a <quorem+0xf2>
 80061c0:	3601      	adds	r6, #1
 80061c2:	4628      	mov	r0, r5
 80061c4:	f04f 0c00 	mov.w	ip, #0
 80061c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80061cc:	f8d0 e000 	ldr.w	lr, [r0]
 80061d0:	b293      	uxth	r3, r2
 80061d2:	ebac 0303 	sub.w	r3, ip, r3
 80061d6:	0c12      	lsrs	r2, r2, #16
 80061d8:	fa13 f38e 	uxtah	r3, r3, lr
 80061dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80061e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061ea:	45c1      	cmp	r9, r8
 80061ec:	f840 3b04 	str.w	r3, [r0], #4
 80061f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80061f4:	d2e8      	bcs.n	80061c8 <quorem+0xb0>
 80061f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061fe:	b922      	cbnz	r2, 800620a <quorem+0xf2>
 8006200:	3b04      	subs	r3, #4
 8006202:	429d      	cmp	r5, r3
 8006204:	461a      	mov	r2, r3
 8006206:	d30a      	bcc.n	800621e <quorem+0x106>
 8006208:	613c      	str	r4, [r7, #16]
 800620a:	4630      	mov	r0, r6
 800620c:	b003      	add	sp, #12
 800620e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006212:	6812      	ldr	r2, [r2, #0]
 8006214:	3b04      	subs	r3, #4
 8006216:	2a00      	cmp	r2, #0
 8006218:	d1cc      	bne.n	80061b4 <quorem+0x9c>
 800621a:	3c01      	subs	r4, #1
 800621c:	e7c7      	b.n	80061ae <quorem+0x96>
 800621e:	6812      	ldr	r2, [r2, #0]
 8006220:	3b04      	subs	r3, #4
 8006222:	2a00      	cmp	r2, #0
 8006224:	d1f0      	bne.n	8006208 <quorem+0xf0>
 8006226:	3c01      	subs	r4, #1
 8006228:	e7eb      	b.n	8006202 <quorem+0xea>
 800622a:	2000      	movs	r0, #0
 800622c:	e7ee      	b.n	800620c <quorem+0xf4>
	...

08006230 <_dtoa_r>:
 8006230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006234:	ed2d 8b02 	vpush	{d8}
 8006238:	ec57 6b10 	vmov	r6, r7, d0
 800623c:	b095      	sub	sp, #84	; 0x54
 800623e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006240:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006244:	9105      	str	r1, [sp, #20]
 8006246:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800624a:	4604      	mov	r4, r0
 800624c:	9209      	str	r2, [sp, #36]	; 0x24
 800624e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006250:	b975      	cbnz	r5, 8006270 <_dtoa_r+0x40>
 8006252:	2010      	movs	r0, #16
 8006254:	f000 fddc 	bl	8006e10 <malloc>
 8006258:	4602      	mov	r2, r0
 800625a:	6260      	str	r0, [r4, #36]	; 0x24
 800625c:	b920      	cbnz	r0, 8006268 <_dtoa_r+0x38>
 800625e:	4bb2      	ldr	r3, [pc, #712]	; (8006528 <_dtoa_r+0x2f8>)
 8006260:	21ea      	movs	r1, #234	; 0xea
 8006262:	48b2      	ldr	r0, [pc, #712]	; (800652c <_dtoa_r+0x2fc>)
 8006264:	f001 fa32 	bl	80076cc <__assert_func>
 8006268:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800626c:	6005      	str	r5, [r0, #0]
 800626e:	60c5      	str	r5, [r0, #12]
 8006270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006272:	6819      	ldr	r1, [r3, #0]
 8006274:	b151      	cbz	r1, 800628c <_dtoa_r+0x5c>
 8006276:	685a      	ldr	r2, [r3, #4]
 8006278:	604a      	str	r2, [r1, #4]
 800627a:	2301      	movs	r3, #1
 800627c:	4093      	lsls	r3, r2
 800627e:	608b      	str	r3, [r1, #8]
 8006280:	4620      	mov	r0, r4
 8006282:	f000 fe1b 	bl	8006ebc <_Bfree>
 8006286:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006288:	2200      	movs	r2, #0
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	1e3b      	subs	r3, r7, #0
 800628e:	bfb9      	ittee	lt
 8006290:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006294:	9303      	strlt	r3, [sp, #12]
 8006296:	2300      	movge	r3, #0
 8006298:	f8c8 3000 	strge.w	r3, [r8]
 800629c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80062a0:	4ba3      	ldr	r3, [pc, #652]	; (8006530 <_dtoa_r+0x300>)
 80062a2:	bfbc      	itt	lt
 80062a4:	2201      	movlt	r2, #1
 80062a6:	f8c8 2000 	strlt.w	r2, [r8]
 80062aa:	ea33 0309 	bics.w	r3, r3, r9
 80062ae:	d11b      	bne.n	80062e8 <_dtoa_r+0xb8>
 80062b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80062b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80062b6:	6013      	str	r3, [r2, #0]
 80062b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80062bc:	4333      	orrs	r3, r6
 80062be:	f000 857a 	beq.w	8006db6 <_dtoa_r+0xb86>
 80062c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062c4:	b963      	cbnz	r3, 80062e0 <_dtoa_r+0xb0>
 80062c6:	4b9b      	ldr	r3, [pc, #620]	; (8006534 <_dtoa_r+0x304>)
 80062c8:	e024      	b.n	8006314 <_dtoa_r+0xe4>
 80062ca:	4b9b      	ldr	r3, [pc, #620]	; (8006538 <_dtoa_r+0x308>)
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	3308      	adds	r3, #8
 80062d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80062d2:	6013      	str	r3, [r2, #0]
 80062d4:	9800      	ldr	r0, [sp, #0]
 80062d6:	b015      	add	sp, #84	; 0x54
 80062d8:	ecbd 8b02 	vpop	{d8}
 80062dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062e0:	4b94      	ldr	r3, [pc, #592]	; (8006534 <_dtoa_r+0x304>)
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	3303      	adds	r3, #3
 80062e6:	e7f3      	b.n	80062d0 <_dtoa_r+0xa0>
 80062e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80062ec:	2200      	movs	r2, #0
 80062ee:	ec51 0b17 	vmov	r0, r1, d7
 80062f2:	2300      	movs	r3, #0
 80062f4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80062f8:	f7fa fbe6 	bl	8000ac8 <__aeabi_dcmpeq>
 80062fc:	4680      	mov	r8, r0
 80062fe:	b158      	cbz	r0, 8006318 <_dtoa_r+0xe8>
 8006300:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006302:	2301      	movs	r3, #1
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 8551 	beq.w	8006db0 <_dtoa_r+0xb80>
 800630e:	488b      	ldr	r0, [pc, #556]	; (800653c <_dtoa_r+0x30c>)
 8006310:	6018      	str	r0, [r3, #0]
 8006312:	1e43      	subs	r3, r0, #1
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	e7dd      	b.n	80062d4 <_dtoa_r+0xa4>
 8006318:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800631c:	aa12      	add	r2, sp, #72	; 0x48
 800631e:	a913      	add	r1, sp, #76	; 0x4c
 8006320:	4620      	mov	r0, r4
 8006322:	f001 f8ad 	bl	8007480 <__d2b>
 8006326:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800632a:	4683      	mov	fp, r0
 800632c:	2d00      	cmp	r5, #0
 800632e:	d07c      	beq.n	800642a <_dtoa_r+0x1fa>
 8006330:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006332:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006336:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800633a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800633e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006342:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006346:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800634a:	4b7d      	ldr	r3, [pc, #500]	; (8006540 <_dtoa_r+0x310>)
 800634c:	2200      	movs	r2, #0
 800634e:	4630      	mov	r0, r6
 8006350:	4639      	mov	r1, r7
 8006352:	f7f9 ff99 	bl	8000288 <__aeabi_dsub>
 8006356:	a36e      	add	r3, pc, #440	; (adr r3, 8006510 <_dtoa_r+0x2e0>)
 8006358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635c:	f7fa f94c 	bl	80005f8 <__aeabi_dmul>
 8006360:	a36d      	add	r3, pc, #436	; (adr r3, 8006518 <_dtoa_r+0x2e8>)
 8006362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006366:	f7f9 ff91 	bl	800028c <__adddf3>
 800636a:	4606      	mov	r6, r0
 800636c:	4628      	mov	r0, r5
 800636e:	460f      	mov	r7, r1
 8006370:	f7fa f8d8 	bl	8000524 <__aeabi_i2d>
 8006374:	a36a      	add	r3, pc, #424	; (adr r3, 8006520 <_dtoa_r+0x2f0>)
 8006376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637a:	f7fa f93d 	bl	80005f8 <__aeabi_dmul>
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	4630      	mov	r0, r6
 8006384:	4639      	mov	r1, r7
 8006386:	f7f9 ff81 	bl	800028c <__adddf3>
 800638a:	4606      	mov	r6, r0
 800638c:	460f      	mov	r7, r1
 800638e:	f7fa fbe3 	bl	8000b58 <__aeabi_d2iz>
 8006392:	2200      	movs	r2, #0
 8006394:	4682      	mov	sl, r0
 8006396:	2300      	movs	r3, #0
 8006398:	4630      	mov	r0, r6
 800639a:	4639      	mov	r1, r7
 800639c:	f7fa fb9e 	bl	8000adc <__aeabi_dcmplt>
 80063a0:	b148      	cbz	r0, 80063b6 <_dtoa_r+0x186>
 80063a2:	4650      	mov	r0, sl
 80063a4:	f7fa f8be 	bl	8000524 <__aeabi_i2d>
 80063a8:	4632      	mov	r2, r6
 80063aa:	463b      	mov	r3, r7
 80063ac:	f7fa fb8c 	bl	8000ac8 <__aeabi_dcmpeq>
 80063b0:	b908      	cbnz	r0, 80063b6 <_dtoa_r+0x186>
 80063b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063b6:	f1ba 0f16 	cmp.w	sl, #22
 80063ba:	d854      	bhi.n	8006466 <_dtoa_r+0x236>
 80063bc:	4b61      	ldr	r3, [pc, #388]	; (8006544 <_dtoa_r+0x314>)
 80063be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80063c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80063ca:	f7fa fb87 	bl	8000adc <__aeabi_dcmplt>
 80063ce:	2800      	cmp	r0, #0
 80063d0:	d04b      	beq.n	800646a <_dtoa_r+0x23a>
 80063d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063d6:	2300      	movs	r3, #0
 80063d8:	930e      	str	r3, [sp, #56]	; 0x38
 80063da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063dc:	1b5d      	subs	r5, r3, r5
 80063de:	1e6b      	subs	r3, r5, #1
 80063e0:	9304      	str	r3, [sp, #16]
 80063e2:	bf43      	ittte	mi
 80063e4:	2300      	movmi	r3, #0
 80063e6:	f1c5 0801 	rsbmi	r8, r5, #1
 80063ea:	9304      	strmi	r3, [sp, #16]
 80063ec:	f04f 0800 	movpl.w	r8, #0
 80063f0:	f1ba 0f00 	cmp.w	sl, #0
 80063f4:	db3b      	blt.n	800646e <_dtoa_r+0x23e>
 80063f6:	9b04      	ldr	r3, [sp, #16]
 80063f8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80063fc:	4453      	add	r3, sl
 80063fe:	9304      	str	r3, [sp, #16]
 8006400:	2300      	movs	r3, #0
 8006402:	9306      	str	r3, [sp, #24]
 8006404:	9b05      	ldr	r3, [sp, #20]
 8006406:	2b09      	cmp	r3, #9
 8006408:	d869      	bhi.n	80064de <_dtoa_r+0x2ae>
 800640a:	2b05      	cmp	r3, #5
 800640c:	bfc4      	itt	gt
 800640e:	3b04      	subgt	r3, #4
 8006410:	9305      	strgt	r3, [sp, #20]
 8006412:	9b05      	ldr	r3, [sp, #20]
 8006414:	f1a3 0302 	sub.w	r3, r3, #2
 8006418:	bfcc      	ite	gt
 800641a:	2500      	movgt	r5, #0
 800641c:	2501      	movle	r5, #1
 800641e:	2b03      	cmp	r3, #3
 8006420:	d869      	bhi.n	80064f6 <_dtoa_r+0x2c6>
 8006422:	e8df f003 	tbb	[pc, r3]
 8006426:	4e2c      	.short	0x4e2c
 8006428:	5a4c      	.short	0x5a4c
 800642a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800642e:	441d      	add	r5, r3
 8006430:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006434:	2b20      	cmp	r3, #32
 8006436:	bfc1      	itttt	gt
 8006438:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800643c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006440:	fa09 f303 	lslgt.w	r3, r9, r3
 8006444:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006448:	bfda      	itte	le
 800644a:	f1c3 0320 	rsble	r3, r3, #32
 800644e:	fa06 f003 	lslle.w	r0, r6, r3
 8006452:	4318      	orrgt	r0, r3
 8006454:	f7fa f856 	bl	8000504 <__aeabi_ui2d>
 8006458:	2301      	movs	r3, #1
 800645a:	4606      	mov	r6, r0
 800645c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006460:	3d01      	subs	r5, #1
 8006462:	9310      	str	r3, [sp, #64]	; 0x40
 8006464:	e771      	b.n	800634a <_dtoa_r+0x11a>
 8006466:	2301      	movs	r3, #1
 8006468:	e7b6      	b.n	80063d8 <_dtoa_r+0x1a8>
 800646a:	900e      	str	r0, [sp, #56]	; 0x38
 800646c:	e7b5      	b.n	80063da <_dtoa_r+0x1aa>
 800646e:	f1ca 0300 	rsb	r3, sl, #0
 8006472:	9306      	str	r3, [sp, #24]
 8006474:	2300      	movs	r3, #0
 8006476:	eba8 080a 	sub.w	r8, r8, sl
 800647a:	930d      	str	r3, [sp, #52]	; 0x34
 800647c:	e7c2      	b.n	8006404 <_dtoa_r+0x1d4>
 800647e:	2300      	movs	r3, #0
 8006480:	9308      	str	r3, [sp, #32]
 8006482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006484:	2b00      	cmp	r3, #0
 8006486:	dc39      	bgt.n	80064fc <_dtoa_r+0x2cc>
 8006488:	f04f 0901 	mov.w	r9, #1
 800648c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006490:	464b      	mov	r3, r9
 8006492:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006496:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006498:	2200      	movs	r2, #0
 800649a:	6042      	str	r2, [r0, #4]
 800649c:	2204      	movs	r2, #4
 800649e:	f102 0614 	add.w	r6, r2, #20
 80064a2:	429e      	cmp	r6, r3
 80064a4:	6841      	ldr	r1, [r0, #4]
 80064a6:	d92f      	bls.n	8006508 <_dtoa_r+0x2d8>
 80064a8:	4620      	mov	r0, r4
 80064aa:	f000 fcc7 	bl	8006e3c <_Balloc>
 80064ae:	9000      	str	r0, [sp, #0]
 80064b0:	2800      	cmp	r0, #0
 80064b2:	d14b      	bne.n	800654c <_dtoa_r+0x31c>
 80064b4:	4b24      	ldr	r3, [pc, #144]	; (8006548 <_dtoa_r+0x318>)
 80064b6:	4602      	mov	r2, r0
 80064b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80064bc:	e6d1      	b.n	8006262 <_dtoa_r+0x32>
 80064be:	2301      	movs	r3, #1
 80064c0:	e7de      	b.n	8006480 <_dtoa_r+0x250>
 80064c2:	2300      	movs	r3, #0
 80064c4:	9308      	str	r3, [sp, #32]
 80064c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064c8:	eb0a 0903 	add.w	r9, sl, r3
 80064cc:	f109 0301 	add.w	r3, r9, #1
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	9301      	str	r3, [sp, #4]
 80064d4:	bfb8      	it	lt
 80064d6:	2301      	movlt	r3, #1
 80064d8:	e7dd      	b.n	8006496 <_dtoa_r+0x266>
 80064da:	2301      	movs	r3, #1
 80064dc:	e7f2      	b.n	80064c4 <_dtoa_r+0x294>
 80064de:	2501      	movs	r5, #1
 80064e0:	2300      	movs	r3, #0
 80064e2:	9305      	str	r3, [sp, #20]
 80064e4:	9508      	str	r5, [sp, #32]
 80064e6:	f04f 39ff 	mov.w	r9, #4294967295
 80064ea:	2200      	movs	r2, #0
 80064ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80064f0:	2312      	movs	r3, #18
 80064f2:	9209      	str	r2, [sp, #36]	; 0x24
 80064f4:	e7cf      	b.n	8006496 <_dtoa_r+0x266>
 80064f6:	2301      	movs	r3, #1
 80064f8:	9308      	str	r3, [sp, #32]
 80064fa:	e7f4      	b.n	80064e6 <_dtoa_r+0x2b6>
 80064fc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006500:	f8cd 9004 	str.w	r9, [sp, #4]
 8006504:	464b      	mov	r3, r9
 8006506:	e7c6      	b.n	8006496 <_dtoa_r+0x266>
 8006508:	3101      	adds	r1, #1
 800650a:	6041      	str	r1, [r0, #4]
 800650c:	0052      	lsls	r2, r2, #1
 800650e:	e7c6      	b.n	800649e <_dtoa_r+0x26e>
 8006510:	636f4361 	.word	0x636f4361
 8006514:	3fd287a7 	.word	0x3fd287a7
 8006518:	8b60c8b3 	.word	0x8b60c8b3
 800651c:	3fc68a28 	.word	0x3fc68a28
 8006520:	509f79fb 	.word	0x509f79fb
 8006524:	3fd34413 	.word	0x3fd34413
 8006528:	08008ea5 	.word	0x08008ea5
 800652c:	08008ebc 	.word	0x08008ebc
 8006530:	7ff00000 	.word	0x7ff00000
 8006534:	08008ea1 	.word	0x08008ea1
 8006538:	08008e98 	.word	0x08008e98
 800653c:	08008e75 	.word	0x08008e75
 8006540:	3ff80000 	.word	0x3ff80000
 8006544:	08008fb8 	.word	0x08008fb8
 8006548:	08008f1b 	.word	0x08008f1b
 800654c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800654e:	9a00      	ldr	r2, [sp, #0]
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	9b01      	ldr	r3, [sp, #4]
 8006554:	2b0e      	cmp	r3, #14
 8006556:	f200 80ad 	bhi.w	80066b4 <_dtoa_r+0x484>
 800655a:	2d00      	cmp	r5, #0
 800655c:	f000 80aa 	beq.w	80066b4 <_dtoa_r+0x484>
 8006560:	f1ba 0f00 	cmp.w	sl, #0
 8006564:	dd36      	ble.n	80065d4 <_dtoa_r+0x3a4>
 8006566:	4ac3      	ldr	r2, [pc, #780]	; (8006874 <_dtoa_r+0x644>)
 8006568:	f00a 030f 	and.w	r3, sl, #15
 800656c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006570:	ed93 7b00 	vldr	d7, [r3]
 8006574:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006578:	ea4f 172a 	mov.w	r7, sl, asr #4
 800657c:	eeb0 8a47 	vmov.f32	s16, s14
 8006580:	eef0 8a67 	vmov.f32	s17, s15
 8006584:	d016      	beq.n	80065b4 <_dtoa_r+0x384>
 8006586:	4bbc      	ldr	r3, [pc, #752]	; (8006878 <_dtoa_r+0x648>)
 8006588:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800658c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006590:	f7fa f95c 	bl	800084c <__aeabi_ddiv>
 8006594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006598:	f007 070f 	and.w	r7, r7, #15
 800659c:	2503      	movs	r5, #3
 800659e:	4eb6      	ldr	r6, [pc, #728]	; (8006878 <_dtoa_r+0x648>)
 80065a0:	b957      	cbnz	r7, 80065b8 <_dtoa_r+0x388>
 80065a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065a6:	ec53 2b18 	vmov	r2, r3, d8
 80065aa:	f7fa f94f 	bl	800084c <__aeabi_ddiv>
 80065ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065b2:	e029      	b.n	8006608 <_dtoa_r+0x3d8>
 80065b4:	2502      	movs	r5, #2
 80065b6:	e7f2      	b.n	800659e <_dtoa_r+0x36e>
 80065b8:	07f9      	lsls	r1, r7, #31
 80065ba:	d508      	bpl.n	80065ce <_dtoa_r+0x39e>
 80065bc:	ec51 0b18 	vmov	r0, r1, d8
 80065c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80065c4:	f7fa f818 	bl	80005f8 <__aeabi_dmul>
 80065c8:	ec41 0b18 	vmov	d8, r0, r1
 80065cc:	3501      	adds	r5, #1
 80065ce:	107f      	asrs	r7, r7, #1
 80065d0:	3608      	adds	r6, #8
 80065d2:	e7e5      	b.n	80065a0 <_dtoa_r+0x370>
 80065d4:	f000 80a6 	beq.w	8006724 <_dtoa_r+0x4f4>
 80065d8:	f1ca 0600 	rsb	r6, sl, #0
 80065dc:	4ba5      	ldr	r3, [pc, #660]	; (8006874 <_dtoa_r+0x644>)
 80065de:	4fa6      	ldr	r7, [pc, #664]	; (8006878 <_dtoa_r+0x648>)
 80065e0:	f006 020f 	and.w	r2, r6, #15
 80065e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80065f0:	f7fa f802 	bl	80005f8 <__aeabi_dmul>
 80065f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065f8:	1136      	asrs	r6, r6, #4
 80065fa:	2300      	movs	r3, #0
 80065fc:	2502      	movs	r5, #2
 80065fe:	2e00      	cmp	r6, #0
 8006600:	f040 8085 	bne.w	800670e <_dtoa_r+0x4de>
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1d2      	bne.n	80065ae <_dtoa_r+0x37e>
 8006608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800660a:	2b00      	cmp	r3, #0
 800660c:	f000 808c 	beq.w	8006728 <_dtoa_r+0x4f8>
 8006610:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006614:	4b99      	ldr	r3, [pc, #612]	; (800687c <_dtoa_r+0x64c>)
 8006616:	2200      	movs	r2, #0
 8006618:	4630      	mov	r0, r6
 800661a:	4639      	mov	r1, r7
 800661c:	f7fa fa5e 	bl	8000adc <__aeabi_dcmplt>
 8006620:	2800      	cmp	r0, #0
 8006622:	f000 8081 	beq.w	8006728 <_dtoa_r+0x4f8>
 8006626:	9b01      	ldr	r3, [sp, #4]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d07d      	beq.n	8006728 <_dtoa_r+0x4f8>
 800662c:	f1b9 0f00 	cmp.w	r9, #0
 8006630:	dd3c      	ble.n	80066ac <_dtoa_r+0x47c>
 8006632:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006636:	9307      	str	r3, [sp, #28]
 8006638:	2200      	movs	r2, #0
 800663a:	4b91      	ldr	r3, [pc, #580]	; (8006880 <_dtoa_r+0x650>)
 800663c:	4630      	mov	r0, r6
 800663e:	4639      	mov	r1, r7
 8006640:	f7f9 ffda 	bl	80005f8 <__aeabi_dmul>
 8006644:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006648:	3501      	adds	r5, #1
 800664a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800664e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006652:	4628      	mov	r0, r5
 8006654:	f7f9 ff66 	bl	8000524 <__aeabi_i2d>
 8006658:	4632      	mov	r2, r6
 800665a:	463b      	mov	r3, r7
 800665c:	f7f9 ffcc 	bl	80005f8 <__aeabi_dmul>
 8006660:	4b88      	ldr	r3, [pc, #544]	; (8006884 <_dtoa_r+0x654>)
 8006662:	2200      	movs	r2, #0
 8006664:	f7f9 fe12 	bl	800028c <__adddf3>
 8006668:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800666c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006670:	9303      	str	r3, [sp, #12]
 8006672:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006674:	2b00      	cmp	r3, #0
 8006676:	d15c      	bne.n	8006732 <_dtoa_r+0x502>
 8006678:	4b83      	ldr	r3, [pc, #524]	; (8006888 <_dtoa_r+0x658>)
 800667a:	2200      	movs	r2, #0
 800667c:	4630      	mov	r0, r6
 800667e:	4639      	mov	r1, r7
 8006680:	f7f9 fe02 	bl	8000288 <__aeabi_dsub>
 8006684:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006688:	4606      	mov	r6, r0
 800668a:	460f      	mov	r7, r1
 800668c:	f7fa fa44 	bl	8000b18 <__aeabi_dcmpgt>
 8006690:	2800      	cmp	r0, #0
 8006692:	f040 8296 	bne.w	8006bc2 <_dtoa_r+0x992>
 8006696:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800669a:	4630      	mov	r0, r6
 800669c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066a0:	4639      	mov	r1, r7
 80066a2:	f7fa fa1b 	bl	8000adc <__aeabi_dcmplt>
 80066a6:	2800      	cmp	r0, #0
 80066a8:	f040 8288 	bne.w	8006bbc <_dtoa_r+0x98c>
 80066ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80066b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80066b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f2c0 8158 	blt.w	800696c <_dtoa_r+0x73c>
 80066bc:	f1ba 0f0e 	cmp.w	sl, #14
 80066c0:	f300 8154 	bgt.w	800696c <_dtoa_r+0x73c>
 80066c4:	4b6b      	ldr	r3, [pc, #428]	; (8006874 <_dtoa_r+0x644>)
 80066c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80066ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f280 80e3 	bge.w	800689c <_dtoa_r+0x66c>
 80066d6:	9b01      	ldr	r3, [sp, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f300 80df 	bgt.w	800689c <_dtoa_r+0x66c>
 80066de:	f040 826d 	bne.w	8006bbc <_dtoa_r+0x98c>
 80066e2:	4b69      	ldr	r3, [pc, #420]	; (8006888 <_dtoa_r+0x658>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	4640      	mov	r0, r8
 80066e8:	4649      	mov	r1, r9
 80066ea:	f7f9 ff85 	bl	80005f8 <__aeabi_dmul>
 80066ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066f2:	f7fa fa07 	bl	8000b04 <__aeabi_dcmpge>
 80066f6:	9e01      	ldr	r6, [sp, #4]
 80066f8:	4637      	mov	r7, r6
 80066fa:	2800      	cmp	r0, #0
 80066fc:	f040 8243 	bne.w	8006b86 <_dtoa_r+0x956>
 8006700:	9d00      	ldr	r5, [sp, #0]
 8006702:	2331      	movs	r3, #49	; 0x31
 8006704:	f805 3b01 	strb.w	r3, [r5], #1
 8006708:	f10a 0a01 	add.w	sl, sl, #1
 800670c:	e23f      	b.n	8006b8e <_dtoa_r+0x95e>
 800670e:	07f2      	lsls	r2, r6, #31
 8006710:	d505      	bpl.n	800671e <_dtoa_r+0x4ee>
 8006712:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006716:	f7f9 ff6f 	bl	80005f8 <__aeabi_dmul>
 800671a:	3501      	adds	r5, #1
 800671c:	2301      	movs	r3, #1
 800671e:	1076      	asrs	r6, r6, #1
 8006720:	3708      	adds	r7, #8
 8006722:	e76c      	b.n	80065fe <_dtoa_r+0x3ce>
 8006724:	2502      	movs	r5, #2
 8006726:	e76f      	b.n	8006608 <_dtoa_r+0x3d8>
 8006728:	9b01      	ldr	r3, [sp, #4]
 800672a:	f8cd a01c 	str.w	sl, [sp, #28]
 800672e:	930c      	str	r3, [sp, #48]	; 0x30
 8006730:	e78d      	b.n	800664e <_dtoa_r+0x41e>
 8006732:	9900      	ldr	r1, [sp, #0]
 8006734:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006736:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006738:	4b4e      	ldr	r3, [pc, #312]	; (8006874 <_dtoa_r+0x644>)
 800673a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800673e:	4401      	add	r1, r0
 8006740:	9102      	str	r1, [sp, #8]
 8006742:	9908      	ldr	r1, [sp, #32]
 8006744:	eeb0 8a47 	vmov.f32	s16, s14
 8006748:	eef0 8a67 	vmov.f32	s17, s15
 800674c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006750:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006754:	2900      	cmp	r1, #0
 8006756:	d045      	beq.n	80067e4 <_dtoa_r+0x5b4>
 8006758:	494c      	ldr	r1, [pc, #304]	; (800688c <_dtoa_r+0x65c>)
 800675a:	2000      	movs	r0, #0
 800675c:	f7fa f876 	bl	800084c <__aeabi_ddiv>
 8006760:	ec53 2b18 	vmov	r2, r3, d8
 8006764:	f7f9 fd90 	bl	8000288 <__aeabi_dsub>
 8006768:	9d00      	ldr	r5, [sp, #0]
 800676a:	ec41 0b18 	vmov	d8, r0, r1
 800676e:	4639      	mov	r1, r7
 8006770:	4630      	mov	r0, r6
 8006772:	f7fa f9f1 	bl	8000b58 <__aeabi_d2iz>
 8006776:	900c      	str	r0, [sp, #48]	; 0x30
 8006778:	f7f9 fed4 	bl	8000524 <__aeabi_i2d>
 800677c:	4602      	mov	r2, r0
 800677e:	460b      	mov	r3, r1
 8006780:	4630      	mov	r0, r6
 8006782:	4639      	mov	r1, r7
 8006784:	f7f9 fd80 	bl	8000288 <__aeabi_dsub>
 8006788:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800678a:	3330      	adds	r3, #48	; 0x30
 800678c:	f805 3b01 	strb.w	r3, [r5], #1
 8006790:	ec53 2b18 	vmov	r2, r3, d8
 8006794:	4606      	mov	r6, r0
 8006796:	460f      	mov	r7, r1
 8006798:	f7fa f9a0 	bl	8000adc <__aeabi_dcmplt>
 800679c:	2800      	cmp	r0, #0
 800679e:	d165      	bne.n	800686c <_dtoa_r+0x63c>
 80067a0:	4632      	mov	r2, r6
 80067a2:	463b      	mov	r3, r7
 80067a4:	4935      	ldr	r1, [pc, #212]	; (800687c <_dtoa_r+0x64c>)
 80067a6:	2000      	movs	r0, #0
 80067a8:	f7f9 fd6e 	bl	8000288 <__aeabi_dsub>
 80067ac:	ec53 2b18 	vmov	r2, r3, d8
 80067b0:	f7fa f994 	bl	8000adc <__aeabi_dcmplt>
 80067b4:	2800      	cmp	r0, #0
 80067b6:	f040 80b9 	bne.w	800692c <_dtoa_r+0x6fc>
 80067ba:	9b02      	ldr	r3, [sp, #8]
 80067bc:	429d      	cmp	r5, r3
 80067be:	f43f af75 	beq.w	80066ac <_dtoa_r+0x47c>
 80067c2:	4b2f      	ldr	r3, [pc, #188]	; (8006880 <_dtoa_r+0x650>)
 80067c4:	ec51 0b18 	vmov	r0, r1, d8
 80067c8:	2200      	movs	r2, #0
 80067ca:	f7f9 ff15 	bl	80005f8 <__aeabi_dmul>
 80067ce:	4b2c      	ldr	r3, [pc, #176]	; (8006880 <_dtoa_r+0x650>)
 80067d0:	ec41 0b18 	vmov	d8, r0, r1
 80067d4:	2200      	movs	r2, #0
 80067d6:	4630      	mov	r0, r6
 80067d8:	4639      	mov	r1, r7
 80067da:	f7f9 ff0d 	bl	80005f8 <__aeabi_dmul>
 80067de:	4606      	mov	r6, r0
 80067e0:	460f      	mov	r7, r1
 80067e2:	e7c4      	b.n	800676e <_dtoa_r+0x53e>
 80067e4:	ec51 0b17 	vmov	r0, r1, d7
 80067e8:	f7f9 ff06 	bl	80005f8 <__aeabi_dmul>
 80067ec:	9b02      	ldr	r3, [sp, #8]
 80067ee:	9d00      	ldr	r5, [sp, #0]
 80067f0:	930c      	str	r3, [sp, #48]	; 0x30
 80067f2:	ec41 0b18 	vmov	d8, r0, r1
 80067f6:	4639      	mov	r1, r7
 80067f8:	4630      	mov	r0, r6
 80067fa:	f7fa f9ad 	bl	8000b58 <__aeabi_d2iz>
 80067fe:	9011      	str	r0, [sp, #68]	; 0x44
 8006800:	f7f9 fe90 	bl	8000524 <__aeabi_i2d>
 8006804:	4602      	mov	r2, r0
 8006806:	460b      	mov	r3, r1
 8006808:	4630      	mov	r0, r6
 800680a:	4639      	mov	r1, r7
 800680c:	f7f9 fd3c 	bl	8000288 <__aeabi_dsub>
 8006810:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006812:	3330      	adds	r3, #48	; 0x30
 8006814:	f805 3b01 	strb.w	r3, [r5], #1
 8006818:	9b02      	ldr	r3, [sp, #8]
 800681a:	429d      	cmp	r5, r3
 800681c:	4606      	mov	r6, r0
 800681e:	460f      	mov	r7, r1
 8006820:	f04f 0200 	mov.w	r2, #0
 8006824:	d134      	bne.n	8006890 <_dtoa_r+0x660>
 8006826:	4b19      	ldr	r3, [pc, #100]	; (800688c <_dtoa_r+0x65c>)
 8006828:	ec51 0b18 	vmov	r0, r1, d8
 800682c:	f7f9 fd2e 	bl	800028c <__adddf3>
 8006830:	4602      	mov	r2, r0
 8006832:	460b      	mov	r3, r1
 8006834:	4630      	mov	r0, r6
 8006836:	4639      	mov	r1, r7
 8006838:	f7fa f96e 	bl	8000b18 <__aeabi_dcmpgt>
 800683c:	2800      	cmp	r0, #0
 800683e:	d175      	bne.n	800692c <_dtoa_r+0x6fc>
 8006840:	ec53 2b18 	vmov	r2, r3, d8
 8006844:	4911      	ldr	r1, [pc, #68]	; (800688c <_dtoa_r+0x65c>)
 8006846:	2000      	movs	r0, #0
 8006848:	f7f9 fd1e 	bl	8000288 <__aeabi_dsub>
 800684c:	4602      	mov	r2, r0
 800684e:	460b      	mov	r3, r1
 8006850:	4630      	mov	r0, r6
 8006852:	4639      	mov	r1, r7
 8006854:	f7fa f942 	bl	8000adc <__aeabi_dcmplt>
 8006858:	2800      	cmp	r0, #0
 800685a:	f43f af27 	beq.w	80066ac <_dtoa_r+0x47c>
 800685e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006860:	1e6b      	subs	r3, r5, #1
 8006862:	930c      	str	r3, [sp, #48]	; 0x30
 8006864:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006868:	2b30      	cmp	r3, #48	; 0x30
 800686a:	d0f8      	beq.n	800685e <_dtoa_r+0x62e>
 800686c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006870:	e04a      	b.n	8006908 <_dtoa_r+0x6d8>
 8006872:	bf00      	nop
 8006874:	08008fb8 	.word	0x08008fb8
 8006878:	08008f90 	.word	0x08008f90
 800687c:	3ff00000 	.word	0x3ff00000
 8006880:	40240000 	.word	0x40240000
 8006884:	401c0000 	.word	0x401c0000
 8006888:	40140000 	.word	0x40140000
 800688c:	3fe00000 	.word	0x3fe00000
 8006890:	4baf      	ldr	r3, [pc, #700]	; (8006b50 <_dtoa_r+0x920>)
 8006892:	f7f9 feb1 	bl	80005f8 <__aeabi_dmul>
 8006896:	4606      	mov	r6, r0
 8006898:	460f      	mov	r7, r1
 800689a:	e7ac      	b.n	80067f6 <_dtoa_r+0x5c6>
 800689c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80068a0:	9d00      	ldr	r5, [sp, #0]
 80068a2:	4642      	mov	r2, r8
 80068a4:	464b      	mov	r3, r9
 80068a6:	4630      	mov	r0, r6
 80068a8:	4639      	mov	r1, r7
 80068aa:	f7f9 ffcf 	bl	800084c <__aeabi_ddiv>
 80068ae:	f7fa f953 	bl	8000b58 <__aeabi_d2iz>
 80068b2:	9002      	str	r0, [sp, #8]
 80068b4:	f7f9 fe36 	bl	8000524 <__aeabi_i2d>
 80068b8:	4642      	mov	r2, r8
 80068ba:	464b      	mov	r3, r9
 80068bc:	f7f9 fe9c 	bl	80005f8 <__aeabi_dmul>
 80068c0:	4602      	mov	r2, r0
 80068c2:	460b      	mov	r3, r1
 80068c4:	4630      	mov	r0, r6
 80068c6:	4639      	mov	r1, r7
 80068c8:	f7f9 fcde 	bl	8000288 <__aeabi_dsub>
 80068cc:	9e02      	ldr	r6, [sp, #8]
 80068ce:	9f01      	ldr	r7, [sp, #4]
 80068d0:	3630      	adds	r6, #48	; 0x30
 80068d2:	f805 6b01 	strb.w	r6, [r5], #1
 80068d6:	9e00      	ldr	r6, [sp, #0]
 80068d8:	1bae      	subs	r6, r5, r6
 80068da:	42b7      	cmp	r7, r6
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	d137      	bne.n	8006952 <_dtoa_r+0x722>
 80068e2:	f7f9 fcd3 	bl	800028c <__adddf3>
 80068e6:	4642      	mov	r2, r8
 80068e8:	464b      	mov	r3, r9
 80068ea:	4606      	mov	r6, r0
 80068ec:	460f      	mov	r7, r1
 80068ee:	f7fa f913 	bl	8000b18 <__aeabi_dcmpgt>
 80068f2:	b9c8      	cbnz	r0, 8006928 <_dtoa_r+0x6f8>
 80068f4:	4642      	mov	r2, r8
 80068f6:	464b      	mov	r3, r9
 80068f8:	4630      	mov	r0, r6
 80068fa:	4639      	mov	r1, r7
 80068fc:	f7fa f8e4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006900:	b110      	cbz	r0, 8006908 <_dtoa_r+0x6d8>
 8006902:	9b02      	ldr	r3, [sp, #8]
 8006904:	07d9      	lsls	r1, r3, #31
 8006906:	d40f      	bmi.n	8006928 <_dtoa_r+0x6f8>
 8006908:	4620      	mov	r0, r4
 800690a:	4659      	mov	r1, fp
 800690c:	f000 fad6 	bl	8006ebc <_Bfree>
 8006910:	2300      	movs	r3, #0
 8006912:	702b      	strb	r3, [r5, #0]
 8006914:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006916:	f10a 0001 	add.w	r0, sl, #1
 800691a:	6018      	str	r0, [r3, #0]
 800691c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800691e:	2b00      	cmp	r3, #0
 8006920:	f43f acd8 	beq.w	80062d4 <_dtoa_r+0xa4>
 8006924:	601d      	str	r5, [r3, #0]
 8006926:	e4d5      	b.n	80062d4 <_dtoa_r+0xa4>
 8006928:	f8cd a01c 	str.w	sl, [sp, #28]
 800692c:	462b      	mov	r3, r5
 800692e:	461d      	mov	r5, r3
 8006930:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006934:	2a39      	cmp	r2, #57	; 0x39
 8006936:	d108      	bne.n	800694a <_dtoa_r+0x71a>
 8006938:	9a00      	ldr	r2, [sp, #0]
 800693a:	429a      	cmp	r2, r3
 800693c:	d1f7      	bne.n	800692e <_dtoa_r+0x6fe>
 800693e:	9a07      	ldr	r2, [sp, #28]
 8006940:	9900      	ldr	r1, [sp, #0]
 8006942:	3201      	adds	r2, #1
 8006944:	9207      	str	r2, [sp, #28]
 8006946:	2230      	movs	r2, #48	; 0x30
 8006948:	700a      	strb	r2, [r1, #0]
 800694a:	781a      	ldrb	r2, [r3, #0]
 800694c:	3201      	adds	r2, #1
 800694e:	701a      	strb	r2, [r3, #0]
 8006950:	e78c      	b.n	800686c <_dtoa_r+0x63c>
 8006952:	4b7f      	ldr	r3, [pc, #508]	; (8006b50 <_dtoa_r+0x920>)
 8006954:	2200      	movs	r2, #0
 8006956:	f7f9 fe4f 	bl	80005f8 <__aeabi_dmul>
 800695a:	2200      	movs	r2, #0
 800695c:	2300      	movs	r3, #0
 800695e:	4606      	mov	r6, r0
 8006960:	460f      	mov	r7, r1
 8006962:	f7fa f8b1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006966:	2800      	cmp	r0, #0
 8006968:	d09b      	beq.n	80068a2 <_dtoa_r+0x672>
 800696a:	e7cd      	b.n	8006908 <_dtoa_r+0x6d8>
 800696c:	9a08      	ldr	r2, [sp, #32]
 800696e:	2a00      	cmp	r2, #0
 8006970:	f000 80c4 	beq.w	8006afc <_dtoa_r+0x8cc>
 8006974:	9a05      	ldr	r2, [sp, #20]
 8006976:	2a01      	cmp	r2, #1
 8006978:	f300 80a8 	bgt.w	8006acc <_dtoa_r+0x89c>
 800697c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800697e:	2a00      	cmp	r2, #0
 8006980:	f000 80a0 	beq.w	8006ac4 <_dtoa_r+0x894>
 8006984:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006988:	9e06      	ldr	r6, [sp, #24]
 800698a:	4645      	mov	r5, r8
 800698c:	9a04      	ldr	r2, [sp, #16]
 800698e:	2101      	movs	r1, #1
 8006990:	441a      	add	r2, r3
 8006992:	4620      	mov	r0, r4
 8006994:	4498      	add	r8, r3
 8006996:	9204      	str	r2, [sp, #16]
 8006998:	f000 fb4c 	bl	8007034 <__i2b>
 800699c:	4607      	mov	r7, r0
 800699e:	2d00      	cmp	r5, #0
 80069a0:	dd0b      	ble.n	80069ba <_dtoa_r+0x78a>
 80069a2:	9b04      	ldr	r3, [sp, #16]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	dd08      	ble.n	80069ba <_dtoa_r+0x78a>
 80069a8:	42ab      	cmp	r3, r5
 80069aa:	9a04      	ldr	r2, [sp, #16]
 80069ac:	bfa8      	it	ge
 80069ae:	462b      	movge	r3, r5
 80069b0:	eba8 0803 	sub.w	r8, r8, r3
 80069b4:	1aed      	subs	r5, r5, r3
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	9304      	str	r3, [sp, #16]
 80069ba:	9b06      	ldr	r3, [sp, #24]
 80069bc:	b1fb      	cbz	r3, 80069fe <_dtoa_r+0x7ce>
 80069be:	9b08      	ldr	r3, [sp, #32]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f000 809f 	beq.w	8006b04 <_dtoa_r+0x8d4>
 80069c6:	2e00      	cmp	r6, #0
 80069c8:	dd11      	ble.n	80069ee <_dtoa_r+0x7be>
 80069ca:	4639      	mov	r1, r7
 80069cc:	4632      	mov	r2, r6
 80069ce:	4620      	mov	r0, r4
 80069d0:	f000 fbec 	bl	80071ac <__pow5mult>
 80069d4:	465a      	mov	r2, fp
 80069d6:	4601      	mov	r1, r0
 80069d8:	4607      	mov	r7, r0
 80069da:	4620      	mov	r0, r4
 80069dc:	f000 fb40 	bl	8007060 <__multiply>
 80069e0:	4659      	mov	r1, fp
 80069e2:	9007      	str	r0, [sp, #28]
 80069e4:	4620      	mov	r0, r4
 80069e6:	f000 fa69 	bl	8006ebc <_Bfree>
 80069ea:	9b07      	ldr	r3, [sp, #28]
 80069ec:	469b      	mov	fp, r3
 80069ee:	9b06      	ldr	r3, [sp, #24]
 80069f0:	1b9a      	subs	r2, r3, r6
 80069f2:	d004      	beq.n	80069fe <_dtoa_r+0x7ce>
 80069f4:	4659      	mov	r1, fp
 80069f6:	4620      	mov	r0, r4
 80069f8:	f000 fbd8 	bl	80071ac <__pow5mult>
 80069fc:	4683      	mov	fp, r0
 80069fe:	2101      	movs	r1, #1
 8006a00:	4620      	mov	r0, r4
 8006a02:	f000 fb17 	bl	8007034 <__i2b>
 8006a06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	4606      	mov	r6, r0
 8006a0c:	dd7c      	ble.n	8006b08 <_dtoa_r+0x8d8>
 8006a0e:	461a      	mov	r2, r3
 8006a10:	4601      	mov	r1, r0
 8006a12:	4620      	mov	r0, r4
 8006a14:	f000 fbca 	bl	80071ac <__pow5mult>
 8006a18:	9b05      	ldr	r3, [sp, #20]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	4606      	mov	r6, r0
 8006a1e:	dd76      	ble.n	8006b0e <_dtoa_r+0x8de>
 8006a20:	2300      	movs	r3, #0
 8006a22:	9306      	str	r3, [sp, #24]
 8006a24:	6933      	ldr	r3, [r6, #16]
 8006a26:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006a2a:	6918      	ldr	r0, [r3, #16]
 8006a2c:	f000 fab2 	bl	8006f94 <__hi0bits>
 8006a30:	f1c0 0020 	rsb	r0, r0, #32
 8006a34:	9b04      	ldr	r3, [sp, #16]
 8006a36:	4418      	add	r0, r3
 8006a38:	f010 001f 	ands.w	r0, r0, #31
 8006a3c:	f000 8086 	beq.w	8006b4c <_dtoa_r+0x91c>
 8006a40:	f1c0 0320 	rsb	r3, r0, #32
 8006a44:	2b04      	cmp	r3, #4
 8006a46:	dd7f      	ble.n	8006b48 <_dtoa_r+0x918>
 8006a48:	f1c0 001c 	rsb	r0, r0, #28
 8006a4c:	9b04      	ldr	r3, [sp, #16]
 8006a4e:	4403      	add	r3, r0
 8006a50:	4480      	add	r8, r0
 8006a52:	4405      	add	r5, r0
 8006a54:	9304      	str	r3, [sp, #16]
 8006a56:	f1b8 0f00 	cmp.w	r8, #0
 8006a5a:	dd05      	ble.n	8006a68 <_dtoa_r+0x838>
 8006a5c:	4659      	mov	r1, fp
 8006a5e:	4642      	mov	r2, r8
 8006a60:	4620      	mov	r0, r4
 8006a62:	f000 fbfd 	bl	8007260 <__lshift>
 8006a66:	4683      	mov	fp, r0
 8006a68:	9b04      	ldr	r3, [sp, #16]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	dd05      	ble.n	8006a7a <_dtoa_r+0x84a>
 8006a6e:	4631      	mov	r1, r6
 8006a70:	461a      	mov	r2, r3
 8006a72:	4620      	mov	r0, r4
 8006a74:	f000 fbf4 	bl	8007260 <__lshift>
 8006a78:	4606      	mov	r6, r0
 8006a7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d069      	beq.n	8006b54 <_dtoa_r+0x924>
 8006a80:	4631      	mov	r1, r6
 8006a82:	4658      	mov	r0, fp
 8006a84:	f000 fc58 	bl	8007338 <__mcmp>
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	da63      	bge.n	8006b54 <_dtoa_r+0x924>
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	4659      	mov	r1, fp
 8006a90:	220a      	movs	r2, #10
 8006a92:	4620      	mov	r0, r4
 8006a94:	f000 fa34 	bl	8006f00 <__multadd>
 8006a98:	9b08      	ldr	r3, [sp, #32]
 8006a9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a9e:	4683      	mov	fp, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 818f 	beq.w	8006dc4 <_dtoa_r+0xb94>
 8006aa6:	4639      	mov	r1, r7
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	220a      	movs	r2, #10
 8006aac:	4620      	mov	r0, r4
 8006aae:	f000 fa27 	bl	8006f00 <__multadd>
 8006ab2:	f1b9 0f00 	cmp.w	r9, #0
 8006ab6:	4607      	mov	r7, r0
 8006ab8:	f300 808e 	bgt.w	8006bd8 <_dtoa_r+0x9a8>
 8006abc:	9b05      	ldr	r3, [sp, #20]
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	dc50      	bgt.n	8006b64 <_dtoa_r+0x934>
 8006ac2:	e089      	b.n	8006bd8 <_dtoa_r+0x9a8>
 8006ac4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ac6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006aca:	e75d      	b.n	8006988 <_dtoa_r+0x758>
 8006acc:	9b01      	ldr	r3, [sp, #4]
 8006ace:	1e5e      	subs	r6, r3, #1
 8006ad0:	9b06      	ldr	r3, [sp, #24]
 8006ad2:	42b3      	cmp	r3, r6
 8006ad4:	bfbf      	itttt	lt
 8006ad6:	9b06      	ldrlt	r3, [sp, #24]
 8006ad8:	9606      	strlt	r6, [sp, #24]
 8006ada:	1af2      	sublt	r2, r6, r3
 8006adc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006ade:	bfb6      	itet	lt
 8006ae0:	189b      	addlt	r3, r3, r2
 8006ae2:	1b9e      	subge	r6, r3, r6
 8006ae4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006ae6:	9b01      	ldr	r3, [sp, #4]
 8006ae8:	bfb8      	it	lt
 8006aea:	2600      	movlt	r6, #0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	bfb5      	itete	lt
 8006af0:	eba8 0503 	sublt.w	r5, r8, r3
 8006af4:	9b01      	ldrge	r3, [sp, #4]
 8006af6:	2300      	movlt	r3, #0
 8006af8:	4645      	movge	r5, r8
 8006afa:	e747      	b.n	800698c <_dtoa_r+0x75c>
 8006afc:	9e06      	ldr	r6, [sp, #24]
 8006afe:	9f08      	ldr	r7, [sp, #32]
 8006b00:	4645      	mov	r5, r8
 8006b02:	e74c      	b.n	800699e <_dtoa_r+0x76e>
 8006b04:	9a06      	ldr	r2, [sp, #24]
 8006b06:	e775      	b.n	80069f4 <_dtoa_r+0x7c4>
 8006b08:	9b05      	ldr	r3, [sp, #20]
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	dc18      	bgt.n	8006b40 <_dtoa_r+0x910>
 8006b0e:	9b02      	ldr	r3, [sp, #8]
 8006b10:	b9b3      	cbnz	r3, 8006b40 <_dtoa_r+0x910>
 8006b12:	9b03      	ldr	r3, [sp, #12]
 8006b14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b18:	b9a3      	cbnz	r3, 8006b44 <_dtoa_r+0x914>
 8006b1a:	9b03      	ldr	r3, [sp, #12]
 8006b1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b20:	0d1b      	lsrs	r3, r3, #20
 8006b22:	051b      	lsls	r3, r3, #20
 8006b24:	b12b      	cbz	r3, 8006b32 <_dtoa_r+0x902>
 8006b26:	9b04      	ldr	r3, [sp, #16]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	9304      	str	r3, [sp, #16]
 8006b2c:	f108 0801 	add.w	r8, r8, #1
 8006b30:	2301      	movs	r3, #1
 8006b32:	9306      	str	r3, [sp, #24]
 8006b34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f47f af74 	bne.w	8006a24 <_dtoa_r+0x7f4>
 8006b3c:	2001      	movs	r0, #1
 8006b3e:	e779      	b.n	8006a34 <_dtoa_r+0x804>
 8006b40:	2300      	movs	r3, #0
 8006b42:	e7f6      	b.n	8006b32 <_dtoa_r+0x902>
 8006b44:	9b02      	ldr	r3, [sp, #8]
 8006b46:	e7f4      	b.n	8006b32 <_dtoa_r+0x902>
 8006b48:	d085      	beq.n	8006a56 <_dtoa_r+0x826>
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	301c      	adds	r0, #28
 8006b4e:	e77d      	b.n	8006a4c <_dtoa_r+0x81c>
 8006b50:	40240000 	.word	0x40240000
 8006b54:	9b01      	ldr	r3, [sp, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	dc38      	bgt.n	8006bcc <_dtoa_r+0x99c>
 8006b5a:	9b05      	ldr	r3, [sp, #20]
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	dd35      	ble.n	8006bcc <_dtoa_r+0x99c>
 8006b60:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006b64:	f1b9 0f00 	cmp.w	r9, #0
 8006b68:	d10d      	bne.n	8006b86 <_dtoa_r+0x956>
 8006b6a:	4631      	mov	r1, r6
 8006b6c:	464b      	mov	r3, r9
 8006b6e:	2205      	movs	r2, #5
 8006b70:	4620      	mov	r0, r4
 8006b72:	f000 f9c5 	bl	8006f00 <__multadd>
 8006b76:	4601      	mov	r1, r0
 8006b78:	4606      	mov	r6, r0
 8006b7a:	4658      	mov	r0, fp
 8006b7c:	f000 fbdc 	bl	8007338 <__mcmp>
 8006b80:	2800      	cmp	r0, #0
 8006b82:	f73f adbd 	bgt.w	8006700 <_dtoa_r+0x4d0>
 8006b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b88:	9d00      	ldr	r5, [sp, #0]
 8006b8a:	ea6f 0a03 	mvn.w	sl, r3
 8006b8e:	f04f 0800 	mov.w	r8, #0
 8006b92:	4631      	mov	r1, r6
 8006b94:	4620      	mov	r0, r4
 8006b96:	f000 f991 	bl	8006ebc <_Bfree>
 8006b9a:	2f00      	cmp	r7, #0
 8006b9c:	f43f aeb4 	beq.w	8006908 <_dtoa_r+0x6d8>
 8006ba0:	f1b8 0f00 	cmp.w	r8, #0
 8006ba4:	d005      	beq.n	8006bb2 <_dtoa_r+0x982>
 8006ba6:	45b8      	cmp	r8, r7
 8006ba8:	d003      	beq.n	8006bb2 <_dtoa_r+0x982>
 8006baa:	4641      	mov	r1, r8
 8006bac:	4620      	mov	r0, r4
 8006bae:	f000 f985 	bl	8006ebc <_Bfree>
 8006bb2:	4639      	mov	r1, r7
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	f000 f981 	bl	8006ebc <_Bfree>
 8006bba:	e6a5      	b.n	8006908 <_dtoa_r+0x6d8>
 8006bbc:	2600      	movs	r6, #0
 8006bbe:	4637      	mov	r7, r6
 8006bc0:	e7e1      	b.n	8006b86 <_dtoa_r+0x956>
 8006bc2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006bc4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006bc8:	4637      	mov	r7, r6
 8006bca:	e599      	b.n	8006700 <_dtoa_r+0x4d0>
 8006bcc:	9b08      	ldr	r3, [sp, #32]
 8006bce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f000 80fd 	beq.w	8006dd2 <_dtoa_r+0xba2>
 8006bd8:	2d00      	cmp	r5, #0
 8006bda:	dd05      	ble.n	8006be8 <_dtoa_r+0x9b8>
 8006bdc:	4639      	mov	r1, r7
 8006bde:	462a      	mov	r2, r5
 8006be0:	4620      	mov	r0, r4
 8006be2:	f000 fb3d 	bl	8007260 <__lshift>
 8006be6:	4607      	mov	r7, r0
 8006be8:	9b06      	ldr	r3, [sp, #24]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d05c      	beq.n	8006ca8 <_dtoa_r+0xa78>
 8006bee:	6879      	ldr	r1, [r7, #4]
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	f000 f923 	bl	8006e3c <_Balloc>
 8006bf6:	4605      	mov	r5, r0
 8006bf8:	b928      	cbnz	r0, 8006c06 <_dtoa_r+0x9d6>
 8006bfa:	4b80      	ldr	r3, [pc, #512]	; (8006dfc <_dtoa_r+0xbcc>)
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006c02:	f7ff bb2e 	b.w	8006262 <_dtoa_r+0x32>
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	3202      	adds	r2, #2
 8006c0a:	0092      	lsls	r2, r2, #2
 8006c0c:	f107 010c 	add.w	r1, r7, #12
 8006c10:	300c      	adds	r0, #12
 8006c12:	f000 f905 	bl	8006e20 <memcpy>
 8006c16:	2201      	movs	r2, #1
 8006c18:	4629      	mov	r1, r5
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	f000 fb20 	bl	8007260 <__lshift>
 8006c20:	9b00      	ldr	r3, [sp, #0]
 8006c22:	3301      	adds	r3, #1
 8006c24:	9301      	str	r3, [sp, #4]
 8006c26:	9b00      	ldr	r3, [sp, #0]
 8006c28:	444b      	add	r3, r9
 8006c2a:	9307      	str	r3, [sp, #28]
 8006c2c:	9b02      	ldr	r3, [sp, #8]
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	46b8      	mov	r8, r7
 8006c34:	9306      	str	r3, [sp, #24]
 8006c36:	4607      	mov	r7, r0
 8006c38:	9b01      	ldr	r3, [sp, #4]
 8006c3a:	4631      	mov	r1, r6
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	4658      	mov	r0, fp
 8006c40:	9302      	str	r3, [sp, #8]
 8006c42:	f7ff fa69 	bl	8006118 <quorem>
 8006c46:	4603      	mov	r3, r0
 8006c48:	3330      	adds	r3, #48	; 0x30
 8006c4a:	9004      	str	r0, [sp, #16]
 8006c4c:	4641      	mov	r1, r8
 8006c4e:	4658      	mov	r0, fp
 8006c50:	9308      	str	r3, [sp, #32]
 8006c52:	f000 fb71 	bl	8007338 <__mcmp>
 8006c56:	463a      	mov	r2, r7
 8006c58:	4681      	mov	r9, r0
 8006c5a:	4631      	mov	r1, r6
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	f000 fb87 	bl	8007370 <__mdiff>
 8006c62:	68c2      	ldr	r2, [r0, #12]
 8006c64:	9b08      	ldr	r3, [sp, #32]
 8006c66:	4605      	mov	r5, r0
 8006c68:	bb02      	cbnz	r2, 8006cac <_dtoa_r+0xa7c>
 8006c6a:	4601      	mov	r1, r0
 8006c6c:	4658      	mov	r0, fp
 8006c6e:	f000 fb63 	bl	8007338 <__mcmp>
 8006c72:	9b08      	ldr	r3, [sp, #32]
 8006c74:	4602      	mov	r2, r0
 8006c76:	4629      	mov	r1, r5
 8006c78:	4620      	mov	r0, r4
 8006c7a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006c7e:	f000 f91d 	bl	8006ebc <_Bfree>
 8006c82:	9b05      	ldr	r3, [sp, #20]
 8006c84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c86:	9d01      	ldr	r5, [sp, #4]
 8006c88:	ea43 0102 	orr.w	r1, r3, r2
 8006c8c:	9b06      	ldr	r3, [sp, #24]
 8006c8e:	430b      	orrs	r3, r1
 8006c90:	9b08      	ldr	r3, [sp, #32]
 8006c92:	d10d      	bne.n	8006cb0 <_dtoa_r+0xa80>
 8006c94:	2b39      	cmp	r3, #57	; 0x39
 8006c96:	d029      	beq.n	8006cec <_dtoa_r+0xabc>
 8006c98:	f1b9 0f00 	cmp.w	r9, #0
 8006c9c:	dd01      	ble.n	8006ca2 <_dtoa_r+0xa72>
 8006c9e:	9b04      	ldr	r3, [sp, #16]
 8006ca0:	3331      	adds	r3, #49	; 0x31
 8006ca2:	9a02      	ldr	r2, [sp, #8]
 8006ca4:	7013      	strb	r3, [r2, #0]
 8006ca6:	e774      	b.n	8006b92 <_dtoa_r+0x962>
 8006ca8:	4638      	mov	r0, r7
 8006caa:	e7b9      	b.n	8006c20 <_dtoa_r+0x9f0>
 8006cac:	2201      	movs	r2, #1
 8006cae:	e7e2      	b.n	8006c76 <_dtoa_r+0xa46>
 8006cb0:	f1b9 0f00 	cmp.w	r9, #0
 8006cb4:	db06      	blt.n	8006cc4 <_dtoa_r+0xa94>
 8006cb6:	9905      	ldr	r1, [sp, #20]
 8006cb8:	ea41 0909 	orr.w	r9, r1, r9
 8006cbc:	9906      	ldr	r1, [sp, #24]
 8006cbe:	ea59 0101 	orrs.w	r1, r9, r1
 8006cc2:	d120      	bne.n	8006d06 <_dtoa_r+0xad6>
 8006cc4:	2a00      	cmp	r2, #0
 8006cc6:	ddec      	ble.n	8006ca2 <_dtoa_r+0xa72>
 8006cc8:	4659      	mov	r1, fp
 8006cca:	2201      	movs	r2, #1
 8006ccc:	4620      	mov	r0, r4
 8006cce:	9301      	str	r3, [sp, #4]
 8006cd0:	f000 fac6 	bl	8007260 <__lshift>
 8006cd4:	4631      	mov	r1, r6
 8006cd6:	4683      	mov	fp, r0
 8006cd8:	f000 fb2e 	bl	8007338 <__mcmp>
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	9b01      	ldr	r3, [sp, #4]
 8006ce0:	dc02      	bgt.n	8006ce8 <_dtoa_r+0xab8>
 8006ce2:	d1de      	bne.n	8006ca2 <_dtoa_r+0xa72>
 8006ce4:	07da      	lsls	r2, r3, #31
 8006ce6:	d5dc      	bpl.n	8006ca2 <_dtoa_r+0xa72>
 8006ce8:	2b39      	cmp	r3, #57	; 0x39
 8006cea:	d1d8      	bne.n	8006c9e <_dtoa_r+0xa6e>
 8006cec:	9a02      	ldr	r2, [sp, #8]
 8006cee:	2339      	movs	r3, #57	; 0x39
 8006cf0:	7013      	strb	r3, [r2, #0]
 8006cf2:	462b      	mov	r3, r5
 8006cf4:	461d      	mov	r5, r3
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006cfc:	2a39      	cmp	r2, #57	; 0x39
 8006cfe:	d050      	beq.n	8006da2 <_dtoa_r+0xb72>
 8006d00:	3201      	adds	r2, #1
 8006d02:	701a      	strb	r2, [r3, #0]
 8006d04:	e745      	b.n	8006b92 <_dtoa_r+0x962>
 8006d06:	2a00      	cmp	r2, #0
 8006d08:	dd03      	ble.n	8006d12 <_dtoa_r+0xae2>
 8006d0a:	2b39      	cmp	r3, #57	; 0x39
 8006d0c:	d0ee      	beq.n	8006cec <_dtoa_r+0xabc>
 8006d0e:	3301      	adds	r3, #1
 8006d10:	e7c7      	b.n	8006ca2 <_dtoa_r+0xa72>
 8006d12:	9a01      	ldr	r2, [sp, #4]
 8006d14:	9907      	ldr	r1, [sp, #28]
 8006d16:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006d1a:	428a      	cmp	r2, r1
 8006d1c:	d02a      	beq.n	8006d74 <_dtoa_r+0xb44>
 8006d1e:	4659      	mov	r1, fp
 8006d20:	2300      	movs	r3, #0
 8006d22:	220a      	movs	r2, #10
 8006d24:	4620      	mov	r0, r4
 8006d26:	f000 f8eb 	bl	8006f00 <__multadd>
 8006d2a:	45b8      	cmp	r8, r7
 8006d2c:	4683      	mov	fp, r0
 8006d2e:	f04f 0300 	mov.w	r3, #0
 8006d32:	f04f 020a 	mov.w	r2, #10
 8006d36:	4641      	mov	r1, r8
 8006d38:	4620      	mov	r0, r4
 8006d3a:	d107      	bne.n	8006d4c <_dtoa_r+0xb1c>
 8006d3c:	f000 f8e0 	bl	8006f00 <__multadd>
 8006d40:	4680      	mov	r8, r0
 8006d42:	4607      	mov	r7, r0
 8006d44:	9b01      	ldr	r3, [sp, #4]
 8006d46:	3301      	adds	r3, #1
 8006d48:	9301      	str	r3, [sp, #4]
 8006d4a:	e775      	b.n	8006c38 <_dtoa_r+0xa08>
 8006d4c:	f000 f8d8 	bl	8006f00 <__multadd>
 8006d50:	4639      	mov	r1, r7
 8006d52:	4680      	mov	r8, r0
 8006d54:	2300      	movs	r3, #0
 8006d56:	220a      	movs	r2, #10
 8006d58:	4620      	mov	r0, r4
 8006d5a:	f000 f8d1 	bl	8006f00 <__multadd>
 8006d5e:	4607      	mov	r7, r0
 8006d60:	e7f0      	b.n	8006d44 <_dtoa_r+0xb14>
 8006d62:	f1b9 0f00 	cmp.w	r9, #0
 8006d66:	9a00      	ldr	r2, [sp, #0]
 8006d68:	bfcc      	ite	gt
 8006d6a:	464d      	movgt	r5, r9
 8006d6c:	2501      	movle	r5, #1
 8006d6e:	4415      	add	r5, r2
 8006d70:	f04f 0800 	mov.w	r8, #0
 8006d74:	4659      	mov	r1, fp
 8006d76:	2201      	movs	r2, #1
 8006d78:	4620      	mov	r0, r4
 8006d7a:	9301      	str	r3, [sp, #4]
 8006d7c:	f000 fa70 	bl	8007260 <__lshift>
 8006d80:	4631      	mov	r1, r6
 8006d82:	4683      	mov	fp, r0
 8006d84:	f000 fad8 	bl	8007338 <__mcmp>
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	dcb2      	bgt.n	8006cf2 <_dtoa_r+0xac2>
 8006d8c:	d102      	bne.n	8006d94 <_dtoa_r+0xb64>
 8006d8e:	9b01      	ldr	r3, [sp, #4]
 8006d90:	07db      	lsls	r3, r3, #31
 8006d92:	d4ae      	bmi.n	8006cf2 <_dtoa_r+0xac2>
 8006d94:	462b      	mov	r3, r5
 8006d96:	461d      	mov	r5, r3
 8006d98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d9c:	2a30      	cmp	r2, #48	; 0x30
 8006d9e:	d0fa      	beq.n	8006d96 <_dtoa_r+0xb66>
 8006da0:	e6f7      	b.n	8006b92 <_dtoa_r+0x962>
 8006da2:	9a00      	ldr	r2, [sp, #0]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d1a5      	bne.n	8006cf4 <_dtoa_r+0xac4>
 8006da8:	f10a 0a01 	add.w	sl, sl, #1
 8006dac:	2331      	movs	r3, #49	; 0x31
 8006dae:	e779      	b.n	8006ca4 <_dtoa_r+0xa74>
 8006db0:	4b13      	ldr	r3, [pc, #76]	; (8006e00 <_dtoa_r+0xbd0>)
 8006db2:	f7ff baaf 	b.w	8006314 <_dtoa_r+0xe4>
 8006db6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f47f aa86 	bne.w	80062ca <_dtoa_r+0x9a>
 8006dbe:	4b11      	ldr	r3, [pc, #68]	; (8006e04 <_dtoa_r+0xbd4>)
 8006dc0:	f7ff baa8 	b.w	8006314 <_dtoa_r+0xe4>
 8006dc4:	f1b9 0f00 	cmp.w	r9, #0
 8006dc8:	dc03      	bgt.n	8006dd2 <_dtoa_r+0xba2>
 8006dca:	9b05      	ldr	r3, [sp, #20]
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	f73f aec9 	bgt.w	8006b64 <_dtoa_r+0x934>
 8006dd2:	9d00      	ldr	r5, [sp, #0]
 8006dd4:	4631      	mov	r1, r6
 8006dd6:	4658      	mov	r0, fp
 8006dd8:	f7ff f99e 	bl	8006118 <quorem>
 8006ddc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006de0:	f805 3b01 	strb.w	r3, [r5], #1
 8006de4:	9a00      	ldr	r2, [sp, #0]
 8006de6:	1aaa      	subs	r2, r5, r2
 8006de8:	4591      	cmp	r9, r2
 8006dea:	ddba      	ble.n	8006d62 <_dtoa_r+0xb32>
 8006dec:	4659      	mov	r1, fp
 8006dee:	2300      	movs	r3, #0
 8006df0:	220a      	movs	r2, #10
 8006df2:	4620      	mov	r0, r4
 8006df4:	f000 f884 	bl	8006f00 <__multadd>
 8006df8:	4683      	mov	fp, r0
 8006dfa:	e7eb      	b.n	8006dd4 <_dtoa_r+0xba4>
 8006dfc:	08008f1b 	.word	0x08008f1b
 8006e00:	08008e74 	.word	0x08008e74
 8006e04:	08008e98 	.word	0x08008e98

08006e08 <_localeconv_r>:
 8006e08:	4800      	ldr	r0, [pc, #0]	; (8006e0c <_localeconv_r+0x4>)
 8006e0a:	4770      	bx	lr
 8006e0c:	20000160 	.word	0x20000160

08006e10 <malloc>:
 8006e10:	4b02      	ldr	r3, [pc, #8]	; (8006e1c <malloc+0xc>)
 8006e12:	4601      	mov	r1, r0
 8006e14:	6818      	ldr	r0, [r3, #0]
 8006e16:	f000 bbef 	b.w	80075f8 <_malloc_r>
 8006e1a:	bf00      	nop
 8006e1c:	2000000c 	.word	0x2000000c

08006e20 <memcpy>:
 8006e20:	440a      	add	r2, r1
 8006e22:	4291      	cmp	r1, r2
 8006e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e28:	d100      	bne.n	8006e2c <memcpy+0xc>
 8006e2a:	4770      	bx	lr
 8006e2c:	b510      	push	{r4, lr}
 8006e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e36:	4291      	cmp	r1, r2
 8006e38:	d1f9      	bne.n	8006e2e <memcpy+0xe>
 8006e3a:	bd10      	pop	{r4, pc}

08006e3c <_Balloc>:
 8006e3c:	b570      	push	{r4, r5, r6, lr}
 8006e3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e40:	4604      	mov	r4, r0
 8006e42:	460d      	mov	r5, r1
 8006e44:	b976      	cbnz	r6, 8006e64 <_Balloc+0x28>
 8006e46:	2010      	movs	r0, #16
 8006e48:	f7ff ffe2 	bl	8006e10 <malloc>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	6260      	str	r0, [r4, #36]	; 0x24
 8006e50:	b920      	cbnz	r0, 8006e5c <_Balloc+0x20>
 8006e52:	4b18      	ldr	r3, [pc, #96]	; (8006eb4 <_Balloc+0x78>)
 8006e54:	4818      	ldr	r0, [pc, #96]	; (8006eb8 <_Balloc+0x7c>)
 8006e56:	2166      	movs	r1, #102	; 0x66
 8006e58:	f000 fc38 	bl	80076cc <__assert_func>
 8006e5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e60:	6006      	str	r6, [r0, #0]
 8006e62:	60c6      	str	r6, [r0, #12]
 8006e64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006e66:	68f3      	ldr	r3, [r6, #12]
 8006e68:	b183      	cbz	r3, 8006e8c <_Balloc+0x50>
 8006e6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e72:	b9b8      	cbnz	r0, 8006ea4 <_Balloc+0x68>
 8006e74:	2101      	movs	r1, #1
 8006e76:	fa01 f605 	lsl.w	r6, r1, r5
 8006e7a:	1d72      	adds	r2, r6, #5
 8006e7c:	0092      	lsls	r2, r2, #2
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f000 fb5a 	bl	8007538 <_calloc_r>
 8006e84:	b160      	cbz	r0, 8006ea0 <_Balloc+0x64>
 8006e86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e8a:	e00e      	b.n	8006eaa <_Balloc+0x6e>
 8006e8c:	2221      	movs	r2, #33	; 0x21
 8006e8e:	2104      	movs	r1, #4
 8006e90:	4620      	mov	r0, r4
 8006e92:	f000 fb51 	bl	8007538 <_calloc_r>
 8006e96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e98:	60f0      	str	r0, [r6, #12]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1e4      	bne.n	8006e6a <_Balloc+0x2e>
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	bd70      	pop	{r4, r5, r6, pc}
 8006ea4:	6802      	ldr	r2, [r0, #0]
 8006ea6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006eaa:	2300      	movs	r3, #0
 8006eac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006eb0:	e7f7      	b.n	8006ea2 <_Balloc+0x66>
 8006eb2:	bf00      	nop
 8006eb4:	08008ea5 	.word	0x08008ea5
 8006eb8:	08008f2c 	.word	0x08008f2c

08006ebc <_Bfree>:
 8006ebc:	b570      	push	{r4, r5, r6, lr}
 8006ebe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ec0:	4605      	mov	r5, r0
 8006ec2:	460c      	mov	r4, r1
 8006ec4:	b976      	cbnz	r6, 8006ee4 <_Bfree+0x28>
 8006ec6:	2010      	movs	r0, #16
 8006ec8:	f7ff ffa2 	bl	8006e10 <malloc>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	6268      	str	r0, [r5, #36]	; 0x24
 8006ed0:	b920      	cbnz	r0, 8006edc <_Bfree+0x20>
 8006ed2:	4b09      	ldr	r3, [pc, #36]	; (8006ef8 <_Bfree+0x3c>)
 8006ed4:	4809      	ldr	r0, [pc, #36]	; (8006efc <_Bfree+0x40>)
 8006ed6:	218a      	movs	r1, #138	; 0x8a
 8006ed8:	f000 fbf8 	bl	80076cc <__assert_func>
 8006edc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ee0:	6006      	str	r6, [r0, #0]
 8006ee2:	60c6      	str	r6, [r0, #12]
 8006ee4:	b13c      	cbz	r4, 8006ef6 <_Bfree+0x3a>
 8006ee6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ee8:	6862      	ldr	r2, [r4, #4]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ef0:	6021      	str	r1, [r4, #0]
 8006ef2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ef6:	bd70      	pop	{r4, r5, r6, pc}
 8006ef8:	08008ea5 	.word	0x08008ea5
 8006efc:	08008f2c 	.word	0x08008f2c

08006f00 <__multadd>:
 8006f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f04:	690e      	ldr	r6, [r1, #16]
 8006f06:	4607      	mov	r7, r0
 8006f08:	4698      	mov	r8, r3
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	f101 0014 	add.w	r0, r1, #20
 8006f10:	2300      	movs	r3, #0
 8006f12:	6805      	ldr	r5, [r0, #0]
 8006f14:	b2a9      	uxth	r1, r5
 8006f16:	fb02 8101 	mla	r1, r2, r1, r8
 8006f1a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006f1e:	0c2d      	lsrs	r5, r5, #16
 8006f20:	fb02 c505 	mla	r5, r2, r5, ip
 8006f24:	b289      	uxth	r1, r1
 8006f26:	3301      	adds	r3, #1
 8006f28:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006f2c:	429e      	cmp	r6, r3
 8006f2e:	f840 1b04 	str.w	r1, [r0], #4
 8006f32:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006f36:	dcec      	bgt.n	8006f12 <__multadd+0x12>
 8006f38:	f1b8 0f00 	cmp.w	r8, #0
 8006f3c:	d022      	beq.n	8006f84 <__multadd+0x84>
 8006f3e:	68a3      	ldr	r3, [r4, #8]
 8006f40:	42b3      	cmp	r3, r6
 8006f42:	dc19      	bgt.n	8006f78 <__multadd+0x78>
 8006f44:	6861      	ldr	r1, [r4, #4]
 8006f46:	4638      	mov	r0, r7
 8006f48:	3101      	adds	r1, #1
 8006f4a:	f7ff ff77 	bl	8006e3c <_Balloc>
 8006f4e:	4605      	mov	r5, r0
 8006f50:	b928      	cbnz	r0, 8006f5e <__multadd+0x5e>
 8006f52:	4602      	mov	r2, r0
 8006f54:	4b0d      	ldr	r3, [pc, #52]	; (8006f8c <__multadd+0x8c>)
 8006f56:	480e      	ldr	r0, [pc, #56]	; (8006f90 <__multadd+0x90>)
 8006f58:	21b5      	movs	r1, #181	; 0xb5
 8006f5a:	f000 fbb7 	bl	80076cc <__assert_func>
 8006f5e:	6922      	ldr	r2, [r4, #16]
 8006f60:	3202      	adds	r2, #2
 8006f62:	f104 010c 	add.w	r1, r4, #12
 8006f66:	0092      	lsls	r2, r2, #2
 8006f68:	300c      	adds	r0, #12
 8006f6a:	f7ff ff59 	bl	8006e20 <memcpy>
 8006f6e:	4621      	mov	r1, r4
 8006f70:	4638      	mov	r0, r7
 8006f72:	f7ff ffa3 	bl	8006ebc <_Bfree>
 8006f76:	462c      	mov	r4, r5
 8006f78:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006f7c:	3601      	adds	r6, #1
 8006f7e:	f8c3 8014 	str.w	r8, [r3, #20]
 8006f82:	6126      	str	r6, [r4, #16]
 8006f84:	4620      	mov	r0, r4
 8006f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f8a:	bf00      	nop
 8006f8c:	08008f1b 	.word	0x08008f1b
 8006f90:	08008f2c 	.word	0x08008f2c

08006f94 <__hi0bits>:
 8006f94:	0c03      	lsrs	r3, r0, #16
 8006f96:	041b      	lsls	r3, r3, #16
 8006f98:	b9d3      	cbnz	r3, 8006fd0 <__hi0bits+0x3c>
 8006f9a:	0400      	lsls	r0, r0, #16
 8006f9c:	2310      	movs	r3, #16
 8006f9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006fa2:	bf04      	itt	eq
 8006fa4:	0200      	lsleq	r0, r0, #8
 8006fa6:	3308      	addeq	r3, #8
 8006fa8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006fac:	bf04      	itt	eq
 8006fae:	0100      	lsleq	r0, r0, #4
 8006fb0:	3304      	addeq	r3, #4
 8006fb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006fb6:	bf04      	itt	eq
 8006fb8:	0080      	lsleq	r0, r0, #2
 8006fba:	3302      	addeq	r3, #2
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	db05      	blt.n	8006fcc <__hi0bits+0x38>
 8006fc0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006fc4:	f103 0301 	add.w	r3, r3, #1
 8006fc8:	bf08      	it	eq
 8006fca:	2320      	moveq	r3, #32
 8006fcc:	4618      	mov	r0, r3
 8006fce:	4770      	bx	lr
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	e7e4      	b.n	8006f9e <__hi0bits+0xa>

08006fd4 <__lo0bits>:
 8006fd4:	6803      	ldr	r3, [r0, #0]
 8006fd6:	f013 0207 	ands.w	r2, r3, #7
 8006fda:	4601      	mov	r1, r0
 8006fdc:	d00b      	beq.n	8006ff6 <__lo0bits+0x22>
 8006fde:	07da      	lsls	r2, r3, #31
 8006fe0:	d424      	bmi.n	800702c <__lo0bits+0x58>
 8006fe2:	0798      	lsls	r0, r3, #30
 8006fe4:	bf49      	itett	mi
 8006fe6:	085b      	lsrmi	r3, r3, #1
 8006fe8:	089b      	lsrpl	r3, r3, #2
 8006fea:	2001      	movmi	r0, #1
 8006fec:	600b      	strmi	r3, [r1, #0]
 8006fee:	bf5c      	itt	pl
 8006ff0:	600b      	strpl	r3, [r1, #0]
 8006ff2:	2002      	movpl	r0, #2
 8006ff4:	4770      	bx	lr
 8006ff6:	b298      	uxth	r0, r3
 8006ff8:	b9b0      	cbnz	r0, 8007028 <__lo0bits+0x54>
 8006ffa:	0c1b      	lsrs	r3, r3, #16
 8006ffc:	2010      	movs	r0, #16
 8006ffe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007002:	bf04      	itt	eq
 8007004:	0a1b      	lsreq	r3, r3, #8
 8007006:	3008      	addeq	r0, #8
 8007008:	071a      	lsls	r2, r3, #28
 800700a:	bf04      	itt	eq
 800700c:	091b      	lsreq	r3, r3, #4
 800700e:	3004      	addeq	r0, #4
 8007010:	079a      	lsls	r2, r3, #30
 8007012:	bf04      	itt	eq
 8007014:	089b      	lsreq	r3, r3, #2
 8007016:	3002      	addeq	r0, #2
 8007018:	07da      	lsls	r2, r3, #31
 800701a:	d403      	bmi.n	8007024 <__lo0bits+0x50>
 800701c:	085b      	lsrs	r3, r3, #1
 800701e:	f100 0001 	add.w	r0, r0, #1
 8007022:	d005      	beq.n	8007030 <__lo0bits+0x5c>
 8007024:	600b      	str	r3, [r1, #0]
 8007026:	4770      	bx	lr
 8007028:	4610      	mov	r0, r2
 800702a:	e7e8      	b.n	8006ffe <__lo0bits+0x2a>
 800702c:	2000      	movs	r0, #0
 800702e:	4770      	bx	lr
 8007030:	2020      	movs	r0, #32
 8007032:	4770      	bx	lr

08007034 <__i2b>:
 8007034:	b510      	push	{r4, lr}
 8007036:	460c      	mov	r4, r1
 8007038:	2101      	movs	r1, #1
 800703a:	f7ff feff 	bl	8006e3c <_Balloc>
 800703e:	4602      	mov	r2, r0
 8007040:	b928      	cbnz	r0, 800704e <__i2b+0x1a>
 8007042:	4b05      	ldr	r3, [pc, #20]	; (8007058 <__i2b+0x24>)
 8007044:	4805      	ldr	r0, [pc, #20]	; (800705c <__i2b+0x28>)
 8007046:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800704a:	f000 fb3f 	bl	80076cc <__assert_func>
 800704e:	2301      	movs	r3, #1
 8007050:	6144      	str	r4, [r0, #20]
 8007052:	6103      	str	r3, [r0, #16]
 8007054:	bd10      	pop	{r4, pc}
 8007056:	bf00      	nop
 8007058:	08008f1b 	.word	0x08008f1b
 800705c:	08008f2c 	.word	0x08008f2c

08007060 <__multiply>:
 8007060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007064:	4614      	mov	r4, r2
 8007066:	690a      	ldr	r2, [r1, #16]
 8007068:	6923      	ldr	r3, [r4, #16]
 800706a:	429a      	cmp	r2, r3
 800706c:	bfb8      	it	lt
 800706e:	460b      	movlt	r3, r1
 8007070:	460d      	mov	r5, r1
 8007072:	bfbc      	itt	lt
 8007074:	4625      	movlt	r5, r4
 8007076:	461c      	movlt	r4, r3
 8007078:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800707c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007080:	68ab      	ldr	r3, [r5, #8]
 8007082:	6869      	ldr	r1, [r5, #4]
 8007084:	eb0a 0709 	add.w	r7, sl, r9
 8007088:	42bb      	cmp	r3, r7
 800708a:	b085      	sub	sp, #20
 800708c:	bfb8      	it	lt
 800708e:	3101      	addlt	r1, #1
 8007090:	f7ff fed4 	bl	8006e3c <_Balloc>
 8007094:	b930      	cbnz	r0, 80070a4 <__multiply+0x44>
 8007096:	4602      	mov	r2, r0
 8007098:	4b42      	ldr	r3, [pc, #264]	; (80071a4 <__multiply+0x144>)
 800709a:	4843      	ldr	r0, [pc, #268]	; (80071a8 <__multiply+0x148>)
 800709c:	f240 115d 	movw	r1, #349	; 0x15d
 80070a0:	f000 fb14 	bl	80076cc <__assert_func>
 80070a4:	f100 0614 	add.w	r6, r0, #20
 80070a8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80070ac:	4633      	mov	r3, r6
 80070ae:	2200      	movs	r2, #0
 80070b0:	4543      	cmp	r3, r8
 80070b2:	d31e      	bcc.n	80070f2 <__multiply+0x92>
 80070b4:	f105 0c14 	add.w	ip, r5, #20
 80070b8:	f104 0314 	add.w	r3, r4, #20
 80070bc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80070c0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80070c4:	9202      	str	r2, [sp, #8]
 80070c6:	ebac 0205 	sub.w	r2, ip, r5
 80070ca:	3a15      	subs	r2, #21
 80070cc:	f022 0203 	bic.w	r2, r2, #3
 80070d0:	3204      	adds	r2, #4
 80070d2:	f105 0115 	add.w	r1, r5, #21
 80070d6:	458c      	cmp	ip, r1
 80070d8:	bf38      	it	cc
 80070da:	2204      	movcc	r2, #4
 80070dc:	9201      	str	r2, [sp, #4]
 80070de:	9a02      	ldr	r2, [sp, #8]
 80070e0:	9303      	str	r3, [sp, #12]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d808      	bhi.n	80070f8 <__multiply+0x98>
 80070e6:	2f00      	cmp	r7, #0
 80070e8:	dc55      	bgt.n	8007196 <__multiply+0x136>
 80070ea:	6107      	str	r7, [r0, #16]
 80070ec:	b005      	add	sp, #20
 80070ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f2:	f843 2b04 	str.w	r2, [r3], #4
 80070f6:	e7db      	b.n	80070b0 <__multiply+0x50>
 80070f8:	f8b3 a000 	ldrh.w	sl, [r3]
 80070fc:	f1ba 0f00 	cmp.w	sl, #0
 8007100:	d020      	beq.n	8007144 <__multiply+0xe4>
 8007102:	f105 0e14 	add.w	lr, r5, #20
 8007106:	46b1      	mov	r9, r6
 8007108:	2200      	movs	r2, #0
 800710a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800710e:	f8d9 b000 	ldr.w	fp, [r9]
 8007112:	b2a1      	uxth	r1, r4
 8007114:	fa1f fb8b 	uxth.w	fp, fp
 8007118:	fb0a b101 	mla	r1, sl, r1, fp
 800711c:	4411      	add	r1, r2
 800711e:	f8d9 2000 	ldr.w	r2, [r9]
 8007122:	0c24      	lsrs	r4, r4, #16
 8007124:	0c12      	lsrs	r2, r2, #16
 8007126:	fb0a 2404 	mla	r4, sl, r4, r2
 800712a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800712e:	b289      	uxth	r1, r1
 8007130:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007134:	45f4      	cmp	ip, lr
 8007136:	f849 1b04 	str.w	r1, [r9], #4
 800713a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800713e:	d8e4      	bhi.n	800710a <__multiply+0xaa>
 8007140:	9901      	ldr	r1, [sp, #4]
 8007142:	5072      	str	r2, [r6, r1]
 8007144:	9a03      	ldr	r2, [sp, #12]
 8007146:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800714a:	3304      	adds	r3, #4
 800714c:	f1b9 0f00 	cmp.w	r9, #0
 8007150:	d01f      	beq.n	8007192 <__multiply+0x132>
 8007152:	6834      	ldr	r4, [r6, #0]
 8007154:	f105 0114 	add.w	r1, r5, #20
 8007158:	46b6      	mov	lr, r6
 800715a:	f04f 0a00 	mov.w	sl, #0
 800715e:	880a      	ldrh	r2, [r1, #0]
 8007160:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007164:	fb09 b202 	mla	r2, r9, r2, fp
 8007168:	4492      	add	sl, r2
 800716a:	b2a4      	uxth	r4, r4
 800716c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007170:	f84e 4b04 	str.w	r4, [lr], #4
 8007174:	f851 4b04 	ldr.w	r4, [r1], #4
 8007178:	f8be 2000 	ldrh.w	r2, [lr]
 800717c:	0c24      	lsrs	r4, r4, #16
 800717e:	fb09 2404 	mla	r4, r9, r4, r2
 8007182:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007186:	458c      	cmp	ip, r1
 8007188:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800718c:	d8e7      	bhi.n	800715e <__multiply+0xfe>
 800718e:	9a01      	ldr	r2, [sp, #4]
 8007190:	50b4      	str	r4, [r6, r2]
 8007192:	3604      	adds	r6, #4
 8007194:	e7a3      	b.n	80070de <__multiply+0x7e>
 8007196:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1a5      	bne.n	80070ea <__multiply+0x8a>
 800719e:	3f01      	subs	r7, #1
 80071a0:	e7a1      	b.n	80070e6 <__multiply+0x86>
 80071a2:	bf00      	nop
 80071a4:	08008f1b 	.word	0x08008f1b
 80071a8:	08008f2c 	.word	0x08008f2c

080071ac <__pow5mult>:
 80071ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071b0:	4615      	mov	r5, r2
 80071b2:	f012 0203 	ands.w	r2, r2, #3
 80071b6:	4606      	mov	r6, r0
 80071b8:	460f      	mov	r7, r1
 80071ba:	d007      	beq.n	80071cc <__pow5mult+0x20>
 80071bc:	4c25      	ldr	r4, [pc, #148]	; (8007254 <__pow5mult+0xa8>)
 80071be:	3a01      	subs	r2, #1
 80071c0:	2300      	movs	r3, #0
 80071c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80071c6:	f7ff fe9b 	bl	8006f00 <__multadd>
 80071ca:	4607      	mov	r7, r0
 80071cc:	10ad      	asrs	r5, r5, #2
 80071ce:	d03d      	beq.n	800724c <__pow5mult+0xa0>
 80071d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80071d2:	b97c      	cbnz	r4, 80071f4 <__pow5mult+0x48>
 80071d4:	2010      	movs	r0, #16
 80071d6:	f7ff fe1b 	bl	8006e10 <malloc>
 80071da:	4602      	mov	r2, r0
 80071dc:	6270      	str	r0, [r6, #36]	; 0x24
 80071de:	b928      	cbnz	r0, 80071ec <__pow5mult+0x40>
 80071e0:	4b1d      	ldr	r3, [pc, #116]	; (8007258 <__pow5mult+0xac>)
 80071e2:	481e      	ldr	r0, [pc, #120]	; (800725c <__pow5mult+0xb0>)
 80071e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80071e8:	f000 fa70 	bl	80076cc <__assert_func>
 80071ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80071f0:	6004      	str	r4, [r0, #0]
 80071f2:	60c4      	str	r4, [r0, #12]
 80071f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80071f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80071fc:	b94c      	cbnz	r4, 8007212 <__pow5mult+0x66>
 80071fe:	f240 2171 	movw	r1, #625	; 0x271
 8007202:	4630      	mov	r0, r6
 8007204:	f7ff ff16 	bl	8007034 <__i2b>
 8007208:	2300      	movs	r3, #0
 800720a:	f8c8 0008 	str.w	r0, [r8, #8]
 800720e:	4604      	mov	r4, r0
 8007210:	6003      	str	r3, [r0, #0]
 8007212:	f04f 0900 	mov.w	r9, #0
 8007216:	07eb      	lsls	r3, r5, #31
 8007218:	d50a      	bpl.n	8007230 <__pow5mult+0x84>
 800721a:	4639      	mov	r1, r7
 800721c:	4622      	mov	r2, r4
 800721e:	4630      	mov	r0, r6
 8007220:	f7ff ff1e 	bl	8007060 <__multiply>
 8007224:	4639      	mov	r1, r7
 8007226:	4680      	mov	r8, r0
 8007228:	4630      	mov	r0, r6
 800722a:	f7ff fe47 	bl	8006ebc <_Bfree>
 800722e:	4647      	mov	r7, r8
 8007230:	106d      	asrs	r5, r5, #1
 8007232:	d00b      	beq.n	800724c <__pow5mult+0xa0>
 8007234:	6820      	ldr	r0, [r4, #0]
 8007236:	b938      	cbnz	r0, 8007248 <__pow5mult+0x9c>
 8007238:	4622      	mov	r2, r4
 800723a:	4621      	mov	r1, r4
 800723c:	4630      	mov	r0, r6
 800723e:	f7ff ff0f 	bl	8007060 <__multiply>
 8007242:	6020      	str	r0, [r4, #0]
 8007244:	f8c0 9000 	str.w	r9, [r0]
 8007248:	4604      	mov	r4, r0
 800724a:	e7e4      	b.n	8007216 <__pow5mult+0x6a>
 800724c:	4638      	mov	r0, r7
 800724e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007252:	bf00      	nop
 8007254:	08009080 	.word	0x08009080
 8007258:	08008ea5 	.word	0x08008ea5
 800725c:	08008f2c 	.word	0x08008f2c

08007260 <__lshift>:
 8007260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007264:	460c      	mov	r4, r1
 8007266:	6849      	ldr	r1, [r1, #4]
 8007268:	6923      	ldr	r3, [r4, #16]
 800726a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800726e:	68a3      	ldr	r3, [r4, #8]
 8007270:	4607      	mov	r7, r0
 8007272:	4691      	mov	r9, r2
 8007274:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007278:	f108 0601 	add.w	r6, r8, #1
 800727c:	42b3      	cmp	r3, r6
 800727e:	db0b      	blt.n	8007298 <__lshift+0x38>
 8007280:	4638      	mov	r0, r7
 8007282:	f7ff fddb 	bl	8006e3c <_Balloc>
 8007286:	4605      	mov	r5, r0
 8007288:	b948      	cbnz	r0, 800729e <__lshift+0x3e>
 800728a:	4602      	mov	r2, r0
 800728c:	4b28      	ldr	r3, [pc, #160]	; (8007330 <__lshift+0xd0>)
 800728e:	4829      	ldr	r0, [pc, #164]	; (8007334 <__lshift+0xd4>)
 8007290:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007294:	f000 fa1a 	bl	80076cc <__assert_func>
 8007298:	3101      	adds	r1, #1
 800729a:	005b      	lsls	r3, r3, #1
 800729c:	e7ee      	b.n	800727c <__lshift+0x1c>
 800729e:	2300      	movs	r3, #0
 80072a0:	f100 0114 	add.w	r1, r0, #20
 80072a4:	f100 0210 	add.w	r2, r0, #16
 80072a8:	4618      	mov	r0, r3
 80072aa:	4553      	cmp	r3, sl
 80072ac:	db33      	blt.n	8007316 <__lshift+0xb6>
 80072ae:	6920      	ldr	r0, [r4, #16]
 80072b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80072b4:	f104 0314 	add.w	r3, r4, #20
 80072b8:	f019 091f 	ands.w	r9, r9, #31
 80072bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80072c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80072c4:	d02b      	beq.n	800731e <__lshift+0xbe>
 80072c6:	f1c9 0e20 	rsb	lr, r9, #32
 80072ca:	468a      	mov	sl, r1
 80072cc:	2200      	movs	r2, #0
 80072ce:	6818      	ldr	r0, [r3, #0]
 80072d0:	fa00 f009 	lsl.w	r0, r0, r9
 80072d4:	4302      	orrs	r2, r0
 80072d6:	f84a 2b04 	str.w	r2, [sl], #4
 80072da:	f853 2b04 	ldr.w	r2, [r3], #4
 80072de:	459c      	cmp	ip, r3
 80072e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80072e4:	d8f3      	bhi.n	80072ce <__lshift+0x6e>
 80072e6:	ebac 0304 	sub.w	r3, ip, r4
 80072ea:	3b15      	subs	r3, #21
 80072ec:	f023 0303 	bic.w	r3, r3, #3
 80072f0:	3304      	adds	r3, #4
 80072f2:	f104 0015 	add.w	r0, r4, #21
 80072f6:	4584      	cmp	ip, r0
 80072f8:	bf38      	it	cc
 80072fa:	2304      	movcc	r3, #4
 80072fc:	50ca      	str	r2, [r1, r3]
 80072fe:	b10a      	cbz	r2, 8007304 <__lshift+0xa4>
 8007300:	f108 0602 	add.w	r6, r8, #2
 8007304:	3e01      	subs	r6, #1
 8007306:	4638      	mov	r0, r7
 8007308:	612e      	str	r6, [r5, #16]
 800730a:	4621      	mov	r1, r4
 800730c:	f7ff fdd6 	bl	8006ebc <_Bfree>
 8007310:	4628      	mov	r0, r5
 8007312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007316:	f842 0f04 	str.w	r0, [r2, #4]!
 800731a:	3301      	adds	r3, #1
 800731c:	e7c5      	b.n	80072aa <__lshift+0x4a>
 800731e:	3904      	subs	r1, #4
 8007320:	f853 2b04 	ldr.w	r2, [r3], #4
 8007324:	f841 2f04 	str.w	r2, [r1, #4]!
 8007328:	459c      	cmp	ip, r3
 800732a:	d8f9      	bhi.n	8007320 <__lshift+0xc0>
 800732c:	e7ea      	b.n	8007304 <__lshift+0xa4>
 800732e:	bf00      	nop
 8007330:	08008f1b 	.word	0x08008f1b
 8007334:	08008f2c 	.word	0x08008f2c

08007338 <__mcmp>:
 8007338:	b530      	push	{r4, r5, lr}
 800733a:	6902      	ldr	r2, [r0, #16]
 800733c:	690c      	ldr	r4, [r1, #16]
 800733e:	1b12      	subs	r2, r2, r4
 8007340:	d10e      	bne.n	8007360 <__mcmp+0x28>
 8007342:	f100 0314 	add.w	r3, r0, #20
 8007346:	3114      	adds	r1, #20
 8007348:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800734c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007350:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007354:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007358:	42a5      	cmp	r5, r4
 800735a:	d003      	beq.n	8007364 <__mcmp+0x2c>
 800735c:	d305      	bcc.n	800736a <__mcmp+0x32>
 800735e:	2201      	movs	r2, #1
 8007360:	4610      	mov	r0, r2
 8007362:	bd30      	pop	{r4, r5, pc}
 8007364:	4283      	cmp	r3, r0
 8007366:	d3f3      	bcc.n	8007350 <__mcmp+0x18>
 8007368:	e7fa      	b.n	8007360 <__mcmp+0x28>
 800736a:	f04f 32ff 	mov.w	r2, #4294967295
 800736e:	e7f7      	b.n	8007360 <__mcmp+0x28>

08007370 <__mdiff>:
 8007370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007374:	460c      	mov	r4, r1
 8007376:	4606      	mov	r6, r0
 8007378:	4611      	mov	r1, r2
 800737a:	4620      	mov	r0, r4
 800737c:	4617      	mov	r7, r2
 800737e:	f7ff ffdb 	bl	8007338 <__mcmp>
 8007382:	1e05      	subs	r5, r0, #0
 8007384:	d110      	bne.n	80073a8 <__mdiff+0x38>
 8007386:	4629      	mov	r1, r5
 8007388:	4630      	mov	r0, r6
 800738a:	f7ff fd57 	bl	8006e3c <_Balloc>
 800738e:	b930      	cbnz	r0, 800739e <__mdiff+0x2e>
 8007390:	4b39      	ldr	r3, [pc, #228]	; (8007478 <__mdiff+0x108>)
 8007392:	4602      	mov	r2, r0
 8007394:	f240 2132 	movw	r1, #562	; 0x232
 8007398:	4838      	ldr	r0, [pc, #224]	; (800747c <__mdiff+0x10c>)
 800739a:	f000 f997 	bl	80076cc <__assert_func>
 800739e:	2301      	movs	r3, #1
 80073a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80073a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a8:	bfa4      	itt	ge
 80073aa:	463b      	movge	r3, r7
 80073ac:	4627      	movge	r7, r4
 80073ae:	4630      	mov	r0, r6
 80073b0:	6879      	ldr	r1, [r7, #4]
 80073b2:	bfa6      	itte	ge
 80073b4:	461c      	movge	r4, r3
 80073b6:	2500      	movge	r5, #0
 80073b8:	2501      	movlt	r5, #1
 80073ba:	f7ff fd3f 	bl	8006e3c <_Balloc>
 80073be:	b920      	cbnz	r0, 80073ca <__mdiff+0x5a>
 80073c0:	4b2d      	ldr	r3, [pc, #180]	; (8007478 <__mdiff+0x108>)
 80073c2:	4602      	mov	r2, r0
 80073c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80073c8:	e7e6      	b.n	8007398 <__mdiff+0x28>
 80073ca:	693e      	ldr	r6, [r7, #16]
 80073cc:	60c5      	str	r5, [r0, #12]
 80073ce:	6925      	ldr	r5, [r4, #16]
 80073d0:	f107 0114 	add.w	r1, r7, #20
 80073d4:	f104 0914 	add.w	r9, r4, #20
 80073d8:	f100 0e14 	add.w	lr, r0, #20
 80073dc:	f107 0210 	add.w	r2, r7, #16
 80073e0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80073e4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80073e8:	46f2      	mov	sl, lr
 80073ea:	2700      	movs	r7, #0
 80073ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80073f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80073f4:	fa1f f883 	uxth.w	r8, r3
 80073f8:	fa17 f78b 	uxtah	r7, r7, fp
 80073fc:	0c1b      	lsrs	r3, r3, #16
 80073fe:	eba7 0808 	sub.w	r8, r7, r8
 8007402:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007406:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800740a:	fa1f f888 	uxth.w	r8, r8
 800740e:	141f      	asrs	r7, r3, #16
 8007410:	454d      	cmp	r5, r9
 8007412:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007416:	f84a 3b04 	str.w	r3, [sl], #4
 800741a:	d8e7      	bhi.n	80073ec <__mdiff+0x7c>
 800741c:	1b2b      	subs	r3, r5, r4
 800741e:	3b15      	subs	r3, #21
 8007420:	f023 0303 	bic.w	r3, r3, #3
 8007424:	3304      	adds	r3, #4
 8007426:	3415      	adds	r4, #21
 8007428:	42a5      	cmp	r5, r4
 800742a:	bf38      	it	cc
 800742c:	2304      	movcc	r3, #4
 800742e:	4419      	add	r1, r3
 8007430:	4473      	add	r3, lr
 8007432:	469e      	mov	lr, r3
 8007434:	460d      	mov	r5, r1
 8007436:	4565      	cmp	r5, ip
 8007438:	d30e      	bcc.n	8007458 <__mdiff+0xe8>
 800743a:	f10c 0203 	add.w	r2, ip, #3
 800743e:	1a52      	subs	r2, r2, r1
 8007440:	f022 0203 	bic.w	r2, r2, #3
 8007444:	3903      	subs	r1, #3
 8007446:	458c      	cmp	ip, r1
 8007448:	bf38      	it	cc
 800744a:	2200      	movcc	r2, #0
 800744c:	441a      	add	r2, r3
 800744e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007452:	b17b      	cbz	r3, 8007474 <__mdiff+0x104>
 8007454:	6106      	str	r6, [r0, #16]
 8007456:	e7a5      	b.n	80073a4 <__mdiff+0x34>
 8007458:	f855 8b04 	ldr.w	r8, [r5], #4
 800745c:	fa17 f488 	uxtah	r4, r7, r8
 8007460:	1422      	asrs	r2, r4, #16
 8007462:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007466:	b2a4      	uxth	r4, r4
 8007468:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800746c:	f84e 4b04 	str.w	r4, [lr], #4
 8007470:	1417      	asrs	r7, r2, #16
 8007472:	e7e0      	b.n	8007436 <__mdiff+0xc6>
 8007474:	3e01      	subs	r6, #1
 8007476:	e7ea      	b.n	800744e <__mdiff+0xde>
 8007478:	08008f1b 	.word	0x08008f1b
 800747c:	08008f2c 	.word	0x08008f2c

08007480 <__d2b>:
 8007480:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007484:	4689      	mov	r9, r1
 8007486:	2101      	movs	r1, #1
 8007488:	ec57 6b10 	vmov	r6, r7, d0
 800748c:	4690      	mov	r8, r2
 800748e:	f7ff fcd5 	bl	8006e3c <_Balloc>
 8007492:	4604      	mov	r4, r0
 8007494:	b930      	cbnz	r0, 80074a4 <__d2b+0x24>
 8007496:	4602      	mov	r2, r0
 8007498:	4b25      	ldr	r3, [pc, #148]	; (8007530 <__d2b+0xb0>)
 800749a:	4826      	ldr	r0, [pc, #152]	; (8007534 <__d2b+0xb4>)
 800749c:	f240 310a 	movw	r1, #778	; 0x30a
 80074a0:	f000 f914 	bl	80076cc <__assert_func>
 80074a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80074a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80074ac:	bb35      	cbnz	r5, 80074fc <__d2b+0x7c>
 80074ae:	2e00      	cmp	r6, #0
 80074b0:	9301      	str	r3, [sp, #4]
 80074b2:	d028      	beq.n	8007506 <__d2b+0x86>
 80074b4:	4668      	mov	r0, sp
 80074b6:	9600      	str	r6, [sp, #0]
 80074b8:	f7ff fd8c 	bl	8006fd4 <__lo0bits>
 80074bc:	9900      	ldr	r1, [sp, #0]
 80074be:	b300      	cbz	r0, 8007502 <__d2b+0x82>
 80074c0:	9a01      	ldr	r2, [sp, #4]
 80074c2:	f1c0 0320 	rsb	r3, r0, #32
 80074c6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ca:	430b      	orrs	r3, r1
 80074cc:	40c2      	lsrs	r2, r0
 80074ce:	6163      	str	r3, [r4, #20]
 80074d0:	9201      	str	r2, [sp, #4]
 80074d2:	9b01      	ldr	r3, [sp, #4]
 80074d4:	61a3      	str	r3, [r4, #24]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	bf14      	ite	ne
 80074da:	2202      	movne	r2, #2
 80074dc:	2201      	moveq	r2, #1
 80074de:	6122      	str	r2, [r4, #16]
 80074e0:	b1d5      	cbz	r5, 8007518 <__d2b+0x98>
 80074e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80074e6:	4405      	add	r5, r0
 80074e8:	f8c9 5000 	str.w	r5, [r9]
 80074ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80074f0:	f8c8 0000 	str.w	r0, [r8]
 80074f4:	4620      	mov	r0, r4
 80074f6:	b003      	add	sp, #12
 80074f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007500:	e7d5      	b.n	80074ae <__d2b+0x2e>
 8007502:	6161      	str	r1, [r4, #20]
 8007504:	e7e5      	b.n	80074d2 <__d2b+0x52>
 8007506:	a801      	add	r0, sp, #4
 8007508:	f7ff fd64 	bl	8006fd4 <__lo0bits>
 800750c:	9b01      	ldr	r3, [sp, #4]
 800750e:	6163      	str	r3, [r4, #20]
 8007510:	2201      	movs	r2, #1
 8007512:	6122      	str	r2, [r4, #16]
 8007514:	3020      	adds	r0, #32
 8007516:	e7e3      	b.n	80074e0 <__d2b+0x60>
 8007518:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800751c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007520:	f8c9 0000 	str.w	r0, [r9]
 8007524:	6918      	ldr	r0, [r3, #16]
 8007526:	f7ff fd35 	bl	8006f94 <__hi0bits>
 800752a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800752e:	e7df      	b.n	80074f0 <__d2b+0x70>
 8007530:	08008f1b 	.word	0x08008f1b
 8007534:	08008f2c 	.word	0x08008f2c

08007538 <_calloc_r>:
 8007538:	b513      	push	{r0, r1, r4, lr}
 800753a:	434a      	muls	r2, r1
 800753c:	4611      	mov	r1, r2
 800753e:	9201      	str	r2, [sp, #4]
 8007540:	f000 f85a 	bl	80075f8 <_malloc_r>
 8007544:	4604      	mov	r4, r0
 8007546:	b118      	cbz	r0, 8007550 <_calloc_r+0x18>
 8007548:	9a01      	ldr	r2, [sp, #4]
 800754a:	2100      	movs	r1, #0
 800754c:	f7fe f972 	bl	8005834 <memset>
 8007550:	4620      	mov	r0, r4
 8007552:	b002      	add	sp, #8
 8007554:	bd10      	pop	{r4, pc}
	...

08007558 <_free_r>:
 8007558:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800755a:	2900      	cmp	r1, #0
 800755c:	d048      	beq.n	80075f0 <_free_r+0x98>
 800755e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007562:	9001      	str	r0, [sp, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	f1a1 0404 	sub.w	r4, r1, #4
 800756a:	bfb8      	it	lt
 800756c:	18e4      	addlt	r4, r4, r3
 800756e:	f000 f8ef 	bl	8007750 <__malloc_lock>
 8007572:	4a20      	ldr	r2, [pc, #128]	; (80075f4 <_free_r+0x9c>)
 8007574:	9801      	ldr	r0, [sp, #4]
 8007576:	6813      	ldr	r3, [r2, #0]
 8007578:	4615      	mov	r5, r2
 800757a:	b933      	cbnz	r3, 800758a <_free_r+0x32>
 800757c:	6063      	str	r3, [r4, #4]
 800757e:	6014      	str	r4, [r2, #0]
 8007580:	b003      	add	sp, #12
 8007582:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007586:	f000 b8e9 	b.w	800775c <__malloc_unlock>
 800758a:	42a3      	cmp	r3, r4
 800758c:	d90b      	bls.n	80075a6 <_free_r+0x4e>
 800758e:	6821      	ldr	r1, [r4, #0]
 8007590:	1862      	adds	r2, r4, r1
 8007592:	4293      	cmp	r3, r2
 8007594:	bf04      	itt	eq
 8007596:	681a      	ldreq	r2, [r3, #0]
 8007598:	685b      	ldreq	r3, [r3, #4]
 800759a:	6063      	str	r3, [r4, #4]
 800759c:	bf04      	itt	eq
 800759e:	1852      	addeq	r2, r2, r1
 80075a0:	6022      	streq	r2, [r4, #0]
 80075a2:	602c      	str	r4, [r5, #0]
 80075a4:	e7ec      	b.n	8007580 <_free_r+0x28>
 80075a6:	461a      	mov	r2, r3
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	b10b      	cbz	r3, 80075b0 <_free_r+0x58>
 80075ac:	42a3      	cmp	r3, r4
 80075ae:	d9fa      	bls.n	80075a6 <_free_r+0x4e>
 80075b0:	6811      	ldr	r1, [r2, #0]
 80075b2:	1855      	adds	r5, r2, r1
 80075b4:	42a5      	cmp	r5, r4
 80075b6:	d10b      	bne.n	80075d0 <_free_r+0x78>
 80075b8:	6824      	ldr	r4, [r4, #0]
 80075ba:	4421      	add	r1, r4
 80075bc:	1854      	adds	r4, r2, r1
 80075be:	42a3      	cmp	r3, r4
 80075c0:	6011      	str	r1, [r2, #0]
 80075c2:	d1dd      	bne.n	8007580 <_free_r+0x28>
 80075c4:	681c      	ldr	r4, [r3, #0]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	6053      	str	r3, [r2, #4]
 80075ca:	4421      	add	r1, r4
 80075cc:	6011      	str	r1, [r2, #0]
 80075ce:	e7d7      	b.n	8007580 <_free_r+0x28>
 80075d0:	d902      	bls.n	80075d8 <_free_r+0x80>
 80075d2:	230c      	movs	r3, #12
 80075d4:	6003      	str	r3, [r0, #0]
 80075d6:	e7d3      	b.n	8007580 <_free_r+0x28>
 80075d8:	6825      	ldr	r5, [r4, #0]
 80075da:	1961      	adds	r1, r4, r5
 80075dc:	428b      	cmp	r3, r1
 80075de:	bf04      	itt	eq
 80075e0:	6819      	ldreq	r1, [r3, #0]
 80075e2:	685b      	ldreq	r3, [r3, #4]
 80075e4:	6063      	str	r3, [r4, #4]
 80075e6:	bf04      	itt	eq
 80075e8:	1949      	addeq	r1, r1, r5
 80075ea:	6021      	streq	r1, [r4, #0]
 80075ec:	6054      	str	r4, [r2, #4]
 80075ee:	e7c7      	b.n	8007580 <_free_r+0x28>
 80075f0:	b003      	add	sp, #12
 80075f2:	bd30      	pop	{r4, r5, pc}
 80075f4:	20000200 	.word	0x20000200

080075f8 <_malloc_r>:
 80075f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fa:	1ccd      	adds	r5, r1, #3
 80075fc:	f025 0503 	bic.w	r5, r5, #3
 8007600:	3508      	adds	r5, #8
 8007602:	2d0c      	cmp	r5, #12
 8007604:	bf38      	it	cc
 8007606:	250c      	movcc	r5, #12
 8007608:	2d00      	cmp	r5, #0
 800760a:	4606      	mov	r6, r0
 800760c:	db01      	blt.n	8007612 <_malloc_r+0x1a>
 800760e:	42a9      	cmp	r1, r5
 8007610:	d903      	bls.n	800761a <_malloc_r+0x22>
 8007612:	230c      	movs	r3, #12
 8007614:	6033      	str	r3, [r6, #0]
 8007616:	2000      	movs	r0, #0
 8007618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800761a:	f000 f899 	bl	8007750 <__malloc_lock>
 800761e:	4921      	ldr	r1, [pc, #132]	; (80076a4 <_malloc_r+0xac>)
 8007620:	680a      	ldr	r2, [r1, #0]
 8007622:	4614      	mov	r4, r2
 8007624:	b99c      	cbnz	r4, 800764e <_malloc_r+0x56>
 8007626:	4f20      	ldr	r7, [pc, #128]	; (80076a8 <_malloc_r+0xb0>)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	b923      	cbnz	r3, 8007636 <_malloc_r+0x3e>
 800762c:	4621      	mov	r1, r4
 800762e:	4630      	mov	r0, r6
 8007630:	f000 f83c 	bl	80076ac <_sbrk_r>
 8007634:	6038      	str	r0, [r7, #0]
 8007636:	4629      	mov	r1, r5
 8007638:	4630      	mov	r0, r6
 800763a:	f000 f837 	bl	80076ac <_sbrk_r>
 800763e:	1c43      	adds	r3, r0, #1
 8007640:	d123      	bne.n	800768a <_malloc_r+0x92>
 8007642:	230c      	movs	r3, #12
 8007644:	6033      	str	r3, [r6, #0]
 8007646:	4630      	mov	r0, r6
 8007648:	f000 f888 	bl	800775c <__malloc_unlock>
 800764c:	e7e3      	b.n	8007616 <_malloc_r+0x1e>
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	1b5b      	subs	r3, r3, r5
 8007652:	d417      	bmi.n	8007684 <_malloc_r+0x8c>
 8007654:	2b0b      	cmp	r3, #11
 8007656:	d903      	bls.n	8007660 <_malloc_r+0x68>
 8007658:	6023      	str	r3, [r4, #0]
 800765a:	441c      	add	r4, r3
 800765c:	6025      	str	r5, [r4, #0]
 800765e:	e004      	b.n	800766a <_malloc_r+0x72>
 8007660:	6863      	ldr	r3, [r4, #4]
 8007662:	42a2      	cmp	r2, r4
 8007664:	bf0c      	ite	eq
 8007666:	600b      	streq	r3, [r1, #0]
 8007668:	6053      	strne	r3, [r2, #4]
 800766a:	4630      	mov	r0, r6
 800766c:	f000 f876 	bl	800775c <__malloc_unlock>
 8007670:	f104 000b 	add.w	r0, r4, #11
 8007674:	1d23      	adds	r3, r4, #4
 8007676:	f020 0007 	bic.w	r0, r0, #7
 800767a:	1ac2      	subs	r2, r0, r3
 800767c:	d0cc      	beq.n	8007618 <_malloc_r+0x20>
 800767e:	1a1b      	subs	r3, r3, r0
 8007680:	50a3      	str	r3, [r4, r2]
 8007682:	e7c9      	b.n	8007618 <_malloc_r+0x20>
 8007684:	4622      	mov	r2, r4
 8007686:	6864      	ldr	r4, [r4, #4]
 8007688:	e7cc      	b.n	8007624 <_malloc_r+0x2c>
 800768a:	1cc4      	adds	r4, r0, #3
 800768c:	f024 0403 	bic.w	r4, r4, #3
 8007690:	42a0      	cmp	r0, r4
 8007692:	d0e3      	beq.n	800765c <_malloc_r+0x64>
 8007694:	1a21      	subs	r1, r4, r0
 8007696:	4630      	mov	r0, r6
 8007698:	f000 f808 	bl	80076ac <_sbrk_r>
 800769c:	3001      	adds	r0, #1
 800769e:	d1dd      	bne.n	800765c <_malloc_r+0x64>
 80076a0:	e7cf      	b.n	8007642 <_malloc_r+0x4a>
 80076a2:	bf00      	nop
 80076a4:	20000200 	.word	0x20000200
 80076a8:	20000204 	.word	0x20000204

080076ac <_sbrk_r>:
 80076ac:	b538      	push	{r3, r4, r5, lr}
 80076ae:	4d06      	ldr	r5, [pc, #24]	; (80076c8 <_sbrk_r+0x1c>)
 80076b0:	2300      	movs	r3, #0
 80076b2:	4604      	mov	r4, r0
 80076b4:	4608      	mov	r0, r1
 80076b6:	602b      	str	r3, [r5, #0]
 80076b8:	f7fa f978 	bl	80019ac <_sbrk>
 80076bc:	1c43      	adds	r3, r0, #1
 80076be:	d102      	bne.n	80076c6 <_sbrk_r+0x1a>
 80076c0:	682b      	ldr	r3, [r5, #0]
 80076c2:	b103      	cbz	r3, 80076c6 <_sbrk_r+0x1a>
 80076c4:	6023      	str	r3, [r4, #0]
 80076c6:	bd38      	pop	{r3, r4, r5, pc}
 80076c8:	200002ac 	.word	0x200002ac

080076cc <__assert_func>:
 80076cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076ce:	4614      	mov	r4, r2
 80076d0:	461a      	mov	r2, r3
 80076d2:	4b09      	ldr	r3, [pc, #36]	; (80076f8 <__assert_func+0x2c>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4605      	mov	r5, r0
 80076d8:	68d8      	ldr	r0, [r3, #12]
 80076da:	b14c      	cbz	r4, 80076f0 <__assert_func+0x24>
 80076dc:	4b07      	ldr	r3, [pc, #28]	; (80076fc <__assert_func+0x30>)
 80076de:	9100      	str	r1, [sp, #0]
 80076e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80076e4:	4906      	ldr	r1, [pc, #24]	; (8007700 <__assert_func+0x34>)
 80076e6:	462b      	mov	r3, r5
 80076e8:	f000 f80e 	bl	8007708 <fiprintf>
 80076ec:	f000 fa64 	bl	8007bb8 <abort>
 80076f0:	4b04      	ldr	r3, [pc, #16]	; (8007704 <__assert_func+0x38>)
 80076f2:	461c      	mov	r4, r3
 80076f4:	e7f3      	b.n	80076de <__assert_func+0x12>
 80076f6:	bf00      	nop
 80076f8:	2000000c 	.word	0x2000000c
 80076fc:	0800908c 	.word	0x0800908c
 8007700:	08009099 	.word	0x08009099
 8007704:	080090c7 	.word	0x080090c7

08007708 <fiprintf>:
 8007708:	b40e      	push	{r1, r2, r3}
 800770a:	b503      	push	{r0, r1, lr}
 800770c:	4601      	mov	r1, r0
 800770e:	ab03      	add	r3, sp, #12
 8007710:	4805      	ldr	r0, [pc, #20]	; (8007728 <fiprintf+0x20>)
 8007712:	f853 2b04 	ldr.w	r2, [r3], #4
 8007716:	6800      	ldr	r0, [r0, #0]
 8007718:	9301      	str	r3, [sp, #4]
 800771a:	f000 f84f 	bl	80077bc <_vfiprintf_r>
 800771e:	b002      	add	sp, #8
 8007720:	f85d eb04 	ldr.w	lr, [sp], #4
 8007724:	b003      	add	sp, #12
 8007726:	4770      	bx	lr
 8007728:	2000000c 	.word	0x2000000c

0800772c <__ascii_mbtowc>:
 800772c:	b082      	sub	sp, #8
 800772e:	b901      	cbnz	r1, 8007732 <__ascii_mbtowc+0x6>
 8007730:	a901      	add	r1, sp, #4
 8007732:	b142      	cbz	r2, 8007746 <__ascii_mbtowc+0x1a>
 8007734:	b14b      	cbz	r3, 800774a <__ascii_mbtowc+0x1e>
 8007736:	7813      	ldrb	r3, [r2, #0]
 8007738:	600b      	str	r3, [r1, #0]
 800773a:	7812      	ldrb	r2, [r2, #0]
 800773c:	1e10      	subs	r0, r2, #0
 800773e:	bf18      	it	ne
 8007740:	2001      	movne	r0, #1
 8007742:	b002      	add	sp, #8
 8007744:	4770      	bx	lr
 8007746:	4610      	mov	r0, r2
 8007748:	e7fb      	b.n	8007742 <__ascii_mbtowc+0x16>
 800774a:	f06f 0001 	mvn.w	r0, #1
 800774e:	e7f8      	b.n	8007742 <__ascii_mbtowc+0x16>

08007750 <__malloc_lock>:
 8007750:	4801      	ldr	r0, [pc, #4]	; (8007758 <__malloc_lock+0x8>)
 8007752:	f000 bbf1 	b.w	8007f38 <__retarget_lock_acquire_recursive>
 8007756:	bf00      	nop
 8007758:	200002b4 	.word	0x200002b4

0800775c <__malloc_unlock>:
 800775c:	4801      	ldr	r0, [pc, #4]	; (8007764 <__malloc_unlock+0x8>)
 800775e:	f000 bbec 	b.w	8007f3a <__retarget_lock_release_recursive>
 8007762:	bf00      	nop
 8007764:	200002b4 	.word	0x200002b4

08007768 <__sfputc_r>:
 8007768:	6893      	ldr	r3, [r2, #8]
 800776a:	3b01      	subs	r3, #1
 800776c:	2b00      	cmp	r3, #0
 800776e:	b410      	push	{r4}
 8007770:	6093      	str	r3, [r2, #8]
 8007772:	da08      	bge.n	8007786 <__sfputc_r+0x1e>
 8007774:	6994      	ldr	r4, [r2, #24]
 8007776:	42a3      	cmp	r3, r4
 8007778:	db01      	blt.n	800777e <__sfputc_r+0x16>
 800777a:	290a      	cmp	r1, #10
 800777c:	d103      	bne.n	8007786 <__sfputc_r+0x1e>
 800777e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007782:	f000 b94b 	b.w	8007a1c <__swbuf_r>
 8007786:	6813      	ldr	r3, [r2, #0]
 8007788:	1c58      	adds	r0, r3, #1
 800778a:	6010      	str	r0, [r2, #0]
 800778c:	7019      	strb	r1, [r3, #0]
 800778e:	4608      	mov	r0, r1
 8007790:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007794:	4770      	bx	lr

08007796 <__sfputs_r>:
 8007796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007798:	4606      	mov	r6, r0
 800779a:	460f      	mov	r7, r1
 800779c:	4614      	mov	r4, r2
 800779e:	18d5      	adds	r5, r2, r3
 80077a0:	42ac      	cmp	r4, r5
 80077a2:	d101      	bne.n	80077a8 <__sfputs_r+0x12>
 80077a4:	2000      	movs	r0, #0
 80077a6:	e007      	b.n	80077b8 <__sfputs_r+0x22>
 80077a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077ac:	463a      	mov	r2, r7
 80077ae:	4630      	mov	r0, r6
 80077b0:	f7ff ffda 	bl	8007768 <__sfputc_r>
 80077b4:	1c43      	adds	r3, r0, #1
 80077b6:	d1f3      	bne.n	80077a0 <__sfputs_r+0xa>
 80077b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080077bc <_vfiprintf_r>:
 80077bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c0:	460d      	mov	r5, r1
 80077c2:	b09d      	sub	sp, #116	; 0x74
 80077c4:	4614      	mov	r4, r2
 80077c6:	4698      	mov	r8, r3
 80077c8:	4606      	mov	r6, r0
 80077ca:	b118      	cbz	r0, 80077d4 <_vfiprintf_r+0x18>
 80077cc:	6983      	ldr	r3, [r0, #24]
 80077ce:	b90b      	cbnz	r3, 80077d4 <_vfiprintf_r+0x18>
 80077d0:	f000 fb14 	bl	8007dfc <__sinit>
 80077d4:	4b89      	ldr	r3, [pc, #548]	; (80079fc <_vfiprintf_r+0x240>)
 80077d6:	429d      	cmp	r5, r3
 80077d8:	d11b      	bne.n	8007812 <_vfiprintf_r+0x56>
 80077da:	6875      	ldr	r5, [r6, #4]
 80077dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077de:	07d9      	lsls	r1, r3, #31
 80077e0:	d405      	bmi.n	80077ee <_vfiprintf_r+0x32>
 80077e2:	89ab      	ldrh	r3, [r5, #12]
 80077e4:	059a      	lsls	r2, r3, #22
 80077e6:	d402      	bmi.n	80077ee <_vfiprintf_r+0x32>
 80077e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077ea:	f000 fba5 	bl	8007f38 <__retarget_lock_acquire_recursive>
 80077ee:	89ab      	ldrh	r3, [r5, #12]
 80077f0:	071b      	lsls	r3, r3, #28
 80077f2:	d501      	bpl.n	80077f8 <_vfiprintf_r+0x3c>
 80077f4:	692b      	ldr	r3, [r5, #16]
 80077f6:	b9eb      	cbnz	r3, 8007834 <_vfiprintf_r+0x78>
 80077f8:	4629      	mov	r1, r5
 80077fa:	4630      	mov	r0, r6
 80077fc:	f000 f96e 	bl	8007adc <__swsetup_r>
 8007800:	b1c0      	cbz	r0, 8007834 <_vfiprintf_r+0x78>
 8007802:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007804:	07dc      	lsls	r4, r3, #31
 8007806:	d50e      	bpl.n	8007826 <_vfiprintf_r+0x6a>
 8007808:	f04f 30ff 	mov.w	r0, #4294967295
 800780c:	b01d      	add	sp, #116	; 0x74
 800780e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007812:	4b7b      	ldr	r3, [pc, #492]	; (8007a00 <_vfiprintf_r+0x244>)
 8007814:	429d      	cmp	r5, r3
 8007816:	d101      	bne.n	800781c <_vfiprintf_r+0x60>
 8007818:	68b5      	ldr	r5, [r6, #8]
 800781a:	e7df      	b.n	80077dc <_vfiprintf_r+0x20>
 800781c:	4b79      	ldr	r3, [pc, #484]	; (8007a04 <_vfiprintf_r+0x248>)
 800781e:	429d      	cmp	r5, r3
 8007820:	bf08      	it	eq
 8007822:	68f5      	ldreq	r5, [r6, #12]
 8007824:	e7da      	b.n	80077dc <_vfiprintf_r+0x20>
 8007826:	89ab      	ldrh	r3, [r5, #12]
 8007828:	0598      	lsls	r0, r3, #22
 800782a:	d4ed      	bmi.n	8007808 <_vfiprintf_r+0x4c>
 800782c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800782e:	f000 fb84 	bl	8007f3a <__retarget_lock_release_recursive>
 8007832:	e7e9      	b.n	8007808 <_vfiprintf_r+0x4c>
 8007834:	2300      	movs	r3, #0
 8007836:	9309      	str	r3, [sp, #36]	; 0x24
 8007838:	2320      	movs	r3, #32
 800783a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800783e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007842:	2330      	movs	r3, #48	; 0x30
 8007844:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007a08 <_vfiprintf_r+0x24c>
 8007848:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800784c:	f04f 0901 	mov.w	r9, #1
 8007850:	4623      	mov	r3, r4
 8007852:	469a      	mov	sl, r3
 8007854:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007858:	b10a      	cbz	r2, 800785e <_vfiprintf_r+0xa2>
 800785a:	2a25      	cmp	r2, #37	; 0x25
 800785c:	d1f9      	bne.n	8007852 <_vfiprintf_r+0x96>
 800785e:	ebba 0b04 	subs.w	fp, sl, r4
 8007862:	d00b      	beq.n	800787c <_vfiprintf_r+0xc0>
 8007864:	465b      	mov	r3, fp
 8007866:	4622      	mov	r2, r4
 8007868:	4629      	mov	r1, r5
 800786a:	4630      	mov	r0, r6
 800786c:	f7ff ff93 	bl	8007796 <__sfputs_r>
 8007870:	3001      	adds	r0, #1
 8007872:	f000 80aa 	beq.w	80079ca <_vfiprintf_r+0x20e>
 8007876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007878:	445a      	add	r2, fp
 800787a:	9209      	str	r2, [sp, #36]	; 0x24
 800787c:	f89a 3000 	ldrb.w	r3, [sl]
 8007880:	2b00      	cmp	r3, #0
 8007882:	f000 80a2 	beq.w	80079ca <_vfiprintf_r+0x20e>
 8007886:	2300      	movs	r3, #0
 8007888:	f04f 32ff 	mov.w	r2, #4294967295
 800788c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007890:	f10a 0a01 	add.w	sl, sl, #1
 8007894:	9304      	str	r3, [sp, #16]
 8007896:	9307      	str	r3, [sp, #28]
 8007898:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800789c:	931a      	str	r3, [sp, #104]	; 0x68
 800789e:	4654      	mov	r4, sl
 80078a0:	2205      	movs	r2, #5
 80078a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078a6:	4858      	ldr	r0, [pc, #352]	; (8007a08 <_vfiprintf_r+0x24c>)
 80078a8:	f7f8 fc9a 	bl	80001e0 <memchr>
 80078ac:	9a04      	ldr	r2, [sp, #16]
 80078ae:	b9d8      	cbnz	r0, 80078e8 <_vfiprintf_r+0x12c>
 80078b0:	06d1      	lsls	r1, r2, #27
 80078b2:	bf44      	itt	mi
 80078b4:	2320      	movmi	r3, #32
 80078b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078ba:	0713      	lsls	r3, r2, #28
 80078bc:	bf44      	itt	mi
 80078be:	232b      	movmi	r3, #43	; 0x2b
 80078c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078c4:	f89a 3000 	ldrb.w	r3, [sl]
 80078c8:	2b2a      	cmp	r3, #42	; 0x2a
 80078ca:	d015      	beq.n	80078f8 <_vfiprintf_r+0x13c>
 80078cc:	9a07      	ldr	r2, [sp, #28]
 80078ce:	4654      	mov	r4, sl
 80078d0:	2000      	movs	r0, #0
 80078d2:	f04f 0c0a 	mov.w	ip, #10
 80078d6:	4621      	mov	r1, r4
 80078d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078dc:	3b30      	subs	r3, #48	; 0x30
 80078de:	2b09      	cmp	r3, #9
 80078e0:	d94e      	bls.n	8007980 <_vfiprintf_r+0x1c4>
 80078e2:	b1b0      	cbz	r0, 8007912 <_vfiprintf_r+0x156>
 80078e4:	9207      	str	r2, [sp, #28]
 80078e6:	e014      	b.n	8007912 <_vfiprintf_r+0x156>
 80078e8:	eba0 0308 	sub.w	r3, r0, r8
 80078ec:	fa09 f303 	lsl.w	r3, r9, r3
 80078f0:	4313      	orrs	r3, r2
 80078f2:	9304      	str	r3, [sp, #16]
 80078f4:	46a2      	mov	sl, r4
 80078f6:	e7d2      	b.n	800789e <_vfiprintf_r+0xe2>
 80078f8:	9b03      	ldr	r3, [sp, #12]
 80078fa:	1d19      	adds	r1, r3, #4
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	9103      	str	r1, [sp, #12]
 8007900:	2b00      	cmp	r3, #0
 8007902:	bfbb      	ittet	lt
 8007904:	425b      	neglt	r3, r3
 8007906:	f042 0202 	orrlt.w	r2, r2, #2
 800790a:	9307      	strge	r3, [sp, #28]
 800790c:	9307      	strlt	r3, [sp, #28]
 800790e:	bfb8      	it	lt
 8007910:	9204      	strlt	r2, [sp, #16]
 8007912:	7823      	ldrb	r3, [r4, #0]
 8007914:	2b2e      	cmp	r3, #46	; 0x2e
 8007916:	d10c      	bne.n	8007932 <_vfiprintf_r+0x176>
 8007918:	7863      	ldrb	r3, [r4, #1]
 800791a:	2b2a      	cmp	r3, #42	; 0x2a
 800791c:	d135      	bne.n	800798a <_vfiprintf_r+0x1ce>
 800791e:	9b03      	ldr	r3, [sp, #12]
 8007920:	1d1a      	adds	r2, r3, #4
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	9203      	str	r2, [sp, #12]
 8007926:	2b00      	cmp	r3, #0
 8007928:	bfb8      	it	lt
 800792a:	f04f 33ff 	movlt.w	r3, #4294967295
 800792e:	3402      	adds	r4, #2
 8007930:	9305      	str	r3, [sp, #20]
 8007932:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007a18 <_vfiprintf_r+0x25c>
 8007936:	7821      	ldrb	r1, [r4, #0]
 8007938:	2203      	movs	r2, #3
 800793a:	4650      	mov	r0, sl
 800793c:	f7f8 fc50 	bl	80001e0 <memchr>
 8007940:	b140      	cbz	r0, 8007954 <_vfiprintf_r+0x198>
 8007942:	2340      	movs	r3, #64	; 0x40
 8007944:	eba0 000a 	sub.w	r0, r0, sl
 8007948:	fa03 f000 	lsl.w	r0, r3, r0
 800794c:	9b04      	ldr	r3, [sp, #16]
 800794e:	4303      	orrs	r3, r0
 8007950:	3401      	adds	r4, #1
 8007952:	9304      	str	r3, [sp, #16]
 8007954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007958:	482c      	ldr	r0, [pc, #176]	; (8007a0c <_vfiprintf_r+0x250>)
 800795a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800795e:	2206      	movs	r2, #6
 8007960:	f7f8 fc3e 	bl	80001e0 <memchr>
 8007964:	2800      	cmp	r0, #0
 8007966:	d03f      	beq.n	80079e8 <_vfiprintf_r+0x22c>
 8007968:	4b29      	ldr	r3, [pc, #164]	; (8007a10 <_vfiprintf_r+0x254>)
 800796a:	bb1b      	cbnz	r3, 80079b4 <_vfiprintf_r+0x1f8>
 800796c:	9b03      	ldr	r3, [sp, #12]
 800796e:	3307      	adds	r3, #7
 8007970:	f023 0307 	bic.w	r3, r3, #7
 8007974:	3308      	adds	r3, #8
 8007976:	9303      	str	r3, [sp, #12]
 8007978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800797a:	443b      	add	r3, r7
 800797c:	9309      	str	r3, [sp, #36]	; 0x24
 800797e:	e767      	b.n	8007850 <_vfiprintf_r+0x94>
 8007980:	fb0c 3202 	mla	r2, ip, r2, r3
 8007984:	460c      	mov	r4, r1
 8007986:	2001      	movs	r0, #1
 8007988:	e7a5      	b.n	80078d6 <_vfiprintf_r+0x11a>
 800798a:	2300      	movs	r3, #0
 800798c:	3401      	adds	r4, #1
 800798e:	9305      	str	r3, [sp, #20]
 8007990:	4619      	mov	r1, r3
 8007992:	f04f 0c0a 	mov.w	ip, #10
 8007996:	4620      	mov	r0, r4
 8007998:	f810 2b01 	ldrb.w	r2, [r0], #1
 800799c:	3a30      	subs	r2, #48	; 0x30
 800799e:	2a09      	cmp	r2, #9
 80079a0:	d903      	bls.n	80079aa <_vfiprintf_r+0x1ee>
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d0c5      	beq.n	8007932 <_vfiprintf_r+0x176>
 80079a6:	9105      	str	r1, [sp, #20]
 80079a8:	e7c3      	b.n	8007932 <_vfiprintf_r+0x176>
 80079aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80079ae:	4604      	mov	r4, r0
 80079b0:	2301      	movs	r3, #1
 80079b2:	e7f0      	b.n	8007996 <_vfiprintf_r+0x1da>
 80079b4:	ab03      	add	r3, sp, #12
 80079b6:	9300      	str	r3, [sp, #0]
 80079b8:	462a      	mov	r2, r5
 80079ba:	4b16      	ldr	r3, [pc, #88]	; (8007a14 <_vfiprintf_r+0x258>)
 80079bc:	a904      	add	r1, sp, #16
 80079be:	4630      	mov	r0, r6
 80079c0:	f7fd ffe0 	bl	8005984 <_printf_float>
 80079c4:	4607      	mov	r7, r0
 80079c6:	1c78      	adds	r0, r7, #1
 80079c8:	d1d6      	bne.n	8007978 <_vfiprintf_r+0x1bc>
 80079ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079cc:	07d9      	lsls	r1, r3, #31
 80079ce:	d405      	bmi.n	80079dc <_vfiprintf_r+0x220>
 80079d0:	89ab      	ldrh	r3, [r5, #12]
 80079d2:	059a      	lsls	r2, r3, #22
 80079d4:	d402      	bmi.n	80079dc <_vfiprintf_r+0x220>
 80079d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079d8:	f000 faaf 	bl	8007f3a <__retarget_lock_release_recursive>
 80079dc:	89ab      	ldrh	r3, [r5, #12]
 80079de:	065b      	lsls	r3, r3, #25
 80079e0:	f53f af12 	bmi.w	8007808 <_vfiprintf_r+0x4c>
 80079e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079e6:	e711      	b.n	800780c <_vfiprintf_r+0x50>
 80079e8:	ab03      	add	r3, sp, #12
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	462a      	mov	r2, r5
 80079ee:	4b09      	ldr	r3, [pc, #36]	; (8007a14 <_vfiprintf_r+0x258>)
 80079f0:	a904      	add	r1, sp, #16
 80079f2:	4630      	mov	r0, r6
 80079f4:	f7fe fa6a 	bl	8005ecc <_printf_i>
 80079f8:	e7e4      	b.n	80079c4 <_vfiprintf_r+0x208>
 80079fa:	bf00      	nop
 80079fc:	08009204 	.word	0x08009204
 8007a00:	08009224 	.word	0x08009224
 8007a04:	080091e4 	.word	0x080091e4
 8007a08:	080090d2 	.word	0x080090d2
 8007a0c:	080090dc 	.word	0x080090dc
 8007a10:	08005985 	.word	0x08005985
 8007a14:	08007797 	.word	0x08007797
 8007a18:	080090d8 	.word	0x080090d8

08007a1c <__swbuf_r>:
 8007a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1e:	460e      	mov	r6, r1
 8007a20:	4614      	mov	r4, r2
 8007a22:	4605      	mov	r5, r0
 8007a24:	b118      	cbz	r0, 8007a2e <__swbuf_r+0x12>
 8007a26:	6983      	ldr	r3, [r0, #24]
 8007a28:	b90b      	cbnz	r3, 8007a2e <__swbuf_r+0x12>
 8007a2a:	f000 f9e7 	bl	8007dfc <__sinit>
 8007a2e:	4b21      	ldr	r3, [pc, #132]	; (8007ab4 <__swbuf_r+0x98>)
 8007a30:	429c      	cmp	r4, r3
 8007a32:	d12b      	bne.n	8007a8c <__swbuf_r+0x70>
 8007a34:	686c      	ldr	r4, [r5, #4]
 8007a36:	69a3      	ldr	r3, [r4, #24]
 8007a38:	60a3      	str	r3, [r4, #8]
 8007a3a:	89a3      	ldrh	r3, [r4, #12]
 8007a3c:	071a      	lsls	r2, r3, #28
 8007a3e:	d52f      	bpl.n	8007aa0 <__swbuf_r+0x84>
 8007a40:	6923      	ldr	r3, [r4, #16]
 8007a42:	b36b      	cbz	r3, 8007aa0 <__swbuf_r+0x84>
 8007a44:	6923      	ldr	r3, [r4, #16]
 8007a46:	6820      	ldr	r0, [r4, #0]
 8007a48:	1ac0      	subs	r0, r0, r3
 8007a4a:	6963      	ldr	r3, [r4, #20]
 8007a4c:	b2f6      	uxtb	r6, r6
 8007a4e:	4283      	cmp	r3, r0
 8007a50:	4637      	mov	r7, r6
 8007a52:	dc04      	bgt.n	8007a5e <__swbuf_r+0x42>
 8007a54:	4621      	mov	r1, r4
 8007a56:	4628      	mov	r0, r5
 8007a58:	f000 f93c 	bl	8007cd4 <_fflush_r>
 8007a5c:	bb30      	cbnz	r0, 8007aac <__swbuf_r+0x90>
 8007a5e:	68a3      	ldr	r3, [r4, #8]
 8007a60:	3b01      	subs	r3, #1
 8007a62:	60a3      	str	r3, [r4, #8]
 8007a64:	6823      	ldr	r3, [r4, #0]
 8007a66:	1c5a      	adds	r2, r3, #1
 8007a68:	6022      	str	r2, [r4, #0]
 8007a6a:	701e      	strb	r6, [r3, #0]
 8007a6c:	6963      	ldr	r3, [r4, #20]
 8007a6e:	3001      	adds	r0, #1
 8007a70:	4283      	cmp	r3, r0
 8007a72:	d004      	beq.n	8007a7e <__swbuf_r+0x62>
 8007a74:	89a3      	ldrh	r3, [r4, #12]
 8007a76:	07db      	lsls	r3, r3, #31
 8007a78:	d506      	bpl.n	8007a88 <__swbuf_r+0x6c>
 8007a7a:	2e0a      	cmp	r6, #10
 8007a7c:	d104      	bne.n	8007a88 <__swbuf_r+0x6c>
 8007a7e:	4621      	mov	r1, r4
 8007a80:	4628      	mov	r0, r5
 8007a82:	f000 f927 	bl	8007cd4 <_fflush_r>
 8007a86:	b988      	cbnz	r0, 8007aac <__swbuf_r+0x90>
 8007a88:	4638      	mov	r0, r7
 8007a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a8c:	4b0a      	ldr	r3, [pc, #40]	; (8007ab8 <__swbuf_r+0x9c>)
 8007a8e:	429c      	cmp	r4, r3
 8007a90:	d101      	bne.n	8007a96 <__swbuf_r+0x7a>
 8007a92:	68ac      	ldr	r4, [r5, #8]
 8007a94:	e7cf      	b.n	8007a36 <__swbuf_r+0x1a>
 8007a96:	4b09      	ldr	r3, [pc, #36]	; (8007abc <__swbuf_r+0xa0>)
 8007a98:	429c      	cmp	r4, r3
 8007a9a:	bf08      	it	eq
 8007a9c:	68ec      	ldreq	r4, [r5, #12]
 8007a9e:	e7ca      	b.n	8007a36 <__swbuf_r+0x1a>
 8007aa0:	4621      	mov	r1, r4
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	f000 f81a 	bl	8007adc <__swsetup_r>
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	d0cb      	beq.n	8007a44 <__swbuf_r+0x28>
 8007aac:	f04f 37ff 	mov.w	r7, #4294967295
 8007ab0:	e7ea      	b.n	8007a88 <__swbuf_r+0x6c>
 8007ab2:	bf00      	nop
 8007ab4:	08009204 	.word	0x08009204
 8007ab8:	08009224 	.word	0x08009224
 8007abc:	080091e4 	.word	0x080091e4

08007ac0 <__ascii_wctomb>:
 8007ac0:	b149      	cbz	r1, 8007ad6 <__ascii_wctomb+0x16>
 8007ac2:	2aff      	cmp	r2, #255	; 0xff
 8007ac4:	bf85      	ittet	hi
 8007ac6:	238a      	movhi	r3, #138	; 0x8a
 8007ac8:	6003      	strhi	r3, [r0, #0]
 8007aca:	700a      	strbls	r2, [r1, #0]
 8007acc:	f04f 30ff 	movhi.w	r0, #4294967295
 8007ad0:	bf98      	it	ls
 8007ad2:	2001      	movls	r0, #1
 8007ad4:	4770      	bx	lr
 8007ad6:	4608      	mov	r0, r1
 8007ad8:	4770      	bx	lr
	...

08007adc <__swsetup_r>:
 8007adc:	4b32      	ldr	r3, [pc, #200]	; (8007ba8 <__swsetup_r+0xcc>)
 8007ade:	b570      	push	{r4, r5, r6, lr}
 8007ae0:	681d      	ldr	r5, [r3, #0]
 8007ae2:	4606      	mov	r6, r0
 8007ae4:	460c      	mov	r4, r1
 8007ae6:	b125      	cbz	r5, 8007af2 <__swsetup_r+0x16>
 8007ae8:	69ab      	ldr	r3, [r5, #24]
 8007aea:	b913      	cbnz	r3, 8007af2 <__swsetup_r+0x16>
 8007aec:	4628      	mov	r0, r5
 8007aee:	f000 f985 	bl	8007dfc <__sinit>
 8007af2:	4b2e      	ldr	r3, [pc, #184]	; (8007bac <__swsetup_r+0xd0>)
 8007af4:	429c      	cmp	r4, r3
 8007af6:	d10f      	bne.n	8007b18 <__swsetup_r+0x3c>
 8007af8:	686c      	ldr	r4, [r5, #4]
 8007afa:	89a3      	ldrh	r3, [r4, #12]
 8007afc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b00:	0719      	lsls	r1, r3, #28
 8007b02:	d42c      	bmi.n	8007b5e <__swsetup_r+0x82>
 8007b04:	06dd      	lsls	r5, r3, #27
 8007b06:	d411      	bmi.n	8007b2c <__swsetup_r+0x50>
 8007b08:	2309      	movs	r3, #9
 8007b0a:	6033      	str	r3, [r6, #0]
 8007b0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b10:	81a3      	strh	r3, [r4, #12]
 8007b12:	f04f 30ff 	mov.w	r0, #4294967295
 8007b16:	e03e      	b.n	8007b96 <__swsetup_r+0xba>
 8007b18:	4b25      	ldr	r3, [pc, #148]	; (8007bb0 <__swsetup_r+0xd4>)
 8007b1a:	429c      	cmp	r4, r3
 8007b1c:	d101      	bne.n	8007b22 <__swsetup_r+0x46>
 8007b1e:	68ac      	ldr	r4, [r5, #8]
 8007b20:	e7eb      	b.n	8007afa <__swsetup_r+0x1e>
 8007b22:	4b24      	ldr	r3, [pc, #144]	; (8007bb4 <__swsetup_r+0xd8>)
 8007b24:	429c      	cmp	r4, r3
 8007b26:	bf08      	it	eq
 8007b28:	68ec      	ldreq	r4, [r5, #12]
 8007b2a:	e7e6      	b.n	8007afa <__swsetup_r+0x1e>
 8007b2c:	0758      	lsls	r0, r3, #29
 8007b2e:	d512      	bpl.n	8007b56 <__swsetup_r+0x7a>
 8007b30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b32:	b141      	cbz	r1, 8007b46 <__swsetup_r+0x6a>
 8007b34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b38:	4299      	cmp	r1, r3
 8007b3a:	d002      	beq.n	8007b42 <__swsetup_r+0x66>
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	f7ff fd0b 	bl	8007558 <_free_r>
 8007b42:	2300      	movs	r3, #0
 8007b44:	6363      	str	r3, [r4, #52]	; 0x34
 8007b46:	89a3      	ldrh	r3, [r4, #12]
 8007b48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b4c:	81a3      	strh	r3, [r4, #12]
 8007b4e:	2300      	movs	r3, #0
 8007b50:	6063      	str	r3, [r4, #4]
 8007b52:	6923      	ldr	r3, [r4, #16]
 8007b54:	6023      	str	r3, [r4, #0]
 8007b56:	89a3      	ldrh	r3, [r4, #12]
 8007b58:	f043 0308 	orr.w	r3, r3, #8
 8007b5c:	81a3      	strh	r3, [r4, #12]
 8007b5e:	6923      	ldr	r3, [r4, #16]
 8007b60:	b94b      	cbnz	r3, 8007b76 <__swsetup_r+0x9a>
 8007b62:	89a3      	ldrh	r3, [r4, #12]
 8007b64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b6c:	d003      	beq.n	8007b76 <__swsetup_r+0x9a>
 8007b6e:	4621      	mov	r1, r4
 8007b70:	4630      	mov	r0, r6
 8007b72:	f000 fa07 	bl	8007f84 <__smakebuf_r>
 8007b76:	89a0      	ldrh	r0, [r4, #12]
 8007b78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b7c:	f010 0301 	ands.w	r3, r0, #1
 8007b80:	d00a      	beq.n	8007b98 <__swsetup_r+0xbc>
 8007b82:	2300      	movs	r3, #0
 8007b84:	60a3      	str	r3, [r4, #8]
 8007b86:	6963      	ldr	r3, [r4, #20]
 8007b88:	425b      	negs	r3, r3
 8007b8a:	61a3      	str	r3, [r4, #24]
 8007b8c:	6923      	ldr	r3, [r4, #16]
 8007b8e:	b943      	cbnz	r3, 8007ba2 <__swsetup_r+0xc6>
 8007b90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b94:	d1ba      	bne.n	8007b0c <__swsetup_r+0x30>
 8007b96:	bd70      	pop	{r4, r5, r6, pc}
 8007b98:	0781      	lsls	r1, r0, #30
 8007b9a:	bf58      	it	pl
 8007b9c:	6963      	ldrpl	r3, [r4, #20]
 8007b9e:	60a3      	str	r3, [r4, #8]
 8007ba0:	e7f4      	b.n	8007b8c <__swsetup_r+0xb0>
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	e7f7      	b.n	8007b96 <__swsetup_r+0xba>
 8007ba6:	bf00      	nop
 8007ba8:	2000000c 	.word	0x2000000c
 8007bac:	08009204 	.word	0x08009204
 8007bb0:	08009224 	.word	0x08009224
 8007bb4:	080091e4 	.word	0x080091e4

08007bb8 <abort>:
 8007bb8:	b508      	push	{r3, lr}
 8007bba:	2006      	movs	r0, #6
 8007bbc:	f000 fa4a 	bl	8008054 <raise>
 8007bc0:	2001      	movs	r0, #1
 8007bc2:	f7f9 fe7b 	bl	80018bc <_exit>
	...

08007bc8 <__sflush_r>:
 8007bc8:	898a      	ldrh	r2, [r1, #12]
 8007bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bce:	4605      	mov	r5, r0
 8007bd0:	0710      	lsls	r0, r2, #28
 8007bd2:	460c      	mov	r4, r1
 8007bd4:	d458      	bmi.n	8007c88 <__sflush_r+0xc0>
 8007bd6:	684b      	ldr	r3, [r1, #4]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	dc05      	bgt.n	8007be8 <__sflush_r+0x20>
 8007bdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	dc02      	bgt.n	8007be8 <__sflush_r+0x20>
 8007be2:	2000      	movs	r0, #0
 8007be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007be8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bea:	2e00      	cmp	r6, #0
 8007bec:	d0f9      	beq.n	8007be2 <__sflush_r+0x1a>
 8007bee:	2300      	movs	r3, #0
 8007bf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007bf4:	682f      	ldr	r7, [r5, #0]
 8007bf6:	602b      	str	r3, [r5, #0]
 8007bf8:	d032      	beq.n	8007c60 <__sflush_r+0x98>
 8007bfa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007bfc:	89a3      	ldrh	r3, [r4, #12]
 8007bfe:	075a      	lsls	r2, r3, #29
 8007c00:	d505      	bpl.n	8007c0e <__sflush_r+0x46>
 8007c02:	6863      	ldr	r3, [r4, #4]
 8007c04:	1ac0      	subs	r0, r0, r3
 8007c06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c08:	b10b      	cbz	r3, 8007c0e <__sflush_r+0x46>
 8007c0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c0c:	1ac0      	subs	r0, r0, r3
 8007c0e:	2300      	movs	r3, #0
 8007c10:	4602      	mov	r2, r0
 8007c12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c14:	6a21      	ldr	r1, [r4, #32]
 8007c16:	4628      	mov	r0, r5
 8007c18:	47b0      	blx	r6
 8007c1a:	1c43      	adds	r3, r0, #1
 8007c1c:	89a3      	ldrh	r3, [r4, #12]
 8007c1e:	d106      	bne.n	8007c2e <__sflush_r+0x66>
 8007c20:	6829      	ldr	r1, [r5, #0]
 8007c22:	291d      	cmp	r1, #29
 8007c24:	d82c      	bhi.n	8007c80 <__sflush_r+0xb8>
 8007c26:	4a2a      	ldr	r2, [pc, #168]	; (8007cd0 <__sflush_r+0x108>)
 8007c28:	40ca      	lsrs	r2, r1
 8007c2a:	07d6      	lsls	r6, r2, #31
 8007c2c:	d528      	bpl.n	8007c80 <__sflush_r+0xb8>
 8007c2e:	2200      	movs	r2, #0
 8007c30:	6062      	str	r2, [r4, #4]
 8007c32:	04d9      	lsls	r1, r3, #19
 8007c34:	6922      	ldr	r2, [r4, #16]
 8007c36:	6022      	str	r2, [r4, #0]
 8007c38:	d504      	bpl.n	8007c44 <__sflush_r+0x7c>
 8007c3a:	1c42      	adds	r2, r0, #1
 8007c3c:	d101      	bne.n	8007c42 <__sflush_r+0x7a>
 8007c3e:	682b      	ldr	r3, [r5, #0]
 8007c40:	b903      	cbnz	r3, 8007c44 <__sflush_r+0x7c>
 8007c42:	6560      	str	r0, [r4, #84]	; 0x54
 8007c44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c46:	602f      	str	r7, [r5, #0]
 8007c48:	2900      	cmp	r1, #0
 8007c4a:	d0ca      	beq.n	8007be2 <__sflush_r+0x1a>
 8007c4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c50:	4299      	cmp	r1, r3
 8007c52:	d002      	beq.n	8007c5a <__sflush_r+0x92>
 8007c54:	4628      	mov	r0, r5
 8007c56:	f7ff fc7f 	bl	8007558 <_free_r>
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	6360      	str	r0, [r4, #52]	; 0x34
 8007c5e:	e7c1      	b.n	8007be4 <__sflush_r+0x1c>
 8007c60:	6a21      	ldr	r1, [r4, #32]
 8007c62:	2301      	movs	r3, #1
 8007c64:	4628      	mov	r0, r5
 8007c66:	47b0      	blx	r6
 8007c68:	1c41      	adds	r1, r0, #1
 8007c6a:	d1c7      	bne.n	8007bfc <__sflush_r+0x34>
 8007c6c:	682b      	ldr	r3, [r5, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d0c4      	beq.n	8007bfc <__sflush_r+0x34>
 8007c72:	2b1d      	cmp	r3, #29
 8007c74:	d001      	beq.n	8007c7a <__sflush_r+0xb2>
 8007c76:	2b16      	cmp	r3, #22
 8007c78:	d101      	bne.n	8007c7e <__sflush_r+0xb6>
 8007c7a:	602f      	str	r7, [r5, #0]
 8007c7c:	e7b1      	b.n	8007be2 <__sflush_r+0x1a>
 8007c7e:	89a3      	ldrh	r3, [r4, #12]
 8007c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c84:	81a3      	strh	r3, [r4, #12]
 8007c86:	e7ad      	b.n	8007be4 <__sflush_r+0x1c>
 8007c88:	690f      	ldr	r7, [r1, #16]
 8007c8a:	2f00      	cmp	r7, #0
 8007c8c:	d0a9      	beq.n	8007be2 <__sflush_r+0x1a>
 8007c8e:	0793      	lsls	r3, r2, #30
 8007c90:	680e      	ldr	r6, [r1, #0]
 8007c92:	bf08      	it	eq
 8007c94:	694b      	ldreq	r3, [r1, #20]
 8007c96:	600f      	str	r7, [r1, #0]
 8007c98:	bf18      	it	ne
 8007c9a:	2300      	movne	r3, #0
 8007c9c:	eba6 0807 	sub.w	r8, r6, r7
 8007ca0:	608b      	str	r3, [r1, #8]
 8007ca2:	f1b8 0f00 	cmp.w	r8, #0
 8007ca6:	dd9c      	ble.n	8007be2 <__sflush_r+0x1a>
 8007ca8:	6a21      	ldr	r1, [r4, #32]
 8007caa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007cac:	4643      	mov	r3, r8
 8007cae:	463a      	mov	r2, r7
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	47b0      	blx	r6
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	dc06      	bgt.n	8007cc6 <__sflush_r+0xfe>
 8007cb8:	89a3      	ldrh	r3, [r4, #12]
 8007cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cbe:	81a3      	strh	r3, [r4, #12]
 8007cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc4:	e78e      	b.n	8007be4 <__sflush_r+0x1c>
 8007cc6:	4407      	add	r7, r0
 8007cc8:	eba8 0800 	sub.w	r8, r8, r0
 8007ccc:	e7e9      	b.n	8007ca2 <__sflush_r+0xda>
 8007cce:	bf00      	nop
 8007cd0:	20400001 	.word	0x20400001

08007cd4 <_fflush_r>:
 8007cd4:	b538      	push	{r3, r4, r5, lr}
 8007cd6:	690b      	ldr	r3, [r1, #16]
 8007cd8:	4605      	mov	r5, r0
 8007cda:	460c      	mov	r4, r1
 8007cdc:	b913      	cbnz	r3, 8007ce4 <_fflush_r+0x10>
 8007cde:	2500      	movs	r5, #0
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	bd38      	pop	{r3, r4, r5, pc}
 8007ce4:	b118      	cbz	r0, 8007cee <_fflush_r+0x1a>
 8007ce6:	6983      	ldr	r3, [r0, #24]
 8007ce8:	b90b      	cbnz	r3, 8007cee <_fflush_r+0x1a>
 8007cea:	f000 f887 	bl	8007dfc <__sinit>
 8007cee:	4b14      	ldr	r3, [pc, #80]	; (8007d40 <_fflush_r+0x6c>)
 8007cf0:	429c      	cmp	r4, r3
 8007cf2:	d11b      	bne.n	8007d2c <_fflush_r+0x58>
 8007cf4:	686c      	ldr	r4, [r5, #4]
 8007cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d0ef      	beq.n	8007cde <_fflush_r+0xa>
 8007cfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d00:	07d0      	lsls	r0, r2, #31
 8007d02:	d404      	bmi.n	8007d0e <_fflush_r+0x3a>
 8007d04:	0599      	lsls	r1, r3, #22
 8007d06:	d402      	bmi.n	8007d0e <_fflush_r+0x3a>
 8007d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d0a:	f000 f915 	bl	8007f38 <__retarget_lock_acquire_recursive>
 8007d0e:	4628      	mov	r0, r5
 8007d10:	4621      	mov	r1, r4
 8007d12:	f7ff ff59 	bl	8007bc8 <__sflush_r>
 8007d16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d18:	07da      	lsls	r2, r3, #31
 8007d1a:	4605      	mov	r5, r0
 8007d1c:	d4e0      	bmi.n	8007ce0 <_fflush_r+0xc>
 8007d1e:	89a3      	ldrh	r3, [r4, #12]
 8007d20:	059b      	lsls	r3, r3, #22
 8007d22:	d4dd      	bmi.n	8007ce0 <_fflush_r+0xc>
 8007d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d26:	f000 f908 	bl	8007f3a <__retarget_lock_release_recursive>
 8007d2a:	e7d9      	b.n	8007ce0 <_fflush_r+0xc>
 8007d2c:	4b05      	ldr	r3, [pc, #20]	; (8007d44 <_fflush_r+0x70>)
 8007d2e:	429c      	cmp	r4, r3
 8007d30:	d101      	bne.n	8007d36 <_fflush_r+0x62>
 8007d32:	68ac      	ldr	r4, [r5, #8]
 8007d34:	e7df      	b.n	8007cf6 <_fflush_r+0x22>
 8007d36:	4b04      	ldr	r3, [pc, #16]	; (8007d48 <_fflush_r+0x74>)
 8007d38:	429c      	cmp	r4, r3
 8007d3a:	bf08      	it	eq
 8007d3c:	68ec      	ldreq	r4, [r5, #12]
 8007d3e:	e7da      	b.n	8007cf6 <_fflush_r+0x22>
 8007d40:	08009204 	.word	0x08009204
 8007d44:	08009224 	.word	0x08009224
 8007d48:	080091e4 	.word	0x080091e4

08007d4c <std>:
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	b510      	push	{r4, lr}
 8007d50:	4604      	mov	r4, r0
 8007d52:	e9c0 3300 	strd	r3, r3, [r0]
 8007d56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d5a:	6083      	str	r3, [r0, #8]
 8007d5c:	8181      	strh	r1, [r0, #12]
 8007d5e:	6643      	str	r3, [r0, #100]	; 0x64
 8007d60:	81c2      	strh	r2, [r0, #14]
 8007d62:	6183      	str	r3, [r0, #24]
 8007d64:	4619      	mov	r1, r3
 8007d66:	2208      	movs	r2, #8
 8007d68:	305c      	adds	r0, #92	; 0x5c
 8007d6a:	f7fd fd63 	bl	8005834 <memset>
 8007d6e:	4b05      	ldr	r3, [pc, #20]	; (8007d84 <std+0x38>)
 8007d70:	6263      	str	r3, [r4, #36]	; 0x24
 8007d72:	4b05      	ldr	r3, [pc, #20]	; (8007d88 <std+0x3c>)
 8007d74:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d76:	4b05      	ldr	r3, [pc, #20]	; (8007d8c <std+0x40>)
 8007d78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d7a:	4b05      	ldr	r3, [pc, #20]	; (8007d90 <std+0x44>)
 8007d7c:	6224      	str	r4, [r4, #32]
 8007d7e:	6323      	str	r3, [r4, #48]	; 0x30
 8007d80:	bd10      	pop	{r4, pc}
 8007d82:	bf00      	nop
 8007d84:	0800808d 	.word	0x0800808d
 8007d88:	080080af 	.word	0x080080af
 8007d8c:	080080e7 	.word	0x080080e7
 8007d90:	0800810b 	.word	0x0800810b

08007d94 <_cleanup_r>:
 8007d94:	4901      	ldr	r1, [pc, #4]	; (8007d9c <_cleanup_r+0x8>)
 8007d96:	f000 b8af 	b.w	8007ef8 <_fwalk_reent>
 8007d9a:	bf00      	nop
 8007d9c:	08007cd5 	.word	0x08007cd5

08007da0 <__sfmoreglue>:
 8007da0:	b570      	push	{r4, r5, r6, lr}
 8007da2:	1e4a      	subs	r2, r1, #1
 8007da4:	2568      	movs	r5, #104	; 0x68
 8007da6:	4355      	muls	r5, r2
 8007da8:	460e      	mov	r6, r1
 8007daa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007dae:	f7ff fc23 	bl	80075f8 <_malloc_r>
 8007db2:	4604      	mov	r4, r0
 8007db4:	b140      	cbz	r0, 8007dc8 <__sfmoreglue+0x28>
 8007db6:	2100      	movs	r1, #0
 8007db8:	e9c0 1600 	strd	r1, r6, [r0]
 8007dbc:	300c      	adds	r0, #12
 8007dbe:	60a0      	str	r0, [r4, #8]
 8007dc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007dc4:	f7fd fd36 	bl	8005834 <memset>
 8007dc8:	4620      	mov	r0, r4
 8007dca:	bd70      	pop	{r4, r5, r6, pc}

08007dcc <__sfp_lock_acquire>:
 8007dcc:	4801      	ldr	r0, [pc, #4]	; (8007dd4 <__sfp_lock_acquire+0x8>)
 8007dce:	f000 b8b3 	b.w	8007f38 <__retarget_lock_acquire_recursive>
 8007dd2:	bf00      	nop
 8007dd4:	200002b8 	.word	0x200002b8

08007dd8 <__sfp_lock_release>:
 8007dd8:	4801      	ldr	r0, [pc, #4]	; (8007de0 <__sfp_lock_release+0x8>)
 8007dda:	f000 b8ae 	b.w	8007f3a <__retarget_lock_release_recursive>
 8007dde:	bf00      	nop
 8007de0:	200002b8 	.word	0x200002b8

08007de4 <__sinit_lock_acquire>:
 8007de4:	4801      	ldr	r0, [pc, #4]	; (8007dec <__sinit_lock_acquire+0x8>)
 8007de6:	f000 b8a7 	b.w	8007f38 <__retarget_lock_acquire_recursive>
 8007dea:	bf00      	nop
 8007dec:	200002b3 	.word	0x200002b3

08007df0 <__sinit_lock_release>:
 8007df0:	4801      	ldr	r0, [pc, #4]	; (8007df8 <__sinit_lock_release+0x8>)
 8007df2:	f000 b8a2 	b.w	8007f3a <__retarget_lock_release_recursive>
 8007df6:	bf00      	nop
 8007df8:	200002b3 	.word	0x200002b3

08007dfc <__sinit>:
 8007dfc:	b510      	push	{r4, lr}
 8007dfe:	4604      	mov	r4, r0
 8007e00:	f7ff fff0 	bl	8007de4 <__sinit_lock_acquire>
 8007e04:	69a3      	ldr	r3, [r4, #24]
 8007e06:	b11b      	cbz	r3, 8007e10 <__sinit+0x14>
 8007e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e0c:	f7ff bff0 	b.w	8007df0 <__sinit_lock_release>
 8007e10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e14:	6523      	str	r3, [r4, #80]	; 0x50
 8007e16:	4b13      	ldr	r3, [pc, #76]	; (8007e64 <__sinit+0x68>)
 8007e18:	4a13      	ldr	r2, [pc, #76]	; (8007e68 <__sinit+0x6c>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e1e:	42a3      	cmp	r3, r4
 8007e20:	bf04      	itt	eq
 8007e22:	2301      	moveq	r3, #1
 8007e24:	61a3      	streq	r3, [r4, #24]
 8007e26:	4620      	mov	r0, r4
 8007e28:	f000 f820 	bl	8007e6c <__sfp>
 8007e2c:	6060      	str	r0, [r4, #4]
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f000 f81c 	bl	8007e6c <__sfp>
 8007e34:	60a0      	str	r0, [r4, #8]
 8007e36:	4620      	mov	r0, r4
 8007e38:	f000 f818 	bl	8007e6c <__sfp>
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	60e0      	str	r0, [r4, #12]
 8007e40:	2104      	movs	r1, #4
 8007e42:	6860      	ldr	r0, [r4, #4]
 8007e44:	f7ff ff82 	bl	8007d4c <std>
 8007e48:	68a0      	ldr	r0, [r4, #8]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	2109      	movs	r1, #9
 8007e4e:	f7ff ff7d 	bl	8007d4c <std>
 8007e52:	68e0      	ldr	r0, [r4, #12]
 8007e54:	2202      	movs	r2, #2
 8007e56:	2112      	movs	r1, #18
 8007e58:	f7ff ff78 	bl	8007d4c <std>
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	61a3      	str	r3, [r4, #24]
 8007e60:	e7d2      	b.n	8007e08 <__sinit+0xc>
 8007e62:	bf00      	nop
 8007e64:	08008e60 	.word	0x08008e60
 8007e68:	08007d95 	.word	0x08007d95

08007e6c <__sfp>:
 8007e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6e:	4607      	mov	r7, r0
 8007e70:	f7ff ffac 	bl	8007dcc <__sfp_lock_acquire>
 8007e74:	4b1e      	ldr	r3, [pc, #120]	; (8007ef0 <__sfp+0x84>)
 8007e76:	681e      	ldr	r6, [r3, #0]
 8007e78:	69b3      	ldr	r3, [r6, #24]
 8007e7a:	b913      	cbnz	r3, 8007e82 <__sfp+0x16>
 8007e7c:	4630      	mov	r0, r6
 8007e7e:	f7ff ffbd 	bl	8007dfc <__sinit>
 8007e82:	3648      	adds	r6, #72	; 0x48
 8007e84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	d503      	bpl.n	8007e94 <__sfp+0x28>
 8007e8c:	6833      	ldr	r3, [r6, #0]
 8007e8e:	b30b      	cbz	r3, 8007ed4 <__sfp+0x68>
 8007e90:	6836      	ldr	r6, [r6, #0]
 8007e92:	e7f7      	b.n	8007e84 <__sfp+0x18>
 8007e94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e98:	b9d5      	cbnz	r5, 8007ed0 <__sfp+0x64>
 8007e9a:	4b16      	ldr	r3, [pc, #88]	; (8007ef4 <__sfp+0x88>)
 8007e9c:	60e3      	str	r3, [r4, #12]
 8007e9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ea2:	6665      	str	r5, [r4, #100]	; 0x64
 8007ea4:	f000 f847 	bl	8007f36 <__retarget_lock_init_recursive>
 8007ea8:	f7ff ff96 	bl	8007dd8 <__sfp_lock_release>
 8007eac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007eb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007eb4:	6025      	str	r5, [r4, #0]
 8007eb6:	61a5      	str	r5, [r4, #24]
 8007eb8:	2208      	movs	r2, #8
 8007eba:	4629      	mov	r1, r5
 8007ebc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ec0:	f7fd fcb8 	bl	8005834 <memset>
 8007ec4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ec8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ecc:	4620      	mov	r0, r4
 8007ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ed0:	3468      	adds	r4, #104	; 0x68
 8007ed2:	e7d9      	b.n	8007e88 <__sfp+0x1c>
 8007ed4:	2104      	movs	r1, #4
 8007ed6:	4638      	mov	r0, r7
 8007ed8:	f7ff ff62 	bl	8007da0 <__sfmoreglue>
 8007edc:	4604      	mov	r4, r0
 8007ede:	6030      	str	r0, [r6, #0]
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	d1d5      	bne.n	8007e90 <__sfp+0x24>
 8007ee4:	f7ff ff78 	bl	8007dd8 <__sfp_lock_release>
 8007ee8:	230c      	movs	r3, #12
 8007eea:	603b      	str	r3, [r7, #0]
 8007eec:	e7ee      	b.n	8007ecc <__sfp+0x60>
 8007eee:	bf00      	nop
 8007ef0:	08008e60 	.word	0x08008e60
 8007ef4:	ffff0001 	.word	0xffff0001

08007ef8 <_fwalk_reent>:
 8007ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007efc:	4606      	mov	r6, r0
 8007efe:	4688      	mov	r8, r1
 8007f00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f04:	2700      	movs	r7, #0
 8007f06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f0a:	f1b9 0901 	subs.w	r9, r9, #1
 8007f0e:	d505      	bpl.n	8007f1c <_fwalk_reent+0x24>
 8007f10:	6824      	ldr	r4, [r4, #0]
 8007f12:	2c00      	cmp	r4, #0
 8007f14:	d1f7      	bne.n	8007f06 <_fwalk_reent+0xe>
 8007f16:	4638      	mov	r0, r7
 8007f18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f1c:	89ab      	ldrh	r3, [r5, #12]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d907      	bls.n	8007f32 <_fwalk_reent+0x3a>
 8007f22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f26:	3301      	adds	r3, #1
 8007f28:	d003      	beq.n	8007f32 <_fwalk_reent+0x3a>
 8007f2a:	4629      	mov	r1, r5
 8007f2c:	4630      	mov	r0, r6
 8007f2e:	47c0      	blx	r8
 8007f30:	4307      	orrs	r7, r0
 8007f32:	3568      	adds	r5, #104	; 0x68
 8007f34:	e7e9      	b.n	8007f0a <_fwalk_reent+0x12>

08007f36 <__retarget_lock_init_recursive>:
 8007f36:	4770      	bx	lr

08007f38 <__retarget_lock_acquire_recursive>:
 8007f38:	4770      	bx	lr

08007f3a <__retarget_lock_release_recursive>:
 8007f3a:	4770      	bx	lr

08007f3c <__swhatbuf_r>:
 8007f3c:	b570      	push	{r4, r5, r6, lr}
 8007f3e:	460e      	mov	r6, r1
 8007f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f44:	2900      	cmp	r1, #0
 8007f46:	b096      	sub	sp, #88	; 0x58
 8007f48:	4614      	mov	r4, r2
 8007f4a:	461d      	mov	r5, r3
 8007f4c:	da07      	bge.n	8007f5e <__swhatbuf_r+0x22>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	602b      	str	r3, [r5, #0]
 8007f52:	89b3      	ldrh	r3, [r6, #12]
 8007f54:	061a      	lsls	r2, r3, #24
 8007f56:	d410      	bmi.n	8007f7a <__swhatbuf_r+0x3e>
 8007f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f5c:	e00e      	b.n	8007f7c <__swhatbuf_r+0x40>
 8007f5e:	466a      	mov	r2, sp
 8007f60:	f000 f8fa 	bl	8008158 <_fstat_r>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	dbf2      	blt.n	8007f4e <__swhatbuf_r+0x12>
 8007f68:	9a01      	ldr	r2, [sp, #4]
 8007f6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f72:	425a      	negs	r2, r3
 8007f74:	415a      	adcs	r2, r3
 8007f76:	602a      	str	r2, [r5, #0]
 8007f78:	e7ee      	b.n	8007f58 <__swhatbuf_r+0x1c>
 8007f7a:	2340      	movs	r3, #64	; 0x40
 8007f7c:	2000      	movs	r0, #0
 8007f7e:	6023      	str	r3, [r4, #0]
 8007f80:	b016      	add	sp, #88	; 0x58
 8007f82:	bd70      	pop	{r4, r5, r6, pc}

08007f84 <__smakebuf_r>:
 8007f84:	898b      	ldrh	r3, [r1, #12]
 8007f86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f88:	079d      	lsls	r5, r3, #30
 8007f8a:	4606      	mov	r6, r0
 8007f8c:	460c      	mov	r4, r1
 8007f8e:	d507      	bpl.n	8007fa0 <__smakebuf_r+0x1c>
 8007f90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	6123      	str	r3, [r4, #16]
 8007f98:	2301      	movs	r3, #1
 8007f9a:	6163      	str	r3, [r4, #20]
 8007f9c:	b002      	add	sp, #8
 8007f9e:	bd70      	pop	{r4, r5, r6, pc}
 8007fa0:	ab01      	add	r3, sp, #4
 8007fa2:	466a      	mov	r2, sp
 8007fa4:	f7ff ffca 	bl	8007f3c <__swhatbuf_r>
 8007fa8:	9900      	ldr	r1, [sp, #0]
 8007faa:	4605      	mov	r5, r0
 8007fac:	4630      	mov	r0, r6
 8007fae:	f7ff fb23 	bl	80075f8 <_malloc_r>
 8007fb2:	b948      	cbnz	r0, 8007fc8 <__smakebuf_r+0x44>
 8007fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fb8:	059a      	lsls	r2, r3, #22
 8007fba:	d4ef      	bmi.n	8007f9c <__smakebuf_r+0x18>
 8007fbc:	f023 0303 	bic.w	r3, r3, #3
 8007fc0:	f043 0302 	orr.w	r3, r3, #2
 8007fc4:	81a3      	strh	r3, [r4, #12]
 8007fc6:	e7e3      	b.n	8007f90 <__smakebuf_r+0xc>
 8007fc8:	4b0d      	ldr	r3, [pc, #52]	; (8008000 <__smakebuf_r+0x7c>)
 8007fca:	62b3      	str	r3, [r6, #40]	; 0x28
 8007fcc:	89a3      	ldrh	r3, [r4, #12]
 8007fce:	6020      	str	r0, [r4, #0]
 8007fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fd4:	81a3      	strh	r3, [r4, #12]
 8007fd6:	9b00      	ldr	r3, [sp, #0]
 8007fd8:	6163      	str	r3, [r4, #20]
 8007fda:	9b01      	ldr	r3, [sp, #4]
 8007fdc:	6120      	str	r0, [r4, #16]
 8007fde:	b15b      	cbz	r3, 8007ff8 <__smakebuf_r+0x74>
 8007fe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	f000 f8c9 	bl	800817c <_isatty_r>
 8007fea:	b128      	cbz	r0, 8007ff8 <__smakebuf_r+0x74>
 8007fec:	89a3      	ldrh	r3, [r4, #12]
 8007fee:	f023 0303 	bic.w	r3, r3, #3
 8007ff2:	f043 0301 	orr.w	r3, r3, #1
 8007ff6:	81a3      	strh	r3, [r4, #12]
 8007ff8:	89a0      	ldrh	r0, [r4, #12]
 8007ffa:	4305      	orrs	r5, r0
 8007ffc:	81a5      	strh	r5, [r4, #12]
 8007ffe:	e7cd      	b.n	8007f9c <__smakebuf_r+0x18>
 8008000:	08007d95 	.word	0x08007d95

08008004 <_raise_r>:
 8008004:	291f      	cmp	r1, #31
 8008006:	b538      	push	{r3, r4, r5, lr}
 8008008:	4604      	mov	r4, r0
 800800a:	460d      	mov	r5, r1
 800800c:	d904      	bls.n	8008018 <_raise_r+0x14>
 800800e:	2316      	movs	r3, #22
 8008010:	6003      	str	r3, [r0, #0]
 8008012:	f04f 30ff 	mov.w	r0, #4294967295
 8008016:	bd38      	pop	{r3, r4, r5, pc}
 8008018:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800801a:	b112      	cbz	r2, 8008022 <_raise_r+0x1e>
 800801c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008020:	b94b      	cbnz	r3, 8008036 <_raise_r+0x32>
 8008022:	4620      	mov	r0, r4
 8008024:	f000 f830 	bl	8008088 <_getpid_r>
 8008028:	462a      	mov	r2, r5
 800802a:	4601      	mov	r1, r0
 800802c:	4620      	mov	r0, r4
 800802e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008032:	f000 b817 	b.w	8008064 <_kill_r>
 8008036:	2b01      	cmp	r3, #1
 8008038:	d00a      	beq.n	8008050 <_raise_r+0x4c>
 800803a:	1c59      	adds	r1, r3, #1
 800803c:	d103      	bne.n	8008046 <_raise_r+0x42>
 800803e:	2316      	movs	r3, #22
 8008040:	6003      	str	r3, [r0, #0]
 8008042:	2001      	movs	r0, #1
 8008044:	e7e7      	b.n	8008016 <_raise_r+0x12>
 8008046:	2400      	movs	r4, #0
 8008048:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800804c:	4628      	mov	r0, r5
 800804e:	4798      	blx	r3
 8008050:	2000      	movs	r0, #0
 8008052:	e7e0      	b.n	8008016 <_raise_r+0x12>

08008054 <raise>:
 8008054:	4b02      	ldr	r3, [pc, #8]	; (8008060 <raise+0xc>)
 8008056:	4601      	mov	r1, r0
 8008058:	6818      	ldr	r0, [r3, #0]
 800805a:	f7ff bfd3 	b.w	8008004 <_raise_r>
 800805e:	bf00      	nop
 8008060:	2000000c 	.word	0x2000000c

08008064 <_kill_r>:
 8008064:	b538      	push	{r3, r4, r5, lr}
 8008066:	4d07      	ldr	r5, [pc, #28]	; (8008084 <_kill_r+0x20>)
 8008068:	2300      	movs	r3, #0
 800806a:	4604      	mov	r4, r0
 800806c:	4608      	mov	r0, r1
 800806e:	4611      	mov	r1, r2
 8008070:	602b      	str	r3, [r5, #0]
 8008072:	f7f9 fc13 	bl	800189c <_kill>
 8008076:	1c43      	adds	r3, r0, #1
 8008078:	d102      	bne.n	8008080 <_kill_r+0x1c>
 800807a:	682b      	ldr	r3, [r5, #0]
 800807c:	b103      	cbz	r3, 8008080 <_kill_r+0x1c>
 800807e:	6023      	str	r3, [r4, #0]
 8008080:	bd38      	pop	{r3, r4, r5, pc}
 8008082:	bf00      	nop
 8008084:	200002ac 	.word	0x200002ac

08008088 <_getpid_r>:
 8008088:	f7f9 bc00 	b.w	800188c <_getpid>

0800808c <__sread>:
 800808c:	b510      	push	{r4, lr}
 800808e:	460c      	mov	r4, r1
 8008090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008094:	f000 f894 	bl	80081c0 <_read_r>
 8008098:	2800      	cmp	r0, #0
 800809a:	bfab      	itete	ge
 800809c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800809e:	89a3      	ldrhlt	r3, [r4, #12]
 80080a0:	181b      	addge	r3, r3, r0
 80080a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80080a6:	bfac      	ite	ge
 80080a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80080aa:	81a3      	strhlt	r3, [r4, #12]
 80080ac:	bd10      	pop	{r4, pc}

080080ae <__swrite>:
 80080ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080b2:	461f      	mov	r7, r3
 80080b4:	898b      	ldrh	r3, [r1, #12]
 80080b6:	05db      	lsls	r3, r3, #23
 80080b8:	4605      	mov	r5, r0
 80080ba:	460c      	mov	r4, r1
 80080bc:	4616      	mov	r6, r2
 80080be:	d505      	bpl.n	80080cc <__swrite+0x1e>
 80080c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080c4:	2302      	movs	r3, #2
 80080c6:	2200      	movs	r2, #0
 80080c8:	f000 f868 	bl	800819c <_lseek_r>
 80080cc:	89a3      	ldrh	r3, [r4, #12]
 80080ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080d6:	81a3      	strh	r3, [r4, #12]
 80080d8:	4632      	mov	r2, r6
 80080da:	463b      	mov	r3, r7
 80080dc:	4628      	mov	r0, r5
 80080de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080e2:	f000 b817 	b.w	8008114 <_write_r>

080080e6 <__sseek>:
 80080e6:	b510      	push	{r4, lr}
 80080e8:	460c      	mov	r4, r1
 80080ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080ee:	f000 f855 	bl	800819c <_lseek_r>
 80080f2:	1c43      	adds	r3, r0, #1
 80080f4:	89a3      	ldrh	r3, [r4, #12]
 80080f6:	bf15      	itete	ne
 80080f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80080fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80080fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008102:	81a3      	strheq	r3, [r4, #12]
 8008104:	bf18      	it	ne
 8008106:	81a3      	strhne	r3, [r4, #12]
 8008108:	bd10      	pop	{r4, pc}

0800810a <__sclose>:
 800810a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800810e:	f000 b813 	b.w	8008138 <_close_r>
	...

08008114 <_write_r>:
 8008114:	b538      	push	{r3, r4, r5, lr}
 8008116:	4d07      	ldr	r5, [pc, #28]	; (8008134 <_write_r+0x20>)
 8008118:	4604      	mov	r4, r0
 800811a:	4608      	mov	r0, r1
 800811c:	4611      	mov	r1, r2
 800811e:	2200      	movs	r2, #0
 8008120:	602a      	str	r2, [r5, #0]
 8008122:	461a      	mov	r2, r3
 8008124:	f7f9 fbf1 	bl	800190a <_write>
 8008128:	1c43      	adds	r3, r0, #1
 800812a:	d102      	bne.n	8008132 <_write_r+0x1e>
 800812c:	682b      	ldr	r3, [r5, #0]
 800812e:	b103      	cbz	r3, 8008132 <_write_r+0x1e>
 8008130:	6023      	str	r3, [r4, #0]
 8008132:	bd38      	pop	{r3, r4, r5, pc}
 8008134:	200002ac 	.word	0x200002ac

08008138 <_close_r>:
 8008138:	b538      	push	{r3, r4, r5, lr}
 800813a:	4d06      	ldr	r5, [pc, #24]	; (8008154 <_close_r+0x1c>)
 800813c:	2300      	movs	r3, #0
 800813e:	4604      	mov	r4, r0
 8008140:	4608      	mov	r0, r1
 8008142:	602b      	str	r3, [r5, #0]
 8008144:	f7f9 fbfd 	bl	8001942 <_close>
 8008148:	1c43      	adds	r3, r0, #1
 800814a:	d102      	bne.n	8008152 <_close_r+0x1a>
 800814c:	682b      	ldr	r3, [r5, #0]
 800814e:	b103      	cbz	r3, 8008152 <_close_r+0x1a>
 8008150:	6023      	str	r3, [r4, #0]
 8008152:	bd38      	pop	{r3, r4, r5, pc}
 8008154:	200002ac 	.word	0x200002ac

08008158 <_fstat_r>:
 8008158:	b538      	push	{r3, r4, r5, lr}
 800815a:	4d07      	ldr	r5, [pc, #28]	; (8008178 <_fstat_r+0x20>)
 800815c:	2300      	movs	r3, #0
 800815e:	4604      	mov	r4, r0
 8008160:	4608      	mov	r0, r1
 8008162:	4611      	mov	r1, r2
 8008164:	602b      	str	r3, [r5, #0]
 8008166:	f7f9 fbf8 	bl	800195a <_fstat>
 800816a:	1c43      	adds	r3, r0, #1
 800816c:	d102      	bne.n	8008174 <_fstat_r+0x1c>
 800816e:	682b      	ldr	r3, [r5, #0]
 8008170:	b103      	cbz	r3, 8008174 <_fstat_r+0x1c>
 8008172:	6023      	str	r3, [r4, #0]
 8008174:	bd38      	pop	{r3, r4, r5, pc}
 8008176:	bf00      	nop
 8008178:	200002ac 	.word	0x200002ac

0800817c <_isatty_r>:
 800817c:	b538      	push	{r3, r4, r5, lr}
 800817e:	4d06      	ldr	r5, [pc, #24]	; (8008198 <_isatty_r+0x1c>)
 8008180:	2300      	movs	r3, #0
 8008182:	4604      	mov	r4, r0
 8008184:	4608      	mov	r0, r1
 8008186:	602b      	str	r3, [r5, #0]
 8008188:	f7f9 fbf7 	bl	800197a <_isatty>
 800818c:	1c43      	adds	r3, r0, #1
 800818e:	d102      	bne.n	8008196 <_isatty_r+0x1a>
 8008190:	682b      	ldr	r3, [r5, #0]
 8008192:	b103      	cbz	r3, 8008196 <_isatty_r+0x1a>
 8008194:	6023      	str	r3, [r4, #0]
 8008196:	bd38      	pop	{r3, r4, r5, pc}
 8008198:	200002ac 	.word	0x200002ac

0800819c <_lseek_r>:
 800819c:	b538      	push	{r3, r4, r5, lr}
 800819e:	4d07      	ldr	r5, [pc, #28]	; (80081bc <_lseek_r+0x20>)
 80081a0:	4604      	mov	r4, r0
 80081a2:	4608      	mov	r0, r1
 80081a4:	4611      	mov	r1, r2
 80081a6:	2200      	movs	r2, #0
 80081a8:	602a      	str	r2, [r5, #0]
 80081aa:	461a      	mov	r2, r3
 80081ac:	f7f9 fbf0 	bl	8001990 <_lseek>
 80081b0:	1c43      	adds	r3, r0, #1
 80081b2:	d102      	bne.n	80081ba <_lseek_r+0x1e>
 80081b4:	682b      	ldr	r3, [r5, #0]
 80081b6:	b103      	cbz	r3, 80081ba <_lseek_r+0x1e>
 80081b8:	6023      	str	r3, [r4, #0]
 80081ba:	bd38      	pop	{r3, r4, r5, pc}
 80081bc:	200002ac 	.word	0x200002ac

080081c0 <_read_r>:
 80081c0:	b538      	push	{r3, r4, r5, lr}
 80081c2:	4d07      	ldr	r5, [pc, #28]	; (80081e0 <_read_r+0x20>)
 80081c4:	4604      	mov	r4, r0
 80081c6:	4608      	mov	r0, r1
 80081c8:	4611      	mov	r1, r2
 80081ca:	2200      	movs	r2, #0
 80081cc:	602a      	str	r2, [r5, #0]
 80081ce:	461a      	mov	r2, r3
 80081d0:	f7f9 fb7e 	bl	80018d0 <_read>
 80081d4:	1c43      	adds	r3, r0, #1
 80081d6:	d102      	bne.n	80081de <_read_r+0x1e>
 80081d8:	682b      	ldr	r3, [r5, #0]
 80081da:	b103      	cbz	r3, 80081de <_read_r+0x1e>
 80081dc:	6023      	str	r3, [r4, #0]
 80081de:	bd38      	pop	{r3, r4, r5, pc}
 80081e0:	200002ac 	.word	0x200002ac

080081e4 <cosf>:
 80081e4:	ee10 3a10 	vmov	r3, s0
 80081e8:	b507      	push	{r0, r1, r2, lr}
 80081ea:	4a1c      	ldr	r2, [pc, #112]	; (800825c <cosf+0x78>)
 80081ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081f0:	4293      	cmp	r3, r2
 80081f2:	dc04      	bgt.n	80081fe <cosf+0x1a>
 80081f4:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8008260 <cosf+0x7c>
 80081f8:	f000 fa1e 	bl	8008638 <__kernel_cosf>
 80081fc:	e004      	b.n	8008208 <cosf+0x24>
 80081fe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008202:	db04      	blt.n	800820e <cosf+0x2a>
 8008204:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008208:	b003      	add	sp, #12
 800820a:	f85d fb04 	ldr.w	pc, [sp], #4
 800820e:	4668      	mov	r0, sp
 8008210:	f000 f8d6 	bl	80083c0 <__ieee754_rem_pio2f>
 8008214:	f000 0003 	and.w	r0, r0, #3
 8008218:	2801      	cmp	r0, #1
 800821a:	d007      	beq.n	800822c <cosf+0x48>
 800821c:	2802      	cmp	r0, #2
 800821e:	d00e      	beq.n	800823e <cosf+0x5a>
 8008220:	b9a0      	cbnz	r0, 800824c <cosf+0x68>
 8008222:	eddd 0a01 	vldr	s1, [sp, #4]
 8008226:	ed9d 0a00 	vldr	s0, [sp]
 800822a:	e7e5      	b.n	80081f8 <cosf+0x14>
 800822c:	eddd 0a01 	vldr	s1, [sp, #4]
 8008230:	ed9d 0a00 	vldr	s0, [sp]
 8008234:	f000 fcea 	bl	8008c0c <__kernel_sinf>
 8008238:	eeb1 0a40 	vneg.f32	s0, s0
 800823c:	e7e4      	b.n	8008208 <cosf+0x24>
 800823e:	eddd 0a01 	vldr	s1, [sp, #4]
 8008242:	ed9d 0a00 	vldr	s0, [sp]
 8008246:	f000 f9f7 	bl	8008638 <__kernel_cosf>
 800824a:	e7f5      	b.n	8008238 <cosf+0x54>
 800824c:	eddd 0a01 	vldr	s1, [sp, #4]
 8008250:	ed9d 0a00 	vldr	s0, [sp]
 8008254:	2001      	movs	r0, #1
 8008256:	f000 fcd9 	bl	8008c0c <__kernel_sinf>
 800825a:	e7d5      	b.n	8008208 <cosf+0x24>
 800825c:	3f490fd8 	.word	0x3f490fd8
 8008260:	00000000 	.word	0x00000000

08008264 <fmodf>:
 8008264:	b508      	push	{r3, lr}
 8008266:	ed2d 8b02 	vpush	{d8}
 800826a:	eef0 8a40 	vmov.f32	s17, s0
 800826e:	eeb0 8a60 	vmov.f32	s16, s1
 8008272:	f000 f823 	bl	80082bc <__ieee754_fmodf>
 8008276:	4b0f      	ldr	r3, [pc, #60]	; (80082b4 <fmodf+0x50>)
 8008278:	f993 3000 	ldrsb.w	r3, [r3]
 800827c:	3301      	adds	r3, #1
 800827e:	d016      	beq.n	80082ae <fmodf+0x4a>
 8008280:	eeb4 8a48 	vcmp.f32	s16, s16
 8008284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008288:	d611      	bvs.n	80082ae <fmodf+0x4a>
 800828a:	eef4 8a68 	vcmp.f32	s17, s17
 800828e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008292:	d60c      	bvs.n	80082ae <fmodf+0x4a>
 8008294:	eddf 8a08 	vldr	s17, [pc, #32]	; 80082b8 <fmodf+0x54>
 8008298:	eeb4 8a68 	vcmp.f32	s16, s17
 800829c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082a0:	d105      	bne.n	80082ae <fmodf+0x4a>
 80082a2:	f7fd fa9d 	bl	80057e0 <__errno>
 80082a6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80082aa:	2321      	movs	r3, #33	; 0x21
 80082ac:	6003      	str	r3, [r0, #0]
 80082ae:	ecbd 8b02 	vpop	{d8}
 80082b2:	bd08      	pop	{r3, pc}
 80082b4:	200001dc 	.word	0x200001dc
 80082b8:	00000000 	.word	0x00000000

080082bc <__ieee754_fmodf>:
 80082bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082be:	ee10 6a90 	vmov	r6, s1
 80082c2:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 80082c6:	d009      	beq.n	80082dc <__ieee754_fmodf+0x20>
 80082c8:	ee10 2a10 	vmov	r2, s0
 80082cc:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80082d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80082d4:	da02      	bge.n	80082dc <__ieee754_fmodf+0x20>
 80082d6:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80082da:	dd04      	ble.n	80082e6 <__ieee754_fmodf+0x2a>
 80082dc:	ee60 0a20 	vmul.f32	s1, s0, s1
 80082e0:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80082e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082e6:	42ab      	cmp	r3, r5
 80082e8:	dbfc      	blt.n	80082e4 <__ieee754_fmodf+0x28>
 80082ea:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 80082ee:	d106      	bne.n	80082fe <__ieee754_fmodf+0x42>
 80082f0:	4a32      	ldr	r2, [pc, #200]	; (80083bc <__ieee754_fmodf+0x100>)
 80082f2:	0fe3      	lsrs	r3, r4, #31
 80082f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80082f8:	ed93 0a00 	vldr	s0, [r3]
 80082fc:	e7f2      	b.n	80082e4 <__ieee754_fmodf+0x28>
 80082fe:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8008302:	d13f      	bne.n	8008384 <__ieee754_fmodf+0xc8>
 8008304:	0219      	lsls	r1, r3, #8
 8008306:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800830a:	2900      	cmp	r1, #0
 800830c:	dc37      	bgt.n	800837e <__ieee754_fmodf+0xc2>
 800830e:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8008312:	d13d      	bne.n	8008390 <__ieee754_fmodf+0xd4>
 8008314:	022f      	lsls	r7, r5, #8
 8008316:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800831a:	2f00      	cmp	r7, #0
 800831c:	da35      	bge.n	800838a <__ieee754_fmodf+0xce>
 800831e:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8008322:	bfbb      	ittet	lt
 8008324:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8008328:	1a12      	sublt	r2, r2, r0
 800832a:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800832e:	4093      	lsllt	r3, r2
 8008330:	bfa8      	it	ge
 8008332:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8008336:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800833a:	bfb5      	itete	lt
 800833c:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8008340:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 8008344:	1a52      	sublt	r2, r2, r1
 8008346:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 800834a:	bfb8      	it	lt
 800834c:	4095      	lsllt	r5, r2
 800834e:	1a40      	subs	r0, r0, r1
 8008350:	1b5a      	subs	r2, r3, r5
 8008352:	bb00      	cbnz	r0, 8008396 <__ieee754_fmodf+0xda>
 8008354:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8008358:	bf38      	it	cc
 800835a:	4613      	movcc	r3, r2
 800835c:	2b00      	cmp	r3, #0
 800835e:	d0c7      	beq.n	80082f0 <__ieee754_fmodf+0x34>
 8008360:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008364:	db1f      	blt.n	80083a6 <__ieee754_fmodf+0xea>
 8008366:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800836a:	db1f      	blt.n	80083ac <__ieee754_fmodf+0xf0>
 800836c:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8008370:	317f      	adds	r1, #127	; 0x7f
 8008372:	4323      	orrs	r3, r4
 8008374:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8008378:	ee00 3a10 	vmov	s0, r3
 800837c:	e7b2      	b.n	80082e4 <__ieee754_fmodf+0x28>
 800837e:	3801      	subs	r0, #1
 8008380:	0049      	lsls	r1, r1, #1
 8008382:	e7c2      	b.n	800830a <__ieee754_fmodf+0x4e>
 8008384:	15d8      	asrs	r0, r3, #23
 8008386:	387f      	subs	r0, #127	; 0x7f
 8008388:	e7c1      	b.n	800830e <__ieee754_fmodf+0x52>
 800838a:	3901      	subs	r1, #1
 800838c:	007f      	lsls	r7, r7, #1
 800838e:	e7c4      	b.n	800831a <__ieee754_fmodf+0x5e>
 8008390:	15e9      	asrs	r1, r5, #23
 8008392:	397f      	subs	r1, #127	; 0x7f
 8008394:	e7c3      	b.n	800831e <__ieee754_fmodf+0x62>
 8008396:	2a00      	cmp	r2, #0
 8008398:	da02      	bge.n	80083a0 <__ieee754_fmodf+0xe4>
 800839a:	005b      	lsls	r3, r3, #1
 800839c:	3801      	subs	r0, #1
 800839e:	e7d7      	b.n	8008350 <__ieee754_fmodf+0x94>
 80083a0:	d0a6      	beq.n	80082f0 <__ieee754_fmodf+0x34>
 80083a2:	0053      	lsls	r3, r2, #1
 80083a4:	e7fa      	b.n	800839c <__ieee754_fmodf+0xe0>
 80083a6:	005b      	lsls	r3, r3, #1
 80083a8:	3901      	subs	r1, #1
 80083aa:	e7d9      	b.n	8008360 <__ieee754_fmodf+0xa4>
 80083ac:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 80083b0:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 80083b4:	3182      	adds	r1, #130	; 0x82
 80083b6:	410b      	asrs	r3, r1
 80083b8:	4323      	orrs	r3, r4
 80083ba:	e7dd      	b.n	8008378 <__ieee754_fmodf+0xbc>
 80083bc:	08009244 	.word	0x08009244

080083c0 <__ieee754_rem_pio2f>:
 80083c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083c2:	ee10 6a10 	vmov	r6, s0
 80083c6:	4b8e      	ldr	r3, [pc, #568]	; (8008600 <__ieee754_rem_pio2f+0x240>)
 80083c8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80083cc:	429d      	cmp	r5, r3
 80083ce:	b087      	sub	sp, #28
 80083d0:	eef0 7a40 	vmov.f32	s15, s0
 80083d4:	4604      	mov	r4, r0
 80083d6:	dc05      	bgt.n	80083e4 <__ieee754_rem_pio2f+0x24>
 80083d8:	2300      	movs	r3, #0
 80083da:	ed80 0a00 	vstr	s0, [r0]
 80083de:	6043      	str	r3, [r0, #4]
 80083e0:	2000      	movs	r0, #0
 80083e2:	e01a      	b.n	800841a <__ieee754_rem_pio2f+0x5a>
 80083e4:	4b87      	ldr	r3, [pc, #540]	; (8008604 <__ieee754_rem_pio2f+0x244>)
 80083e6:	429d      	cmp	r5, r3
 80083e8:	dc46      	bgt.n	8008478 <__ieee754_rem_pio2f+0xb8>
 80083ea:	2e00      	cmp	r6, #0
 80083ec:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8008608 <__ieee754_rem_pio2f+0x248>
 80083f0:	4b86      	ldr	r3, [pc, #536]	; (800860c <__ieee754_rem_pio2f+0x24c>)
 80083f2:	f025 050f 	bic.w	r5, r5, #15
 80083f6:	dd1f      	ble.n	8008438 <__ieee754_rem_pio2f+0x78>
 80083f8:	429d      	cmp	r5, r3
 80083fa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80083fe:	d00e      	beq.n	800841e <__ieee754_rem_pio2f+0x5e>
 8008400:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8008610 <__ieee754_rem_pio2f+0x250>
 8008404:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8008408:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800840c:	ed80 0a00 	vstr	s0, [r0]
 8008410:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008414:	2001      	movs	r0, #1
 8008416:	edc4 7a01 	vstr	s15, [r4, #4]
 800841a:	b007      	add	sp, #28
 800841c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800841e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8008614 <__ieee754_rem_pio2f+0x254>
 8008422:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8008618 <__ieee754_rem_pio2f+0x258>
 8008426:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800842a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800842e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008432:	edc0 6a00 	vstr	s13, [r0]
 8008436:	e7eb      	b.n	8008410 <__ieee754_rem_pio2f+0x50>
 8008438:	429d      	cmp	r5, r3
 800843a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800843e:	d00e      	beq.n	800845e <__ieee754_rem_pio2f+0x9e>
 8008440:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8008610 <__ieee754_rem_pio2f+0x250>
 8008444:	ee37 0a87 	vadd.f32	s0, s15, s14
 8008448:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800844c:	ed80 0a00 	vstr	s0, [r0]
 8008450:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008454:	f04f 30ff 	mov.w	r0, #4294967295
 8008458:	edc4 7a01 	vstr	s15, [r4, #4]
 800845c:	e7dd      	b.n	800841a <__ieee754_rem_pio2f+0x5a>
 800845e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8008614 <__ieee754_rem_pio2f+0x254>
 8008462:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8008618 <__ieee754_rem_pio2f+0x258>
 8008466:	ee77 7a80 	vadd.f32	s15, s15, s0
 800846a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800846e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008472:	edc0 6a00 	vstr	s13, [r0]
 8008476:	e7eb      	b.n	8008450 <__ieee754_rem_pio2f+0x90>
 8008478:	4b68      	ldr	r3, [pc, #416]	; (800861c <__ieee754_rem_pio2f+0x25c>)
 800847a:	429d      	cmp	r5, r3
 800847c:	dc72      	bgt.n	8008564 <__ieee754_rem_pio2f+0x1a4>
 800847e:	f000 fc0d 	bl	8008c9c <fabsf>
 8008482:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8008620 <__ieee754_rem_pio2f+0x260>
 8008486:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800848a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800848e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008492:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008496:	ee17 0a90 	vmov	r0, s15
 800849a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008608 <__ieee754_rem_pio2f+0x248>
 800849e:	eea7 0a67 	vfms.f32	s0, s14, s15
 80084a2:	281f      	cmp	r0, #31
 80084a4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8008610 <__ieee754_rem_pio2f+0x250>
 80084a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ac:	eeb1 6a47 	vneg.f32	s12, s14
 80084b0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80084b4:	ee16 2a90 	vmov	r2, s13
 80084b8:	dc1c      	bgt.n	80084f4 <__ieee754_rem_pio2f+0x134>
 80084ba:	495a      	ldr	r1, [pc, #360]	; (8008624 <__ieee754_rem_pio2f+0x264>)
 80084bc:	1e47      	subs	r7, r0, #1
 80084be:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80084c2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80084c6:	428b      	cmp	r3, r1
 80084c8:	d014      	beq.n	80084f4 <__ieee754_rem_pio2f+0x134>
 80084ca:	6022      	str	r2, [r4, #0]
 80084cc:	ed94 7a00 	vldr	s14, [r4]
 80084d0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80084d4:	2e00      	cmp	r6, #0
 80084d6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80084da:	ed84 0a01 	vstr	s0, [r4, #4]
 80084de:	da9c      	bge.n	800841a <__ieee754_rem_pio2f+0x5a>
 80084e0:	eeb1 7a47 	vneg.f32	s14, s14
 80084e4:	eeb1 0a40 	vneg.f32	s0, s0
 80084e8:	ed84 7a00 	vstr	s14, [r4]
 80084ec:	ed84 0a01 	vstr	s0, [r4, #4]
 80084f0:	4240      	negs	r0, r0
 80084f2:	e792      	b.n	800841a <__ieee754_rem_pio2f+0x5a>
 80084f4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80084f8:	15eb      	asrs	r3, r5, #23
 80084fa:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80084fe:	2d08      	cmp	r5, #8
 8008500:	dde3      	ble.n	80084ca <__ieee754_rem_pio2f+0x10a>
 8008502:	eddf 7a44 	vldr	s15, [pc, #272]	; 8008614 <__ieee754_rem_pio2f+0x254>
 8008506:	eef0 6a40 	vmov.f32	s13, s0
 800850a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800850e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008512:	eea6 0a27 	vfma.f32	s0, s12, s15
 8008516:	eddf 7a40 	vldr	s15, [pc, #256]	; 8008618 <__ieee754_rem_pio2f+0x258>
 800851a:	ee97 0a27 	vfnms.f32	s0, s14, s15
 800851e:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8008522:	eef0 7a40 	vmov.f32	s15, s0
 8008526:	ee15 2a90 	vmov	r2, s11
 800852a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800852e:	1a5b      	subs	r3, r3, r1
 8008530:	2b19      	cmp	r3, #25
 8008532:	dc04      	bgt.n	800853e <__ieee754_rem_pio2f+0x17e>
 8008534:	edc4 5a00 	vstr	s11, [r4]
 8008538:	eeb0 0a66 	vmov.f32	s0, s13
 800853c:	e7c6      	b.n	80084cc <__ieee754_rem_pio2f+0x10c>
 800853e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8008628 <__ieee754_rem_pio2f+0x268>
 8008542:	eeb0 0a66 	vmov.f32	s0, s13
 8008546:	eea6 0a25 	vfma.f32	s0, s12, s11
 800854a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800854e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800862c <__ieee754_rem_pio2f+0x26c>
 8008552:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008556:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800855a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800855e:	ed84 7a00 	vstr	s14, [r4]
 8008562:	e7b3      	b.n	80084cc <__ieee754_rem_pio2f+0x10c>
 8008564:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008568:	db06      	blt.n	8008578 <__ieee754_rem_pio2f+0x1b8>
 800856a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800856e:	edc0 7a01 	vstr	s15, [r0, #4]
 8008572:	edc0 7a00 	vstr	s15, [r0]
 8008576:	e733      	b.n	80083e0 <__ieee754_rem_pio2f+0x20>
 8008578:	15ea      	asrs	r2, r5, #23
 800857a:	3a86      	subs	r2, #134	; 0x86
 800857c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8008580:	ee07 3a90 	vmov	s15, r3
 8008584:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008588:	eddf 6a29 	vldr	s13, [pc, #164]	; 8008630 <__ieee754_rem_pio2f+0x270>
 800858c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008590:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008594:	ed8d 7a03 	vstr	s14, [sp, #12]
 8008598:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800859c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80085a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80085a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80085a8:	ed8d 7a04 	vstr	s14, [sp, #16]
 80085ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80085b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80085b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085b8:	edcd 7a05 	vstr	s15, [sp, #20]
 80085bc:	d11e      	bne.n	80085fc <__ieee754_rem_pio2f+0x23c>
 80085be:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80085c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085c6:	bf14      	ite	ne
 80085c8:	2302      	movne	r3, #2
 80085ca:	2301      	moveq	r3, #1
 80085cc:	4919      	ldr	r1, [pc, #100]	; (8008634 <__ieee754_rem_pio2f+0x274>)
 80085ce:	9101      	str	r1, [sp, #4]
 80085d0:	2102      	movs	r1, #2
 80085d2:	9100      	str	r1, [sp, #0]
 80085d4:	a803      	add	r0, sp, #12
 80085d6:	4621      	mov	r1, r4
 80085d8:	f000 f88e 	bl	80086f8 <__kernel_rem_pio2f>
 80085dc:	2e00      	cmp	r6, #0
 80085de:	f6bf af1c 	bge.w	800841a <__ieee754_rem_pio2f+0x5a>
 80085e2:	edd4 7a00 	vldr	s15, [r4]
 80085e6:	eef1 7a67 	vneg.f32	s15, s15
 80085ea:	edc4 7a00 	vstr	s15, [r4]
 80085ee:	edd4 7a01 	vldr	s15, [r4, #4]
 80085f2:	eef1 7a67 	vneg.f32	s15, s15
 80085f6:	edc4 7a01 	vstr	s15, [r4, #4]
 80085fa:	e779      	b.n	80084f0 <__ieee754_rem_pio2f+0x130>
 80085fc:	2303      	movs	r3, #3
 80085fe:	e7e5      	b.n	80085cc <__ieee754_rem_pio2f+0x20c>
 8008600:	3f490fd8 	.word	0x3f490fd8
 8008604:	4016cbe3 	.word	0x4016cbe3
 8008608:	3fc90f80 	.word	0x3fc90f80
 800860c:	3fc90fd0 	.word	0x3fc90fd0
 8008610:	37354443 	.word	0x37354443
 8008614:	37354400 	.word	0x37354400
 8008618:	2e85a308 	.word	0x2e85a308
 800861c:	43490f80 	.word	0x43490f80
 8008620:	3f22f984 	.word	0x3f22f984
 8008624:	0800924c 	.word	0x0800924c
 8008628:	2e85a300 	.word	0x2e85a300
 800862c:	248d3132 	.word	0x248d3132
 8008630:	43800000 	.word	0x43800000
 8008634:	080092cc 	.word	0x080092cc

08008638 <__kernel_cosf>:
 8008638:	ee10 3a10 	vmov	r3, s0
 800863c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008640:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008644:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008648:	da05      	bge.n	8008656 <__kernel_cosf+0x1e>
 800864a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800864e:	ee17 2a90 	vmov	r2, s15
 8008652:	2a00      	cmp	r2, #0
 8008654:	d03d      	beq.n	80086d2 <__kernel_cosf+0x9a>
 8008656:	ee60 5a00 	vmul.f32	s11, s0, s0
 800865a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80086d8 <__kernel_cosf+0xa0>
 800865e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80086dc <__kernel_cosf+0xa4>
 8008662:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80086e0 <__kernel_cosf+0xa8>
 8008666:	4a1f      	ldr	r2, [pc, #124]	; (80086e4 <__kernel_cosf+0xac>)
 8008668:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800866c:	4293      	cmp	r3, r2
 800866e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80086e8 <__kernel_cosf+0xb0>
 8008672:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008676:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80086ec <__kernel_cosf+0xb4>
 800867a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800867e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80086f0 <__kernel_cosf+0xb8>
 8008682:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008686:	eeb0 7a66 	vmov.f32	s14, s13
 800868a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800868e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008692:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8008696:	ee67 6a25 	vmul.f32	s13, s14, s11
 800869a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800869e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80086a2:	dc04      	bgt.n	80086ae <__kernel_cosf+0x76>
 80086a4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80086a8:	ee36 0a47 	vsub.f32	s0, s12, s14
 80086ac:	4770      	bx	lr
 80086ae:	4a11      	ldr	r2, [pc, #68]	; (80086f4 <__kernel_cosf+0xbc>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	bfda      	itte	le
 80086b4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80086b8:	ee06 3a90 	vmovle	s13, r3
 80086bc:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80086c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80086c4:	ee36 0a66 	vsub.f32	s0, s12, s13
 80086c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80086cc:	ee30 0a67 	vsub.f32	s0, s0, s15
 80086d0:	4770      	bx	lr
 80086d2:	eeb0 0a46 	vmov.f32	s0, s12
 80086d6:	4770      	bx	lr
 80086d8:	ad47d74e 	.word	0xad47d74e
 80086dc:	310f74f6 	.word	0x310f74f6
 80086e0:	3d2aaaab 	.word	0x3d2aaaab
 80086e4:	3e999999 	.word	0x3e999999
 80086e8:	b493f27c 	.word	0xb493f27c
 80086ec:	37d00d01 	.word	0x37d00d01
 80086f0:	bab60b61 	.word	0xbab60b61
 80086f4:	3f480000 	.word	0x3f480000

080086f8 <__kernel_rem_pio2f>:
 80086f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fc:	ed2d 8b04 	vpush	{d8-d9}
 8008700:	b0d7      	sub	sp, #348	; 0x15c
 8008702:	4616      	mov	r6, r2
 8008704:	4698      	mov	r8, r3
 8008706:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8008708:	4bbb      	ldr	r3, [pc, #748]	; (80089f8 <__kernel_rem_pio2f+0x300>)
 800870a:	9001      	str	r0, [sp, #4]
 800870c:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8008710:	1d33      	adds	r3, r6, #4
 8008712:	460d      	mov	r5, r1
 8008714:	f108 39ff 	add.w	r9, r8, #4294967295
 8008718:	db29      	blt.n	800876e <__kernel_rem_pio2f+0x76>
 800871a:	1ef1      	subs	r1, r6, #3
 800871c:	bf48      	it	mi
 800871e:	1d31      	addmi	r1, r6, #4
 8008720:	10c9      	asrs	r1, r1, #3
 8008722:	1c4c      	adds	r4, r1, #1
 8008724:	00e3      	lsls	r3, r4, #3
 8008726:	9302      	str	r3, [sp, #8]
 8008728:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800872a:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8008a08 <__kernel_rem_pio2f+0x310>
 800872e:	eba1 0009 	sub.w	r0, r1, r9
 8008732:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8008736:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 800873a:	eb07 0c09 	add.w	ip, r7, r9
 800873e:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8008742:	2300      	movs	r3, #0
 8008744:	4563      	cmp	r3, ip
 8008746:	dd14      	ble.n	8008772 <__kernel_rem_pio2f+0x7a>
 8008748:	ab1a      	add	r3, sp, #104	; 0x68
 800874a:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800874e:	46cc      	mov	ip, r9
 8008750:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8008754:	f1c8 0b01 	rsb	fp, r8, #1
 8008758:	eb0b 020c 	add.w	r2, fp, ip
 800875c:	4297      	cmp	r7, r2
 800875e:	db27      	blt.n	80087b0 <__kernel_rem_pio2f+0xb8>
 8008760:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008764:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8008a08 <__kernel_rem_pio2f+0x310>
 8008768:	4618      	mov	r0, r3
 800876a:	2200      	movs	r2, #0
 800876c:	e016      	b.n	800879c <__kernel_rem_pio2f+0xa4>
 800876e:	2100      	movs	r1, #0
 8008770:	e7d7      	b.n	8008722 <__kernel_rem_pio2f+0x2a>
 8008772:	42d8      	cmn	r0, r3
 8008774:	bf5d      	ittte	pl
 8008776:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 800877a:	ee07 2a90 	vmovpl	s15, r2
 800877e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008782:	eef0 7a47 	vmovmi.f32	s15, s14
 8008786:	ecea 7a01 	vstmia	sl!, {s15}
 800878a:	3301      	adds	r3, #1
 800878c:	e7da      	b.n	8008744 <__kernel_rem_pio2f+0x4c>
 800878e:	ecfe 6a01 	vldmia	lr!, {s13}
 8008792:	ed90 7a00 	vldr	s14, [r0]
 8008796:	eee6 7a87 	vfma.f32	s15, s13, s14
 800879a:	3201      	adds	r2, #1
 800879c:	454a      	cmp	r2, r9
 800879e:	f1a0 0004 	sub.w	r0, r0, #4
 80087a2:	ddf4      	ble.n	800878e <__kernel_rem_pio2f+0x96>
 80087a4:	ecea 7a01 	vstmia	sl!, {s15}
 80087a8:	3304      	adds	r3, #4
 80087aa:	f10c 0c01 	add.w	ip, ip, #1
 80087ae:	e7d3      	b.n	8008758 <__kernel_rem_pio2f+0x60>
 80087b0:	ab06      	add	r3, sp, #24
 80087b2:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80087b6:	9304      	str	r3, [sp, #16]
 80087b8:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80087ba:	eddf 8a92 	vldr	s17, [pc, #584]	; 8008a04 <__kernel_rem_pio2f+0x30c>
 80087be:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8008a00 <__kernel_rem_pio2f+0x308>
 80087c2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80087c6:	9303      	str	r3, [sp, #12]
 80087c8:	46ba      	mov	sl, r7
 80087ca:	ab56      	add	r3, sp, #344	; 0x158
 80087cc:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80087d0:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80087d4:	ab06      	add	r3, sp, #24
 80087d6:	4618      	mov	r0, r3
 80087d8:	4652      	mov	r2, sl
 80087da:	2a00      	cmp	r2, #0
 80087dc:	dc51      	bgt.n	8008882 <__kernel_rem_pio2f+0x18a>
 80087de:	4620      	mov	r0, r4
 80087e0:	9305      	str	r3, [sp, #20]
 80087e2:	f000 faa5 	bl	8008d30 <scalbnf>
 80087e6:	eeb0 8a40 	vmov.f32	s16, s0
 80087ea:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80087ee:	ee28 0a00 	vmul.f32	s0, s16, s0
 80087f2:	f000 fa5b 	bl	8008cac <floorf>
 80087f6:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80087fa:	eea0 8a67 	vfms.f32	s16, s0, s15
 80087fe:	2c00      	cmp	r4, #0
 8008800:	9b05      	ldr	r3, [sp, #20]
 8008802:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008806:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800880a:	edcd 7a00 	vstr	s15, [sp]
 800880e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008812:	dd4b      	ble.n	80088ac <__kernel_rem_pio2f+0x1b4>
 8008814:	f10a 3cff 	add.w	ip, sl, #4294967295
 8008818:	aa06      	add	r2, sp, #24
 800881a:	f1c4 0e08 	rsb	lr, r4, #8
 800881e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8008822:	ee17 1a90 	vmov	r1, s15
 8008826:	fa42 f00e 	asr.w	r0, r2, lr
 800882a:	4401      	add	r1, r0
 800882c:	9100      	str	r1, [sp, #0]
 800882e:	fa00 f00e 	lsl.w	r0, r0, lr
 8008832:	a906      	add	r1, sp, #24
 8008834:	1a12      	subs	r2, r2, r0
 8008836:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800883a:	f1c4 0007 	rsb	r0, r4, #7
 800883e:	fa42 fb00 	asr.w	fp, r2, r0
 8008842:	f1bb 0f00 	cmp.w	fp, #0
 8008846:	dd43      	ble.n	80088d0 <__kernel_rem_pio2f+0x1d8>
 8008848:	9a00      	ldr	r2, [sp, #0]
 800884a:	f04f 0e00 	mov.w	lr, #0
 800884e:	3201      	adds	r2, #1
 8008850:	9200      	str	r2, [sp, #0]
 8008852:	4670      	mov	r0, lr
 8008854:	45f2      	cmp	sl, lr
 8008856:	dc6c      	bgt.n	8008932 <__kernel_rem_pio2f+0x23a>
 8008858:	2c00      	cmp	r4, #0
 800885a:	dd04      	ble.n	8008866 <__kernel_rem_pio2f+0x16e>
 800885c:	2c01      	cmp	r4, #1
 800885e:	d079      	beq.n	8008954 <__kernel_rem_pio2f+0x25c>
 8008860:	2c02      	cmp	r4, #2
 8008862:	f000 8082 	beq.w	800896a <__kernel_rem_pio2f+0x272>
 8008866:	f1bb 0f02 	cmp.w	fp, #2
 800886a:	d131      	bne.n	80088d0 <__kernel_rem_pio2f+0x1d8>
 800886c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008870:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008874:	b360      	cbz	r0, 80088d0 <__kernel_rem_pio2f+0x1d8>
 8008876:	4620      	mov	r0, r4
 8008878:	f000 fa5a 	bl	8008d30 <scalbnf>
 800887c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008880:	e026      	b.n	80088d0 <__kernel_rem_pio2f+0x1d8>
 8008882:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008886:	3a01      	subs	r2, #1
 8008888:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800888c:	a942      	add	r1, sp, #264	; 0x108
 800888e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008892:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8008896:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800889a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800889e:	eca0 0a01 	vstmia	r0!, {s0}
 80088a2:	ed9c 0a00 	vldr	s0, [ip]
 80088a6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80088aa:	e796      	b.n	80087da <__kernel_rem_pio2f+0xe2>
 80088ac:	d107      	bne.n	80088be <__kernel_rem_pio2f+0x1c6>
 80088ae:	f10a 32ff 	add.w	r2, sl, #4294967295
 80088b2:	a906      	add	r1, sp, #24
 80088b4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80088b8:	ea4f 2b22 	mov.w	fp, r2, asr #8
 80088bc:	e7c1      	b.n	8008842 <__kernel_rem_pio2f+0x14a>
 80088be:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80088c2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80088c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ca:	da2f      	bge.n	800892c <__kernel_rem_pio2f+0x234>
 80088cc:	f04f 0b00 	mov.w	fp, #0
 80088d0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80088d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088d8:	f040 8098 	bne.w	8008a0c <__kernel_rem_pio2f+0x314>
 80088dc:	f10a 33ff 	add.w	r3, sl, #4294967295
 80088e0:	469c      	mov	ip, r3
 80088e2:	2200      	movs	r2, #0
 80088e4:	45bc      	cmp	ip, r7
 80088e6:	da48      	bge.n	800897a <__kernel_rem_pio2f+0x282>
 80088e8:	2a00      	cmp	r2, #0
 80088ea:	d05f      	beq.n	80089ac <__kernel_rem_pio2f+0x2b4>
 80088ec:	aa06      	add	r2, sp, #24
 80088ee:	3c08      	subs	r4, #8
 80088f0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80088f4:	2900      	cmp	r1, #0
 80088f6:	d07d      	beq.n	80089f4 <__kernel_rem_pio2f+0x2fc>
 80088f8:	4620      	mov	r0, r4
 80088fa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80088fe:	9301      	str	r3, [sp, #4]
 8008900:	f000 fa16 	bl	8008d30 <scalbnf>
 8008904:	9b01      	ldr	r3, [sp, #4]
 8008906:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8008a04 <__kernel_rem_pio2f+0x30c>
 800890a:	4619      	mov	r1, r3
 800890c:	2900      	cmp	r1, #0
 800890e:	f280 80af 	bge.w	8008a70 <__kernel_rem_pio2f+0x378>
 8008912:	4618      	mov	r0, r3
 8008914:	2400      	movs	r4, #0
 8008916:	2800      	cmp	r0, #0
 8008918:	f2c0 80d0 	blt.w	8008abc <__kernel_rem_pio2f+0x3c4>
 800891c:	a942      	add	r1, sp, #264	; 0x108
 800891e:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8008922:	4a36      	ldr	r2, [pc, #216]	; (80089fc <__kernel_rem_pio2f+0x304>)
 8008924:	eddf 7a38 	vldr	s15, [pc, #224]	; 8008a08 <__kernel_rem_pio2f+0x310>
 8008928:	2100      	movs	r1, #0
 800892a:	e0bb      	b.n	8008aa4 <__kernel_rem_pio2f+0x3ac>
 800892c:	f04f 0b02 	mov.w	fp, #2
 8008930:	e78a      	b.n	8008848 <__kernel_rem_pio2f+0x150>
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	b948      	cbnz	r0, 800894a <__kernel_rem_pio2f+0x252>
 8008936:	b11a      	cbz	r2, 8008940 <__kernel_rem_pio2f+0x248>
 8008938:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800893c:	601a      	str	r2, [r3, #0]
 800893e:	2201      	movs	r2, #1
 8008940:	f10e 0e01 	add.w	lr, lr, #1
 8008944:	3304      	adds	r3, #4
 8008946:	4610      	mov	r0, r2
 8008948:	e784      	b.n	8008854 <__kernel_rem_pio2f+0x15c>
 800894a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800894e:	601a      	str	r2, [r3, #0]
 8008950:	4602      	mov	r2, r0
 8008952:	e7f5      	b.n	8008940 <__kernel_rem_pio2f+0x248>
 8008954:	f10a 3cff 	add.w	ip, sl, #4294967295
 8008958:	ab06      	add	r3, sp, #24
 800895a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800895e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008962:	aa06      	add	r2, sp, #24
 8008964:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8008968:	e77d      	b.n	8008866 <__kernel_rem_pio2f+0x16e>
 800896a:	f10a 3cff 	add.w	ip, sl, #4294967295
 800896e:	ab06      	add	r3, sp, #24
 8008970:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8008974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008978:	e7f3      	b.n	8008962 <__kernel_rem_pio2f+0x26a>
 800897a:	a906      	add	r1, sp, #24
 800897c:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8008980:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008984:	4302      	orrs	r2, r0
 8008986:	e7ad      	b.n	80088e4 <__kernel_rem_pio2f+0x1ec>
 8008988:	3001      	adds	r0, #1
 800898a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800898e:	2a00      	cmp	r2, #0
 8008990:	d0fa      	beq.n	8008988 <__kernel_rem_pio2f+0x290>
 8008992:	a91a      	add	r1, sp, #104	; 0x68
 8008994:	eb0a 0208 	add.w	r2, sl, r8
 8008998:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800899c:	f10a 0301 	add.w	r3, sl, #1
 80089a0:	eb0a 0100 	add.w	r1, sl, r0
 80089a4:	4299      	cmp	r1, r3
 80089a6:	da04      	bge.n	80089b2 <__kernel_rem_pio2f+0x2ba>
 80089a8:	468a      	mov	sl, r1
 80089aa:	e70e      	b.n	80087ca <__kernel_rem_pio2f+0xd2>
 80089ac:	9b04      	ldr	r3, [sp, #16]
 80089ae:	2001      	movs	r0, #1
 80089b0:	e7eb      	b.n	800898a <__kernel_rem_pio2f+0x292>
 80089b2:	9803      	ldr	r0, [sp, #12]
 80089b4:	f8dd c004 	ldr.w	ip, [sp, #4]
 80089b8:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80089bc:	9000      	str	r0, [sp, #0]
 80089be:	ee07 0a90 	vmov	s15, r0
 80089c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80089c6:	2000      	movs	r0, #0
 80089c8:	ece2 7a01 	vstmia	r2!, {s15}
 80089cc:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8008a08 <__kernel_rem_pio2f+0x310>
 80089d0:	4696      	mov	lr, r2
 80089d2:	4548      	cmp	r0, r9
 80089d4:	dd06      	ble.n	80089e4 <__kernel_rem_pio2f+0x2ec>
 80089d6:	a842      	add	r0, sp, #264	; 0x108
 80089d8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80089dc:	edc0 7a00 	vstr	s15, [r0]
 80089e0:	3301      	adds	r3, #1
 80089e2:	e7df      	b.n	80089a4 <__kernel_rem_pio2f+0x2ac>
 80089e4:	ecfc 6a01 	vldmia	ip!, {s13}
 80089e8:	ed3e 7a01 	vldmdb	lr!, {s14}
 80089ec:	3001      	adds	r0, #1
 80089ee:	eee6 7a87 	vfma.f32	s15, s13, s14
 80089f2:	e7ee      	b.n	80089d2 <__kernel_rem_pio2f+0x2da>
 80089f4:	3b01      	subs	r3, #1
 80089f6:	e779      	b.n	80088ec <__kernel_rem_pio2f+0x1f4>
 80089f8:	08009610 	.word	0x08009610
 80089fc:	080095e4 	.word	0x080095e4
 8008a00:	43800000 	.word	0x43800000
 8008a04:	3b800000 	.word	0x3b800000
 8008a08:	00000000 	.word	0x00000000
 8008a0c:	9b02      	ldr	r3, [sp, #8]
 8008a0e:	eeb0 0a48 	vmov.f32	s0, s16
 8008a12:	1b98      	subs	r0, r3, r6
 8008a14:	f000 f98c 	bl	8008d30 <scalbnf>
 8008a18:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8008a00 <__kernel_rem_pio2f+0x308>
 8008a1c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a24:	db1b      	blt.n	8008a5e <__kernel_rem_pio2f+0x366>
 8008a26:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008a04 <__kernel_rem_pio2f+0x30c>
 8008a2a:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008a2e:	aa06      	add	r2, sp, #24
 8008a30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a34:	a906      	add	r1, sp, #24
 8008a36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a3a:	3408      	adds	r4, #8
 8008a3c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008a40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a44:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008a48:	ee10 3a10 	vmov	r3, s0
 8008a4c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8008a50:	ee17 2a90 	vmov	r2, s15
 8008a54:	f10a 0301 	add.w	r3, sl, #1
 8008a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008a5c:	e74c      	b.n	80088f8 <__kernel_rem_pio2f+0x200>
 8008a5e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008a62:	aa06      	add	r2, sp, #24
 8008a64:	ee10 3a10 	vmov	r3, s0
 8008a68:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8008a6c:	4653      	mov	r3, sl
 8008a6e:	e743      	b.n	80088f8 <__kernel_rem_pio2f+0x200>
 8008a70:	aa42      	add	r2, sp, #264	; 0x108
 8008a72:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8008a76:	aa06      	add	r2, sp, #24
 8008a78:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008a7c:	9201      	str	r2, [sp, #4]
 8008a7e:	ee07 2a90 	vmov	s15, r2
 8008a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a86:	3901      	subs	r1, #1
 8008a88:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008a8c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008a90:	edc0 7a00 	vstr	s15, [r0]
 8008a94:	e73a      	b.n	800890c <__kernel_rem_pio2f+0x214>
 8008a96:	ecf2 6a01 	vldmia	r2!, {s13}
 8008a9a:	ecb6 7a01 	vldmia	r6!, {s14}
 8008a9e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008aa2:	3101      	adds	r1, #1
 8008aa4:	42b9      	cmp	r1, r7
 8008aa6:	dc01      	bgt.n	8008aac <__kernel_rem_pio2f+0x3b4>
 8008aa8:	428c      	cmp	r4, r1
 8008aaa:	daf4      	bge.n	8008a96 <__kernel_rem_pio2f+0x39e>
 8008aac:	aa56      	add	r2, sp, #344	; 0x158
 8008aae:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8008ab2:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8008ab6:	3801      	subs	r0, #1
 8008ab8:	3401      	adds	r4, #1
 8008aba:	e72c      	b.n	8008916 <__kernel_rem_pio2f+0x21e>
 8008abc:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8008abe:	2a02      	cmp	r2, #2
 8008ac0:	dc0a      	bgt.n	8008ad8 <__kernel_rem_pio2f+0x3e0>
 8008ac2:	2a00      	cmp	r2, #0
 8008ac4:	dc61      	bgt.n	8008b8a <__kernel_rem_pio2f+0x492>
 8008ac6:	d03c      	beq.n	8008b42 <__kernel_rem_pio2f+0x44a>
 8008ac8:	9b00      	ldr	r3, [sp, #0]
 8008aca:	f003 0007 	and.w	r0, r3, #7
 8008ace:	b057      	add	sp, #348	; 0x15c
 8008ad0:	ecbd 8b04 	vpop	{d8-d9}
 8008ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8008ada:	2a03      	cmp	r2, #3
 8008adc:	d1f4      	bne.n	8008ac8 <__kernel_rem_pio2f+0x3d0>
 8008ade:	aa2e      	add	r2, sp, #184	; 0xb8
 8008ae0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8008ae4:	4608      	mov	r0, r1
 8008ae6:	461c      	mov	r4, r3
 8008ae8:	2c00      	cmp	r4, #0
 8008aea:	f1a0 0004 	sub.w	r0, r0, #4
 8008aee:	dc59      	bgt.n	8008ba4 <__kernel_rem_pio2f+0x4ac>
 8008af0:	4618      	mov	r0, r3
 8008af2:	2801      	cmp	r0, #1
 8008af4:	f1a1 0104 	sub.w	r1, r1, #4
 8008af8:	dc64      	bgt.n	8008bc4 <__kernel_rem_pio2f+0x4cc>
 8008afa:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8008a08 <__kernel_rem_pio2f+0x310>
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	dc70      	bgt.n	8008be4 <__kernel_rem_pio2f+0x4ec>
 8008b02:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8008b06:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8008b0a:	f1bb 0f00 	cmp.w	fp, #0
 8008b0e:	d172      	bne.n	8008bf6 <__kernel_rem_pio2f+0x4fe>
 8008b10:	edc5 6a00 	vstr	s13, [r5]
 8008b14:	ed85 7a01 	vstr	s14, [r5, #4]
 8008b18:	edc5 7a02 	vstr	s15, [r5, #8]
 8008b1c:	e7d4      	b.n	8008ac8 <__kernel_rem_pio2f+0x3d0>
 8008b1e:	aa2e      	add	r2, sp, #184	; 0xb8
 8008b20:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8008b24:	ed91 7a00 	vldr	s14, [r1]
 8008b28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	daf5      	bge.n	8008b1e <__kernel_rem_pio2f+0x426>
 8008b32:	f1bb 0f00 	cmp.w	fp, #0
 8008b36:	d001      	beq.n	8008b3c <__kernel_rem_pio2f+0x444>
 8008b38:	eef1 7a67 	vneg.f32	s15, s15
 8008b3c:	edc5 7a00 	vstr	s15, [r5]
 8008b40:	e7c2      	b.n	8008ac8 <__kernel_rem_pio2f+0x3d0>
 8008b42:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8008a08 <__kernel_rem_pio2f+0x310>
 8008b46:	e7f2      	b.n	8008b2e <__kernel_rem_pio2f+0x436>
 8008b48:	aa2e      	add	r2, sp, #184	; 0xb8
 8008b4a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8008b4e:	edd0 7a00 	vldr	s15, [r0]
 8008b52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008b56:	3901      	subs	r1, #1
 8008b58:	2900      	cmp	r1, #0
 8008b5a:	daf5      	bge.n	8008b48 <__kernel_rem_pio2f+0x450>
 8008b5c:	f1bb 0f00 	cmp.w	fp, #0
 8008b60:	d017      	beq.n	8008b92 <__kernel_rem_pio2f+0x49a>
 8008b62:	eef1 7a47 	vneg.f32	s15, s14
 8008b66:	edc5 7a00 	vstr	s15, [r5]
 8008b6a:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8008b6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008b72:	a82f      	add	r0, sp, #188	; 0xbc
 8008b74:	2101      	movs	r1, #1
 8008b76:	428b      	cmp	r3, r1
 8008b78:	da0e      	bge.n	8008b98 <__kernel_rem_pio2f+0x4a0>
 8008b7a:	f1bb 0f00 	cmp.w	fp, #0
 8008b7e:	d001      	beq.n	8008b84 <__kernel_rem_pio2f+0x48c>
 8008b80:	eef1 7a67 	vneg.f32	s15, s15
 8008b84:	edc5 7a01 	vstr	s15, [r5, #4]
 8008b88:	e79e      	b.n	8008ac8 <__kernel_rem_pio2f+0x3d0>
 8008b8a:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8008a08 <__kernel_rem_pio2f+0x310>
 8008b8e:	4619      	mov	r1, r3
 8008b90:	e7e2      	b.n	8008b58 <__kernel_rem_pio2f+0x460>
 8008b92:	eef0 7a47 	vmov.f32	s15, s14
 8008b96:	e7e6      	b.n	8008b66 <__kernel_rem_pio2f+0x46e>
 8008b98:	ecb0 7a01 	vldmia	r0!, {s14}
 8008b9c:	3101      	adds	r1, #1
 8008b9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ba2:	e7e8      	b.n	8008b76 <__kernel_rem_pio2f+0x47e>
 8008ba4:	edd0 7a00 	vldr	s15, [r0]
 8008ba8:	edd0 6a01 	vldr	s13, [r0, #4]
 8008bac:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008bb0:	3c01      	subs	r4, #1
 8008bb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008bb6:	ed80 7a00 	vstr	s14, [r0]
 8008bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bbe:	edc0 7a01 	vstr	s15, [r0, #4]
 8008bc2:	e791      	b.n	8008ae8 <__kernel_rem_pio2f+0x3f0>
 8008bc4:	edd1 7a00 	vldr	s15, [r1]
 8008bc8:	edd1 6a01 	vldr	s13, [r1, #4]
 8008bcc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008bd0:	3801      	subs	r0, #1
 8008bd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008bd6:	ed81 7a00 	vstr	s14, [r1]
 8008bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bde:	edc1 7a01 	vstr	s15, [r1, #4]
 8008be2:	e786      	b.n	8008af2 <__kernel_rem_pio2f+0x3fa>
 8008be4:	aa2e      	add	r2, sp, #184	; 0xb8
 8008be6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8008bea:	ed91 7a00 	vldr	s14, [r1]
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008bf4:	e783      	b.n	8008afe <__kernel_rem_pio2f+0x406>
 8008bf6:	eef1 6a66 	vneg.f32	s13, s13
 8008bfa:	eeb1 7a47 	vneg.f32	s14, s14
 8008bfe:	edc5 6a00 	vstr	s13, [r5]
 8008c02:	ed85 7a01 	vstr	s14, [r5, #4]
 8008c06:	eef1 7a67 	vneg.f32	s15, s15
 8008c0a:	e785      	b.n	8008b18 <__kernel_rem_pio2f+0x420>

08008c0c <__kernel_sinf>:
 8008c0c:	ee10 3a10 	vmov	r3, s0
 8008c10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c14:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008c18:	da04      	bge.n	8008c24 <__kernel_sinf+0x18>
 8008c1a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008c1e:	ee17 3a90 	vmov	r3, s15
 8008c22:	b35b      	cbz	r3, 8008c7c <__kernel_sinf+0x70>
 8008c24:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008c28:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008c80 <__kernel_sinf+0x74>
 8008c2c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8008c84 <__kernel_sinf+0x78>
 8008c30:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008c34:	eddf 7a14 	vldr	s15, [pc, #80]	; 8008c88 <__kernel_sinf+0x7c>
 8008c38:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008c3c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8008c8c <__kernel_sinf+0x80>
 8008c40:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008c44:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008c90 <__kernel_sinf+0x84>
 8008c48:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008c4c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008c50:	b930      	cbnz	r0, 8008c60 <__kernel_sinf+0x54>
 8008c52:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8008c94 <__kernel_sinf+0x88>
 8008c56:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008c5a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008c5e:	4770      	bx	lr
 8008c60:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008c64:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008c68:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008c6c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008c70:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008c98 <__kernel_sinf+0x8c>
 8008c74:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008c78:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	2f2ec9d3 	.word	0x2f2ec9d3
 8008c84:	b2d72f34 	.word	0xb2d72f34
 8008c88:	3638ef1b 	.word	0x3638ef1b
 8008c8c:	b9500d01 	.word	0xb9500d01
 8008c90:	3c088889 	.word	0x3c088889
 8008c94:	be2aaaab 	.word	0xbe2aaaab
 8008c98:	3e2aaaab 	.word	0x3e2aaaab

08008c9c <fabsf>:
 8008c9c:	ee10 3a10 	vmov	r3, s0
 8008ca0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ca4:	ee00 3a10 	vmov	s0, r3
 8008ca8:	4770      	bx	lr
	...

08008cac <floorf>:
 8008cac:	ee10 3a10 	vmov	r3, s0
 8008cb0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008cb4:	3a7f      	subs	r2, #127	; 0x7f
 8008cb6:	2a16      	cmp	r2, #22
 8008cb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008cbc:	dc2a      	bgt.n	8008d14 <floorf+0x68>
 8008cbe:	2a00      	cmp	r2, #0
 8008cc0:	da11      	bge.n	8008ce6 <floorf+0x3a>
 8008cc2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008d24 <floorf+0x78>
 8008cc6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008cca:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cd2:	dd05      	ble.n	8008ce0 <floorf+0x34>
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	da23      	bge.n	8008d20 <floorf+0x74>
 8008cd8:	4a13      	ldr	r2, [pc, #76]	; (8008d28 <floorf+0x7c>)
 8008cda:	2900      	cmp	r1, #0
 8008cdc:	bf18      	it	ne
 8008cde:	4613      	movne	r3, r2
 8008ce0:	ee00 3a10 	vmov	s0, r3
 8008ce4:	4770      	bx	lr
 8008ce6:	4911      	ldr	r1, [pc, #68]	; (8008d2c <floorf+0x80>)
 8008ce8:	4111      	asrs	r1, r2
 8008cea:	420b      	tst	r3, r1
 8008cec:	d0fa      	beq.n	8008ce4 <floorf+0x38>
 8008cee:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008d24 <floorf+0x78>
 8008cf2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008cf6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cfe:	ddef      	ble.n	8008ce0 <floorf+0x34>
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	bfbe      	ittt	lt
 8008d04:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8008d08:	fa40 f202 	asrlt.w	r2, r0, r2
 8008d0c:	189b      	addlt	r3, r3, r2
 8008d0e:	ea23 0301 	bic.w	r3, r3, r1
 8008d12:	e7e5      	b.n	8008ce0 <floorf+0x34>
 8008d14:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008d18:	d3e4      	bcc.n	8008ce4 <floorf+0x38>
 8008d1a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008d1e:	4770      	bx	lr
 8008d20:	2300      	movs	r3, #0
 8008d22:	e7dd      	b.n	8008ce0 <floorf+0x34>
 8008d24:	7149f2ca 	.word	0x7149f2ca
 8008d28:	bf800000 	.word	0xbf800000
 8008d2c:	007fffff 	.word	0x007fffff

08008d30 <scalbnf>:
 8008d30:	ee10 3a10 	vmov	r3, s0
 8008d34:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8008d38:	d025      	beq.n	8008d86 <scalbnf+0x56>
 8008d3a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008d3e:	d302      	bcc.n	8008d46 <scalbnf+0x16>
 8008d40:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008d44:	4770      	bx	lr
 8008d46:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8008d4a:	d122      	bne.n	8008d92 <scalbnf+0x62>
 8008d4c:	4b2a      	ldr	r3, [pc, #168]	; (8008df8 <scalbnf+0xc8>)
 8008d4e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008dfc <scalbnf+0xcc>
 8008d52:	4298      	cmp	r0, r3
 8008d54:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008d58:	db16      	blt.n	8008d88 <scalbnf+0x58>
 8008d5a:	ee10 3a10 	vmov	r3, s0
 8008d5e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008d62:	3a19      	subs	r2, #25
 8008d64:	4402      	add	r2, r0
 8008d66:	2afe      	cmp	r2, #254	; 0xfe
 8008d68:	dd15      	ble.n	8008d96 <scalbnf+0x66>
 8008d6a:	ee10 3a10 	vmov	r3, s0
 8008d6e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8008e00 <scalbnf+0xd0>
 8008d72:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008e04 <scalbnf+0xd4>
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	eeb0 7a67 	vmov.f32	s14, s15
 8008d7c:	bfb8      	it	lt
 8008d7e:	eef0 7a66 	vmovlt.f32	s15, s13
 8008d82:	ee27 0a27 	vmul.f32	s0, s14, s15
 8008d86:	4770      	bx	lr
 8008d88:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008e08 <scalbnf+0xd8>
 8008d8c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008d90:	4770      	bx	lr
 8008d92:	0dd2      	lsrs	r2, r2, #23
 8008d94:	e7e6      	b.n	8008d64 <scalbnf+0x34>
 8008d96:	2a00      	cmp	r2, #0
 8008d98:	dd06      	ble.n	8008da8 <scalbnf+0x78>
 8008d9a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008d9e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008da2:	ee00 3a10 	vmov	s0, r3
 8008da6:	4770      	bx	lr
 8008da8:	f112 0f16 	cmn.w	r2, #22
 8008dac:	da1a      	bge.n	8008de4 <scalbnf+0xb4>
 8008dae:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008db2:	4298      	cmp	r0, r3
 8008db4:	ee10 3a10 	vmov	r3, s0
 8008db8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008dbc:	dd0a      	ble.n	8008dd4 <scalbnf+0xa4>
 8008dbe:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8008e00 <scalbnf+0xd0>
 8008dc2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008e04 <scalbnf+0xd4>
 8008dc6:	eef0 7a40 	vmov.f32	s15, s0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	bf18      	it	ne
 8008dce:	eeb0 0a47 	vmovne.f32	s0, s14
 8008dd2:	e7db      	b.n	8008d8c <scalbnf+0x5c>
 8008dd4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8008e08 <scalbnf+0xd8>
 8008dd8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008e0c <scalbnf+0xdc>
 8008ddc:	eef0 7a40 	vmov.f32	s15, s0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	e7f3      	b.n	8008dcc <scalbnf+0x9c>
 8008de4:	3219      	adds	r2, #25
 8008de6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008dea:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008dee:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008e10 <scalbnf+0xe0>
 8008df2:	ee07 3a10 	vmov	s14, r3
 8008df6:	e7c4      	b.n	8008d82 <scalbnf+0x52>
 8008df8:	ffff3cb0 	.word	0xffff3cb0
 8008dfc:	4c000000 	.word	0x4c000000
 8008e00:	7149f2ca 	.word	0x7149f2ca
 8008e04:	f149f2ca 	.word	0xf149f2ca
 8008e08:	0da24260 	.word	0x0da24260
 8008e0c:	8da24260 	.word	0x8da24260
 8008e10:	33000000 	.word	0x33000000

08008e14 <_init>:
 8008e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e16:	bf00      	nop
 8008e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e1a:	bc08      	pop	{r3}
 8008e1c:	469e      	mov	lr, r3
 8008e1e:	4770      	bx	lr

08008e20 <_fini>:
 8008e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e22:	bf00      	nop
 8008e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e26:	bc08      	pop	{r3}
 8008e28:	469e      	mov	lr, r3
 8008e2a:	4770      	bx	lr
